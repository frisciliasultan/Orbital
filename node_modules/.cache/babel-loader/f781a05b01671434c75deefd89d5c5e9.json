{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/ModulePlannerPage.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { handleSaveClick } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty';\n\nconst ModulePlannerPageTemp = props => {\n  const module = props.modplan.modules;\n  const [noOfYear, setNoOfYear] = useState(4);\n  useEffect(() => {\n    if (isEmpty(props.modplan.rules)) {\n      props.callBackendAPI('Rules', \"r_ulr\", \"r_cs_degree\");\n    }\n\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI('NUSMods');\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n      console.log(props.modplan.selectedModules);\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo)) {\n      const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n      const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n      const noOfYear = end - start;\n      setNoOfYear(noOfYear);\n    }\n  }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear]);\n\n  const handleEvalButtonClick = () => {\n    const modules = props.modplan.selectedModules;\n\n    if (isEmpty(modules)) {\n      alert('Please add modules before evaluating');\n    } else {\n      props.setCallBackendNow(true);\n    }\n  };\n\n  const generateYearObject = noOfYear => {\n    const year = Number(props.settings.userInfo.matriculationYear.substr(0, 4));\n    let display = [];\n\n    for (let i = 1; i <= noOfYear; i++) {\n      const start = year + i - 1;\n      display.push({\n        year: `Year ${i}`,\n        AY: `${start}/${start + 1}`\n      });\n    }\n\n    return display;\n  };\n\n  const generateYearDisplay = yearObject => {\n    return yearObject.map(object => {\n      return /*#__PURE__*/React.createElement(YearDisplay, {\n        year: object.year,\n        AY: object.AY,\n        module: module,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(DndProvider, {\n    backend: Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-module-planner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, !isEmpty(props.settings.userInfo) && generateYearDisplay(generateYearObject(noOfYear)), /*#__PURE__*/React.createElement(TrashBox, {\n    module: props.modplan.selectedModules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    id: \"eval-button\",\n    onClick: () => handleEvalButtonClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \"Evaluate\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Save\"), !isEmpty(props.success) && /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, props.success), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, \"Click on each requirement for further information\"), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Rules, {\n    rules: props.modplan.rules,\n    settings: props.settings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })));\n};\n\nModulePlannerPageTemp.propTypes = {\n  callBackendAPI: PropTypes.func.isRequired,\n  setCallBackendNow: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  callBackendAPI,\n  setCallBackendNow,\n  updateSettings,\n  setSelectedModules\n})(ModulePlannerPageTemp);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/ModulePlannerPage.jsx"],"names":["React","useEffect","useState","Board","Rules","TrashBox","YearDisplay","Button","Card","HTML5Backend","Backend","DndProvider","connect","callBackendAPI","setCallBackendNow","setSelectedModules","updateSettings","handleSaveClick","PropTypes","isEmpty","ModulePlannerPageTemp","props","module","modplan","modules","noOfYear","setNoOfYear","rules","settings","userInfo","modPlan","selectedModules","console","log","start","matriculationYear","substr","end","targetGradYear","handleEvalButtonClick","alert","generateYearObject","year","Number","display","i","push","AY","generateYearDisplay","yearObject","map","object","success","color","propTypes","func","isRequired","cap","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { handleSaveClick } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty'\n\n\nconst ModulePlannerPageTemp = (props) => {\n\n    const module = props.modplan.modules;\n    const [noOfYear, setNoOfYear] = useState(4)\n    useEffect(() => {\n        if(isEmpty(props.modplan.rules)) {\n            props.callBackendAPI('Rules', \"r_ulr\", \"r_cs_degree\");\n        }\n        \n        if(isEmpty(props.modplan.modules)){\n            props.callBackendAPI('NUSMods');\n        }\n    }, [])\n\n    useEffect(() => {\n            if(!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n                console.log(props.modplan.selectedModules)\n                props.setSelectedModules(null, props.settings.userInfo.modPlan)\n            }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        if(!isEmpty(props.settings.userInfo)) {\n            const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n            const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n            const noOfYear = end - start;\n            setNoOfYear(noOfYear);\n        }\n\n    }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear])\n\n    const handleEvalButtonClick = () => {\n        const modules = props.modplan.selectedModules;\n        if (isEmpty(modules)) {\n            alert('Please add modules before evaluating');\n        } else {\n            props.setCallBackendNow(true);\n        }\n    }\n\n    const generateYearObject = (noOfYear) => {\n        const year = Number(props.settings.userInfo.matriculationYear.substr(0,4));\n        let display = [];\n        for(let i = 1; i <= noOfYear; i ++) {\n            const start = year + i - 1;\n            display.push({\n                year: `Year ${i}`,\n                AY: `${start}/${start + 1}`\n            })\n        }\n        return display;\n    }\n\n    const generateYearDisplay = (yearObject) => {\n        return yearObject.map((object) => {\n            return (\n                <YearDisplay\n                    year={object.year}\n                    AY={object.AY}\n                    module={module} />\n            )\n        })\n    }\n\n    return (\n        <DndProvider backend={Backend} >\n            <div className=\"container-module-planner\">\n                {!isEmpty(props.settings.userInfo) && generateYearDisplay(generateYearObject(noOfYear))}\n                {/* <YearDisplay\n                        year=\"Year 1\"\n                        AY=\"2018/2019\"\n                        module={module} />\n\n                <YearDisplay\n                        year=\"Year 2\"\n                        AY=\"2019/2020\"\n                        module={module}/> \n\n                <YearDisplay\n                        year=\"Year 3\"\n                        AY=\"2020/2021\"\n                        module={module} />\n\n                <YearDisplay\n                        year=\"Year 4\"\n                        AY=\"2022/2023\"\n                        module={module} />  */}\n                \n                <TrashBox\n                        module={props.modplan.selectedModules}/>\n\n\n                <br/>\n\n                <Button className=\"button\" id=\"eval-button\" onClick={() => handleEvalButtonClick()}>Evaluate</Button>\n                <br/>\n\n                <Button className=\"button\" onClick={() => handleSaveClick(props)} >Save</Button>\n                {!isEmpty(props.success) && \n                <span style={{color: \"green\"}}>\n                    {props.success}\n                </span>}\n\n                <br/>\n                <br/>\n                <p>Click on each requirement for further information</p>\n                <Card>\n                    <Rules\n                        rules={props.modplan.rules}\n                        settings={props.settings}/>\n                </Card>\n                <br/>\n            </div>\n        </DndProvider>\n    )\n}\n\nModulePlannerPageTemp.propTypes = {\n    callBackendAPI: PropTypes.func.isRequired,\n    setCallBackendNow: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success\n});\n\nexport default connect(mapStateToProps, \n                    { callBackendAPI, setCallBackendNow, updateSettings, setSelectedModules }) \n                    (ModulePlannerPageTemp);\n"]},"metadata":{},"sourceType":"module"}