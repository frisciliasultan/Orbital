{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\nfunction Board(props) {\n  const [isBoardFilled, setIsBoardFilled] = useState(false);\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false); // const [selectedModules, setSelectedModules] = useState();\n\n  const [display, setDisplay] = useState();\n  const selectedModules = props.selectedModules;\n  useEffect(() => {\n    updateIsBoardFilled();\n\n    if (selectedModules) {\n      generateCards();\n    }\n  }, [props.selectedModules]);\n\n  const generateCards = () => selectedModules.filter((object, i) => object.location === props.id).map((object, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: object.moduleCode,\n    location: props.id,\n    title: `${object.moduleCode}: ${object.title}`,\n    MCs: object.moduleCredit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 18\n    }\n  }));\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n  }\n\n  function updateIsBoardFilled() {\n    if (selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n      setIsBoardFilled(true); // console.log('isboard updated to true')\n      // console.log('inside' + isBoardFilled)\n    } else {\n      setIsBoardFilled(false); // console.log('isboard updated to false')\n    } // console.log('out ' + isBoardFilled)\n\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    style: {\n      width: '20rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    style: {\n      width: '165px',\n      height: !isBoardFilled && '59px',\n      outline: isBoardFilled ? 'none' : '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, isBoardFilled ? generateCards() : 'Drop module here'), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    location: props.id,\n    updateSelectedModules: props.updateSelectedModules,\n    module: props.module,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Add Module\")));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","Board","props","isBoardFilled","setIsBoardFilled","isTextBoxOpen","setIsTextBoxOpen","display","setDisplay","selectedModules","updateIsBoardFilled","generateCards","filter","object","i","location","id","map","moduleCode","title","moduleCredit","isOver","drop","accept","CARD","item","monitor","updateModuleLocation","collect","handleButtonClick","length","semester","width","height","outline","updateSelectedModules","module"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\n\nfunction Board (props) {\n    const [isBoardFilled, setIsBoardFilled] = useState(false);\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    \n    // const [selectedModules, setSelectedModules] = useState();\n    const [display, setDisplay] = useState();\n    const selectedModules = props.selectedModules;\n    \n    useEffect(() => { \n            updateIsBoardFilled();\n            if(selectedModules) {\n                generateCards();\n            }\n           \n    }, [props.selectedModules])\n        \n    const generateCards = () => selectedModules\n        .filter((object, i) => object.location === props.id)\n        .map((object, i) => \n                (<ModuleCard\n                    id={object.moduleCode}\n                    location={props.id}\n                    title={`${object.moduleCode}: ${object.title}`}\n                    MCs={object.moduleCredit}/>));\n\n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n     }\n\n    function updateIsBoardFilled() {\n        if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n            setIsBoardFilled(true);\n            // console.log('isboard updated to true')\n            // console.log('inside' + isBoardFilled)\n            \n        } else {\n            setIsBoardFilled(false);\n            // console.log('isboard updated to false')\n        }\n        // console.log('out ' + isBoardFilled)\n    }\n \n\n        \n        return (\n            \n            <div>\n                <h3>{props.semester}</h3>\n            <div   \n                ref={drop}\n                id={props.id}\n                style={{width: '20rem'}}\n            >\n\n            <div className=\"\" style={{width: '165px', \n                        height: (!isBoardFilled) && '59px', \n                        outline: isBoardFilled ? 'none' : '1px dotted'}}>\n                            {isBoardFilled ? generateCards() : 'Drop module here'}\n            </div>\n            {isTextBoxOpen && <AutoCompleteText \n                                            location={props.id}\n                                            updateSelectedModules={props.updateSelectedModules}\n                                            module={props.module}/>}\n                <Button className=\"button\" onClick={handleButtonClick}>Add Module</Button>\n                \n                </div>\n            </div>\n        )\n   \n}\n\nexport default Board;\n\n"]},"metadata":{},"sourceType":"module"}