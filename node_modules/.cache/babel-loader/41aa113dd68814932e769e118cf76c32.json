{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteText.jsx\";\nimport React from 'react';\nimport \"./AutocompleteText.css\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('https://api.nusmods.com/v2/2019-2020/moduleInfo.json', {\n        'accept': 'application/json'\n      });\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      console.log(body);\n      return body;\n    };\n\n    this.state = {\n      module: null,\n      suggestions: [],\n      text: '',\n      selectedModules: []\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderSuggestions = this.renderSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.callBackendAPI = this.callBackendAPI.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n    this.updateSelectedModules = this.updateSelectedModules.bind(this);\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      module: res\n    })).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    let suggestions = [];\n    const {\n      module\n    } = this.state;\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n\n      for (let i = 0; i < module.length; i++) {\n        const moduleCode = module[i].moduleCode;\n\n        if (regex.test(moduleCode)) {\n          suggestions.push(module[i]);\n        }\n      }\n    }\n\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  }\n\n  handleListClick(object) {\n    this.props.updateModuleCards(object);\n    this.setState(() => ({\n      suggestions: []\n    }));\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, suggestions.map(object => /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.handleListClick(object),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 46\n      }\n    }, `${object.moduleCode}: ${object.title}`)));\n  }\n\n  suggestionsSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  updateSelectedModules(object) {\n    object.location = props.year + ' ' + props.semester;\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(object)) {\n      newModuleCodeTitle.push(object);\n      setModuleCodeTitle(newModuleCodeTitle);\n      setDisplayCard(generateCards);\n    }\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: text,\n      onChange: this.handleTextChange,\n      type: \"text\",\n      placeholder: \"Enter module code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }), this.renderSuggestions()), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, this.state.moduleCode));\n  }\n\n}\n\nexport default AutoCompleteText;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteText.jsx"],"names":["React","AutoCompleteText","Component","constructor","props","callBackendAPI","response","fetch","body","json","status","Error","message","console","log","state","module","suggestions","text","selectedModules","handleTextChange","bind","renderSuggestions","suggestionsSelected","handleListClick","updateSelectedModules","componentDidMount","then","res","setState","catch","err","e","value","target","length","regex","RegExp","i","moduleCode","test","push","object","updateModuleCards","map","title","location","year","semester","newModuleCodeTitle","moduleCodeTitle","includes","setModuleCodeTitle","setDisplayCard","generateCards","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"./AutocompleteText.css\";\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = { module: null,\n                       suggestions: [],\n                       text: '',\n                       selectedModules: []\n                     };\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.renderSuggestions = this.renderSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.callBackendAPI = this.callBackendAPI.bind(this);\n        this.handleListClick = this.handleListClick.bind(this);\n        this.updateSelectedModules = this.updateSelectedModules.bind(this);\n    }\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n      this.callBackendAPI()\n        .then(res => this.setState({ module: res }))\n        .catch(err => console.log(err));\n      \n\n    }\n      // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n      const response = await fetch('https://api.nusmods.com/v2/2019-2020/moduleInfo.json', {'accept': 'application/json'});\n      const body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      console.log(body);\n      return body;\n    };\n\n\n    handleTextChange (e) {\n        const value = e.target.value;\n        let suggestions = [];\n        const { module } = this.state;\n        \n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n\n            for(let i = 0; i < module.length; i++) {\n                const moduleCode = module[i].moduleCode\n                if(regex.test(moduleCode)) {\n                    suggestions.push(module[i]);\n                }\n            }\n\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    handleListClick(object) {\n        this.props.updateModuleCards(object);\n        this.setState(() => ({suggestions: []})) \n    }\n\n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        return (\n            <ul>\n                {suggestions.map((object) => <li onClick={() => this.handleListClick(object)}>{`${object.moduleCode}: ${object.title}`}</li>)}\n            </ul>\n        );\n\n    }\n\n    suggestionsSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    updateSelectedModules(object) {\n        object.location = props.year + ' ' + props.semester;\n         let newModuleCodeTitle = moduleCodeTitle;\n         if (!newModuleCodeTitle.includes(object)) {\n             newModuleCodeTitle.push(object);\n             setModuleCodeTitle(newModuleCodeTitle);\n             setDisplayCard(generateCards);\n         }\n \n     }\n\n    render () {\n        const { text } = this.state;\n        return (\n            <div>\n                <div className=\"AutoCompleteText\">\n                <input \n                       value={text}\n                       onChange={this.handleTextChange}\n                       type=\"text\"\n                       placeholder=\"Enter module code\" />\n                {this.renderSuggestions()}\n                \n                </div>\n\n                <h1>{this.state.moduleCode}</h1>    \n                </div>\n        )\n    }\n}\n\nexport default AutoCompleteText;"]},"metadata":{},"sourceType":"module"}