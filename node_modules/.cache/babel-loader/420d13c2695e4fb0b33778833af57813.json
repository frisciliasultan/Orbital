{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd'; //import generateCards from './generateCards'\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n  const [displayCard, setDisplayCard] = useState();\n\n  const generateCards = () => moduleCodeTitle.map((item, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: \"card_\" + i,\n    className: \"card\",\n    title: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }));\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => item.id,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n  }\n\n  function updateModuleCards(item) {\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(item)) {\n      newModuleCodeTitle.push(item);\n      setModuleCodeTitle(newModuleCodeTitle);\n      setDisplayCard(generateCards);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(Card, {\n    ref: drop,\n    id: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '15rem',\n      outline: '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, displayCard ? displayCard : 'Drop module here'), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    updateModuleCards: updateModuleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Add Module\"))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","moduleCodeTitle","setModuleCodeTitle","displayCard","setDisplayCard","generateCards","map","item","i","isOver","drop","accept","CARD","monitor","id","collect","handleButtonClick","updateModuleCards","newModuleCodeTitle","includes","push","semester","width","outline"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,OAAOC,UAAP,MAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CACA;;AAKA,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACnB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,EAA9C;;AACA,QAAMgB,aAAa,GAAG,MAAMJ,eAAe,CAACK,GAAhB,CAAoB,CAACC,IAAD,EAAOC,CAAP,kBACvC,oBAAC,UAAD;AACG,IAAA,EAAE,EAAE,UAAUA,CADjB;AAEG,IAAA,SAAS,EAAC,MAFb;AAGG,IAAA,KAAK,EAAED,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADmB,CAA5B;;AAMA,QAAM,CAAC;AAAEE,IAAAA;AAAF,GAAD,EAAaC,IAAb,IAAqBd,OAAO,CAAC;AAC3Be,IAAAA,MAAM,EAAEhB,SAAS,CAACiB,IADS;AAE3BF,IAAAA,IAAI,EAAE,CAACH,IAAD,EAAOM,OAAP,KAAoBN,IAAI,CAACO,EAFJ;AAG3BC,IAAAA,OAAO,EAAEF,OAAO,KAAK;AACjBJ,MAAAA,MAAM,EAAE,CAAC,CAACI,OAAO,CAACJ,MAAR;AADO,KAAL;AAHW,GAAD,CAAlC;;AAQA,WAASO,iBAAT,GAA6B;AACzBhB,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACF;;AAEF,WAASkB,iBAAT,CAA2BV,IAA3B,EAAiC;AAC7B,QAAIW,kBAAkB,GAAGjB,eAAzB;;AACA,QAAI,CAACiB,kBAAkB,CAACC,QAAnB,CAA4BZ,IAA5B,CAAL,EAAwC;AACpCW,MAAAA,kBAAkB,CAACE,IAAnB,CAAwBb,IAAxB;AACAL,MAAAA,kBAAkB,CAACgB,kBAAD,CAAlB;AACAd,MAAAA,cAAc,CAACC,aAAD,CAAd;AACH;AAEJ;;AAEG,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,KAAK,CAACuB,QAAX,CADJ,eAEA,oBAAC,IAAD;AACI,IAAA,GAAG,EAAEX,IADT;AAEI,IAAA,EAAE,EAAEZ,KAAK,CAACgB,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKA;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsDpB,WAAW,GAAGA,WAAH,GAAiB,kBAAlF,CALA,eASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,aAAa,iBAAI,oBAAC,gBAAD;AAAkB,IAAA,iBAAiB,EAAEkB,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADtB,eAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CATA,CAFA,CADJ;AAoBP;;AAED,eAAenB,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n//import generateCards from './generateCards'\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n    const [displayCard, setDisplayCard] = useState();\n    const generateCards = () => moduleCodeTitle.map((item, i) => \n            (<ModuleCard\n                id={\"card_\" + i}\n                className=\"card\"\n                title={item}/>));\n    \n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => (item.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n     }\n\n    function updateModuleCards(item) {\n        let newModuleCodeTitle = moduleCodeTitle;\n        if (!newModuleCodeTitle.includes(item)) {\n            newModuleCodeTitle.push(item);\n            setModuleCodeTitle(newModuleCodeTitle);\n            setDisplayCard(generateCards);\n        }\n\n    }\n\n        return (\n            <div>\n                <h3>{props.semester}</h3>\n            <Card   \n                ref={drop}\n                id={props.id}\n            >\n\n            <div style={{width: '15rem', outline: '1px dotted'}}>{displayCard ? displayCard : 'Drop module here'}</div>\n\n                \n            \n            <div>\n                {isTextBoxOpen && <AutoCompleteText updateModuleCards={updateModuleCards}/>}\n                <Button onClick={handleButtonClick}>Add Module</Button>\n                </div>\n                </Card>\n            </div>\n        )\n   \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}