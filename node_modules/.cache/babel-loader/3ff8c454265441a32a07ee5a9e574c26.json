{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, USER_REGISTERED } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios.post(\"http://172.19.162.53:3000/user/register\", userData).then(res => dispatch(setUserRegistered())) // re-direct to login on successful register\n  .catch(err => {\n    if (err.response) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    } else {\n      window.location.replace(\"/500-error\");\n    }\n  });\n}; // Login - get user token\n\nexport const loginUser = (userData, status) => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios.post(\"http://172.19.162.53:3000/user/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded, status));\n  }).catch(err => {\n    if (err.response) {\n      console.log('res called');\n      console.log(err.response.status);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    } else {\n      window.location.replace(\"/500-error\");\n    }\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = (decoded, status) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n    firstTimeRegistered: status\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // User registered\n\nexport const setUserRegistered = () => {\n  return {\n    type: USER_REGISTERED\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}, false));\n};","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","USER_REGISTERED","registerUser","userData","history","dispatch","defaults","timeout","post","then","res","setUserRegistered","catch","err","response","type","payload","data","window","location","replace","loginUser","status","token","localStorage","setItem","decoded","setCurrentUser","console","log","firstTimeRegistered","setUserLoading","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING,\n  USER_REGISTERED\n} from \"./types\";\n\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios\n    .post(\"http://172.19.162.53:3000/user/register\", userData)\n    .then(res => dispatch(setUserRegistered())) // re-direct to login on successful register\n    .catch(err => {\n      if(err.response) {\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      }\n\n      else {\n        window.location.replace(\"/500-error\")\n      }\n    }\n    );\n};\n\n// Login - get user token\nexport const loginUser = (userData, status) => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios\n    .post(\"http://172.19.162.53:3000/user/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded, status));\n    })\n    .catch(err => {\n      if(err.response) {\n        console.log('res called')\n        console.log(err.response.status)\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      } else {\n        window.location.replace(\"/500-error\")\n      } \n    \n    }\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = (decoded, status) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n    firstTimeRegistered: status\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// User registered\nexport const setUserRegistered = () => {\n  return {\n    type: USER_REGISTERED\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}, false));\n};"]},"metadata":{},"sourceType":"module"}