{"ast":null,"code":"import { SET_MODULES_FOR_CAP, SET_SEMESTER_OPTIONS, CLEAN_UP_CAP, SET_TRANSCRIPT } from \"../actions/types\";\nconst initialState = {\n  transcript: [],\n  targetGrade: [],\n  cap: null,\n  semesterOptions: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_TRANSCRIPT:\n      const transcript = [...action.transcript];\n      const {\n        moduleAdded,\n        unique,\n        indexOfDuplicate,\n        category\n      } = action;\n\n      if (!moduleAdded) {\n        return { ...state,\n          transcript: transcript\n        };\n      }\n\n      if (!transcript.includes(moduleAdded)) {\n        if (unique) {\n          transcript.push(moduleAdded);\n        } else {\n          transcript.splice(indexOfDuplicate, 1);\n          transcript.push(moduleAdded);\n        }\n      }\n\n      if (category === \"target\") {\n        return { ...state,\n          targetGrade: transcript\n        };\n      } else {\n        return { ...state,\n          transcript: transcript\n        };\n      }\n\n    case SET_SEMESTER_OPTIONS:\n      let sem1;\n      let sem2;\n      let semesterOptions = [];\n\n      for (let i = 1; i < action.payload * 2; i += 2) {\n        const year = Math.ceil(i / 2);\n        sem1 = `Year ${year} Semester 1`;\n        sem2 = `Year ${year} Semester 2`;\n        semesterOptions[i - 1] = sem1;\n        semesterOptions[i] = sem2;\n      }\n\n      return { ...state,\n        semesterOptions: semesterOptions\n      };\n\n    case CLEAN_UP_CAP:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/reducers/capReducer.js"],"names":["SET_MODULES_FOR_CAP","SET_SEMESTER_OPTIONS","CLEAN_UP_CAP","SET_TRANSCRIPT","initialState","transcript","targetGrade","cap","semesterOptions","state","action","type","moduleAdded","unique","indexOfDuplicate","category","includes","push","splice","sem1","sem2","i","payload","year","Math","ceil"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,oBAFJ,EAGIC,YAHJ,EAIIC,cAJJ,QAKO,kBALP;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,GAAG,EAAE,IAHY;AAIjBC,EAAAA,eAAe,EAAE;AAJA,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAuC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,cAAL;AACI,YAAME,UAAU,GAAG,CAAC,GAAGK,MAAM,CAACL,UAAX,CAAnB;AACA,YAAM;AAAEO,QAAAA,WAAF;AAAeC,QAAAA,MAAf;AAAuBC,QAAAA,gBAAvB;AAAyCC,QAAAA;AAAzC,UAAsDL,MAA5D;;AAEA,UAAG,CAACE,WAAJ,EAAiB;AACb,eAAO,EACH,GAAGH,KADA;AAEHJ,UAAAA,UAAU,EAAEA;AAFT,SAAP;AAIH;;AAED,UAAI,CAACA,UAAU,CAACW,QAAX,CAAoBJ,WAApB,CAAL,EAAuC;AACnC,YAAGC,MAAH,EAAW;AACPR,UAAAA,UAAU,CAACY,IAAX,CAAgBL,WAAhB;AACH,SAFD,MAEO;AACHP,UAAAA,UAAU,CAACa,MAAX,CAAkBJ,gBAAlB,EAAoC,CAApC;AACAT,UAAAA,UAAU,CAACY,IAAX,CAAgBL,WAAhB;AACH;AACJ;;AAED,UAAGG,QAAQ,KAAK,QAAhB,EAA0B;AACtB,eAAO,EACH,GAAGN,KADA;AAEHH,UAAAA,WAAW,EAAED;AAFV,SAAP;AAIH,OALD,MAKO;AACH,eAAO,EACH,GAAGI,KADA;AAEHJ,UAAAA,UAAU,EAAEA;AAFT,SAAP;AAIH;;AAGL,SAAKJ,oBAAL;AACI,UAAIkB,IAAJ;AACA,UAAIC,IAAJ;AACA,UAAIZ,eAAe,GAAG,EAAtB;;AAEA,WAAI,IAAIa,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAIX,MAAM,CAACY,OAAP,GAAiB,CAArC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD;AAC7C,cAAME,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUJ,CAAC,GAAG,CAAd,CAAb;AACAF,QAAAA,IAAI,GAAI,QAAOI,IAAK,aAApB;AACAH,QAAAA,IAAI,GAAI,QAAOG,IAAK,aAApB;AACAf,QAAAA,eAAe,CAACa,CAAC,GAAG,CAAL,CAAf,GAAyBF,IAAzB;AACAX,QAAAA,eAAe,CAACa,CAAD,CAAf,GAAqBD,IAArB;AACH;;AAED,aAAO,EACH,GAAGX,KADA;AAEHD,QAAAA,eAAe,EAAEA;AAFd,OAAP;;AAKJ,SAAKN,YAAL;AACI,aAAOE,YAAP;;AAEJ;AACI,aAAOK,KAAP;AAxDR;AA0DH","sourcesContent":["import {\n    SET_MODULES_FOR_CAP,\n    SET_SEMESTER_OPTIONS,\n    CLEAN_UP_CAP,\n    SET_TRANSCRIPT\n} from \"../actions/types\";\n\nconst initialState = {\n    transcript: [],\n    targetGrade: [],\n    cap: null,\n    semesterOptions: []\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_TRANSCRIPT: \n            const transcript = [...action.transcript];\n            const { moduleAdded, unique, indexOfDuplicate, category } = action;\n            \n            if(!moduleAdded) {\n                return {\n                    ...state,\n                    transcript: transcript\n                }\n            }\n\n            if (!transcript.includes(moduleAdded)) {\n                if(unique) {\n                    transcript.push(moduleAdded);\n                } else {\n                    transcript.splice(indexOfDuplicate, 1);\n                    transcript.push(moduleAdded);           \n                }\n            }\n            \n            if(category === \"target\") {\n                return {\n                    ...state, \n                    targetGrade: transcript\n                }\n            } else {\n                return {\n                    ...state, \n                    transcript: transcript\n                }\n            }\n            \n        \n        case SET_SEMESTER_OPTIONS: \n            let sem1;\n            let sem2;\n            let semesterOptions = [];\n\n            for(let i = 1; i < (action.payload * 2); i += 2) {\n                const year = Math.ceil(i / 2);\n                sem1 = `Year ${year} Semester 1`;\n                sem2 = `Year ${year} Semester 2`;\n                semesterOptions[i - 1] = sem1;\n                semesterOptions[i] = sem2;\n            }\n\n            return {\n                ...state,\n                semesterOptions: semesterOptions\n            }\n\n        case CLEAN_UP_CAP:\n            return initialState;\n\n        default: \n            return state;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}