{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/Options.js\";\nimport React, { useState } from \"react\";\nimport AutoCompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport { generateOptions } from \"../utils/commonFunctions\";\nimport isEmpty from \"is-empty\";\nimport { Switch } from \"antd\";\n\nconst Options = props => {\n  // const optionList = !isEmpty(props.optionList) ? props.optionList : null;\n  // const status = props.status[0].toUpperCase() + props.status.slice(1);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const renderContent = () => {\n    if (props.editing || isOpen) {\n      if (!props.hidden || !props.category) {\n        return /*#__PURE__*/React.createElement(\"select\", {\n          name: props.name,\n          onChange: props.handleChange,\n          defaultValue: \"None\",\n          value: props.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          key: \"choose\" + props.label,\n          value: \"None\",\n          disabled: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }\n        }, \"Choose \" + props.label), generateOptions(props.optionList, props.name));\n      } else {\n        return /*#__PURE__*/React.createElement(AutoCompleteText, {\n          category: props.category,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }\n        });\n      }\n    } else {\n      return props.value;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, props.label)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, renderContent()), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, props.hidden && props.editing ? /*#__PURE__*/React.createElement(Switch, {\n    onChange: () => setIsOpen(!isOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 27\n    }\n  }) : null));\n};\n\nexport default Options;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/Options.js"],"names":["React","useState","AutoCompleteText","generateOptions","isEmpty","Switch","Options","props","isOpen","setIsOpen","renderContent","editing","hidden","category","name","handleChange","value","label","optionList"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,+CAA7B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMS,aAAa,GAAG,MAAM;AACxB,QAAGH,KAAK,CAACI,OAAN,IAAiBH,MAApB,EAA4B;AACxB,UAAG,CAACD,KAAK,CAACK,MAAP,IAAiB,CAACL,KAAK,CAACM,QAA3B,EAAqC;AACjC,4BACI;AACI,UAAA,IAAI,EAAEN,KAAK,CAACO,IADhB;AAEI,UAAA,QAAQ,EAAEP,KAAK,CAACQ,YAFpB;AAGI,UAAA,YAAY,EAAC,MAHjB;AAII,UAAA,KAAK,EAAER,KAAK,CAACS,KAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKI;AACI,UAAA,GAAG,EAAE,WAAWT,KAAK,CAACU,KAD1B;AAEI,UAAA,KAAK,EAAC,MAFV;AAGK,UAAA,QAAQ,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIK,YAAYV,KAAK,CAACU,KAJvB,CALJ,EAWKd,eAAe,CAACI,KAAK,CAACW,UAAP,EAAmBX,KAAK,CAACO,IAAzB,CAXpB,CADJ;AAcH,OAfD,MAeO;AACH,4BAAQ,oBAAC,gBAAD;AACA,UAAA,QAAQ,EAAEP,KAAK,CAACM,QADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAEH;AACJ,KApBD,MAoBO;AACH,aAAON,KAAK,CAACS,KAAb;AACH;AACJ,GAxBD;;AAyBA,sBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQT,KAAK,CAACU,KAAd,CADJ,CADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,aAAa,EADlB,CALJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAACK,MAAN,IAAgBL,KAAK,CAACI,OAAtB,gBACK,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAE,MAAMF,SAAS,CAAC,CAACD,MAAF,CAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,GAGK,IAJV,CATJ,CADR;AAkBH,CAhDD;;AAkDA,eAAeF,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport AutoCompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport { generateOptions } from \"../utils/commonFunctions\";\nimport isEmpty from \"is-empty\";\nimport { Switch } from \"antd\";\n\nconst Options = (props) => {\n    // const optionList = !isEmpty(props.optionList) ? props.optionList : null;\n    // const status = props.status[0].toUpperCase() + props.status.slice(1);\n    const [isOpen, setIsOpen] = useState(false);\n\n    const renderContent = () => {\n        if(props.editing || isOpen) {\n            if(!props.hidden || !props.category) {\n                return (\n                    <select\n                        name={props.name}\n                        onChange={props.handleChange}\n                        defaultValue=\"None\"\n                        value={props.value}>\n                        <option \n                            key={\"choose\" + props.label}\n                            value=\"None\" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </option>\n                        {generateOptions(props.optionList, props.name)}\n                    </select> ) \n            } else {\n                return (<AutoCompleteText \n                        category={props.category}/>)\n            }\n        } else {\n            return props.value;\n        }\n    }\n    return (\n            <tr>\n                <td>\n                    <label>{props.label}</label>\n                </td>\n\n                <td>\n                    {renderContent()}\n                </td>\n\n                <td>\n                    {props.hidden && props.editing\n                        ? <Switch   \n                            onChange={() => setIsOpen(!isOpen)}/>\n                        : null}\n                </td>\n            </tr>\n    )        \n}\n\nexport default Options;"]},"metadata":{},"sourceType":"module"}