{"ast":null,"code":"import { SET_USER_SETTINGS, SET_CURRENT_SEMESTER, SET_MATRICULATION_OPTIONS, SET_TARGET_GRAD_OPTIONS, CLEAN_UP_SETTINGS, SET_ACAD_OPTIONS, SET_EDIT_ALL, SET_FIRST_RENDER, SETTINGS_LOADING } from \"../actions/types\";\nconst initialState = {\n  currentAY: null,\n  currentSemester: null,\n  month: null,\n  bachelorOptions: [],\n  secondMajorOptions: [],\n  minorOptions: [],\n  residenceOptions: [],\n  matriculationOptions: [],\n  targetGradOptions: [],\n  userInfo: {},\n  isEditing: {},\n  isLoading: false,\n  firstRender: true\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_USER_SETTINGS:\n      return { ...state,\n        userInfo: action.payload\n      };\n\n    case SET_CURRENT_SEMESTER:\n      return { ...state,\n        currentAY: action.currentAY,\n        currentSemester: action.currentSemester,\n        month: action.month\n      };\n\n    case SET_MATRICULATION_OPTIONS:\n      const {\n        currentAY,\n        currentSemester\n      } = action;\n      const year = Number(currentAY.substr(5, 4));\n      let matriculationOptions = [];\n      let value;\n\n      if (currentSemester === \"Semester 1\") {\n        for (let i = 0; i <= 6; i++) {\n          const start = year - i;\n          const end = start + 1;\n\n          if (i === 0) {\n            value = `AY ${start}/${end} (Next Year)`;\n          } else {\n            value = `AY ${start}/${end} (Year ${i})`;\n          }\n\n          matriculationOptions[i] = value;\n        }\n      } else {\n        for (let i = 0; i <= 6; i++) {\n          const start = year - i;\n          const end = start + 1;\n\n          if (i === 0) {\n            value = `AY ${start}/${end} (Next Semester)`;\n          } else {\n            value = `AY ${start}/${end} (Year ${i})`;\n          }\n\n          matriculationOptions[i] = value;\n        }\n      }\n\n      return { ...state,\n        matriculationOptions: matriculationOptions\n      };\n\n    case SET_TARGET_GRAD_OPTIONS:\n      const {\n        AY,\n        Semester\n      } = action;\n      const Year = Number(AY.substr(0, 4));\n      let targetGradOptions = [];\n      let option;\n\n      for (let i = 0; i <= 6; i++) {\n        const start = Year + i;\n        const end = start + 1;\n\n        if (i === 0) {\n          option = `In AY ${AY} (This Year)`;\n        } else if (i === 1) {\n          option = `In AY ${start}/${end} (Next Year)`;\n        } else {\n          option = `In AY ${start}/${end} (In ${i} Years)`;\n        }\n\n        targetGradOptions[i] = option;\n      }\n\n      return { ...state,\n        targetGradOptions: targetGradOptions\n      };\n\n    case SET_ACAD_OPTIONS:\n      const {\n        bachelors,\n        secondMajors,\n        minors,\n        residences\n      } = action;\n      return { ...state,\n        bachelorOptions: bachelors,\n        secondMajorOptions: secondMajors,\n        minorOptions: minors,\n        residenceOptions: residences\n      };\n\n    case SET_EDIT_ALL:\n      const {\n        status,\n        current,\n        category\n      } = action;\n      const updated = { ...current\n      };\n      updated[category] = status;\n      return { ...state,\n        isEditing: updated\n      };\n\n    case SETTINGS_LOADING:\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case SET_FIRST_RENDER:\n      return { ...state,\n        firstRender: action.status\n      };\n\n    case CLEAN_UP_SETTINGS:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/reducers/settingsReducer.js"],"names":["SET_USER_SETTINGS","SET_CURRENT_SEMESTER","SET_MATRICULATION_OPTIONS","SET_TARGET_GRAD_OPTIONS","CLEAN_UP_SETTINGS","SET_ACAD_OPTIONS","SET_EDIT_ALL","SET_FIRST_RENDER","SETTINGS_LOADING","initialState","currentAY","currentSemester","month","bachelorOptions","secondMajorOptions","minorOptions","residenceOptions","matriculationOptions","targetGradOptions","userInfo","isEditing","isLoading","firstRender","state","action","type","payload","year","Number","substr","value","i","start","end","AY","Semester","Year","option","bachelors","secondMajors","minors","residences","status","current","category","updated"],"mappings":"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","sourcesContent":["import {\n    SET_USER_SETTINGS,\n    SET_CURRENT_SEMESTER,\n    SET_MATRICULATION_OPTIONS,\n    SET_TARGET_GRAD_OPTIONS,\n    CLEAN_UP_SETTINGS,\n    SET_ACAD_OPTIONS,\n    SET_EDIT_ALL,\n    SET_FIRST_RENDER,\n    SETTINGS_LOADING\n} from \"../actions/types\";\n\nconst initialState = {\n    currentAY: null,\n    currentSemester: null,\n    month: null,\n    bachelorOptions: [],\n    secondMajorOptions: [],\n    minorOptions: [],\n    residenceOptions: [],\n    matriculationOptions:[],\n    targetGradOptions: [],\n    userInfo: {},\n    isEditing: {},\n    isLoading: false,\n    firstRender: true\n}\n\nexport default function (state = initialState, action ) {\n    switch(action.type) {\n        case SET_USER_SETTINGS:\n            return {\n                ...state,\n                userInfo: action.payload\n            }\n        \n        case SET_CURRENT_SEMESTER:\n            return {\n                ...state,\n                currentAY: action.currentAY,\n                currentSemester: action.currentSemester,\n                month: action.month\n            }\n        \n        case SET_MATRICULATION_OPTIONS:\n            const { currentAY, currentSemester } = action;\n            const year = Number(currentAY.substr(5,4));\n            let matriculationOptions = [];\n            let value;\n\n            if(currentSemester === \"Semester 1\") { \n                for(let i = 0; i <= 6; i++) {\n                    const start = year - i;\n                    const end = start + 1;\n\n                    if(i === 0) {\n                        value = `AY ${start}/${end} (Next Year)`\n                    } else {\n                        value = `AY ${start}/${end} (Year ${i})`\n                    }\n\n                    matriculationOptions[i] = value;\n                }\n            } else {\n                for(let i = 0; i <= 6; i++ ) {\n                    const start = year - i;\n                    const end = start + 1;\n\n                    if(i === 0) {\n                        value = `AY ${start}/${end} (Next Semester)`\n                    }\n                    else {\n                        value = `AY ${start}/${end} (Year ${i})`\n                    }\n                    \n                    matriculationOptions[i] = value;\n                }\n            }\n\n            return{\n                ...state,\n                matriculationOptions: matriculationOptions    \n            }\n        \n        case SET_TARGET_GRAD_OPTIONS:\n            const { AY, Semester } = action;\n            const Year = Number(AY.substr(0,4));\n            let targetGradOptions = []\n            let option;\n\n            for(let i = 0; i <= 6; i++) {\n                const start = Year + i;\n                const end = start + 1;\n\n                if(i === 0) {\n                    option = `In AY ${AY} (This Year)`\n                } else if (i === 1) {\n                    option = `In AY ${start}/${end} (Next Year)`\n                } else {\n                    option = `In AY ${start}/${end} (In ${i} Years)`\n                }\n                targetGradOptions[i] = option;\n            }\n\n            return{\n                ...state,\n                targetGradOptions: targetGradOptions    \n            }\n        \n        case SET_ACAD_OPTIONS:\n            const { bachelors, secondMajors, minors, residences } = action;\n            return {\n                ...state,\n                bachelorOptions: bachelors,\n                secondMajorOptions: secondMajors,\n                minorOptions: minors,\n                residenceOptions: residences\n            }\n        \n        case SET_EDIT_ALL:\n            const { status, current, category } = action;\n\n            const updated = {...current};\n            updated[category] = status;\n            return {\n                ...state,\n                isEditing: updated\n            }\n        \n        case SETTINGS_LOADING:\n            return {\n                ...state,\n                isLoading: action.payload\n            }\n        \n        case SET_FIRST_RENDER:\n            return {\n                ...state,\n                firstRender: action.status\n            }\n        case CLEAN_UP_SETTINGS:\n            return initialState;\n\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}