{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx\";\nimport { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\"; // import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\n\nimport React, { useState, useEffect } from \"react\";\nimport isEmpty from 'is-empty';\nconst {\n  Option\n} = Select; // const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 4 },\n//     },\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 20 },\n//     },\n//   };\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 20,\n      offset: 4\n    }\n  }\n};\n\nconst DynamicFieldSet = props => {\n  cosnt[form] = Form.useForm();\n  const [options, setOptions] = useState(props.optionList);\n\n  const handleRemove = index => {\n    const updated = [...props.value];\n\n    if (updated[index]) {\n      //add removed option to options in state\n      const temp = [...options];\n\n      for (let i = 0; i < props.optionList.length; i++) {\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n\n      setOptions(temp); //remove option from userInput state in acad settings page\n\n      updated.splice(index, 1);\n      props.setUserInput({\n        [props.name]: updated\n      });\n    }\n  };\n\n  const onChange = (e, object, index) => {\n    const updated = [...props.value];\n    const temp = [...options];\n\n    for (let i = 0; i < props.optionList.length; i++) {\n      if (updated[index]) {\n        //add removed option back into options\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n        }\n      }\n\n      if (props.optionList[i].fullName === object.value) {\n        temp.splice(i, 1, null);\n      }\n    }\n\n    setOptions(temp);\n    updated[index] = {\n      name: object.value,\n      tag: object.tag\n    };\n    props.setUserInput({\n      [object.name]: updated\n    });\n  };\n\n  const checkIsOptionsEmpty = () => {\n    for (let i = 0; i < options.length; i++) {\n      if (options[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const renderIntial = () => {\n    props.value.map((obj, index) => {\n      return /*#__PURE__*/React.createElement(Form.Item, {\n        noStyle: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        showSearch: true,\n        onChange: (e, object) => onChange(e, object, index),\n        defaultValue: \"None \",\n        value: obj ? obj.name : \"None \",\n        style: {\n          width: 250\n        },\n        optionFilterProp: \"children\",\n        filterOption: (input, option) => {\n          return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Option, {\n        key: \"choose\" + props.label,\n        value: \"None \",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name)));\n    });\n  };\n\n  useEffect(() => {\n    // const {form: {setFieldsValue}} = props;\n    let updatedField = [];\n\n    if (props.value) {\n      for (let i = 0; i < props.value.length; i++) {\n        updatedField[i] = {\n          fieldKey: i,\n          isListField: true,\n          key: i,\n          name: i\n        };\n      }\n\n      form.setFieldsValue(updatedField);\n    }\n  }, [form]); //   useEffect(() => {\n  //     if(props.value[0]) {\n  //       let updated = [...options];\n  //       props.value.map((object) => {\n  //         for(let i = 0; i < updated.length; i++) {\n  //           if(updated[i].fullName === object.name) {\n  //               updated.splice(i, 1);\n  //               break;\n  //           }\n  //         }\n  //       });\n  //       setOptions(updated);\n  //   }\n  // }, [props.value]);\n  //   const addSingleField = () => {\n  //     const { getFieldDecorator, getFieldValue, fields: obj, name } = props;\n  //     getFieldDecorator(`${name}List`, { initialValue: [0] });\n  //     const fieldCounter = getFieldValue(`${name}List`);\n  //     return fieldCounter.map((k) => (\n  //         <Form.Item\n  //             key={k}\n  //         >\n  //             {\n  //                 getFieldDecorator(`${name}[${k}]`,\n  //                     obj.validation || this.defaultValidation(name))(obj.field())\n  //             }\n  //             {\n  //                 fieldCounter.length > 1 ? (\n  //                     <MinusCircleOutlined\n  //                         className=\"dynamic-delete-button\"\n  //                         type=\"minus-circle-o\"\n  //                         onClick={this.remove(k)}\n  //                     />\n  //                 ) : null\n  //             }\n  //         </Form.Item>\n  //     ));\n  // };\n  // const addMultipleFields = () => {\n  //     const { getFieldDecorator, getFieldValue, fields, name } = props;\n  //     getFieldDecorator(`${name}List`, { initialValue: [0] });\n  //     const fieldCounter = getFieldValue(`${name}List`);\n  //     return fieldCounter.reduce((preResult, k) => {\n  //         const row = fields.map((obj, i) => (\n  //             <Form.Item\n  //                 key={`${k}${obj.name}`}\n  //             >\n  //                 {\n  //                     getFieldDecorator(`${name}[${k}][${obj.name}]`,\n  //                         obj.validation || this.defaultValidation(name))(obj.field())\n  //                 }\n  //                 {\n  //                     fieldCounter.length > 1 && (fields.length - 1) === i? (\n  //                         <MinusCircleOutlined\n  //                             className=\"dynamic-delete-button\"\n  //                             type=\"minus-circle-o\"\n  //                             onClick={this.remove(k)}\n  //                         />\n  //                     ) : null\n  //                 }\n  //             </Form.Item>\n  //         ));\n  //         return [\n  //             ...preResult,\n  //             ...row\n  //         ]\n  //     }, []);\n  // };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"dynamic_form_item\",\n    form: form // fields={fields}\n\n  }, formItemLayoutWithOutLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.List, {\n    name: props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, (fields, {\n    add,\n    remove\n  }) => {\n    console.log(fields);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }, fields.map((field, index) => /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n      required: false,\n      key: field.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      // {...field}\n      // validateTrigger={['onChange', 'onBlur']}\n      // rules={[\n      //   {\n      //     required: true,\n      //     whitespace: true,\n      //     message: `Please input ${props.name} or delete this field.`,\n      //   },\n      // ]}\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      onChange: (e, object) => onChange(e, object, index),\n      defaultValue: \"None \",\n      value: props.value[index] ? props.value[index].name : \"None \",\n      style: {\n        width: 250\n      },\n      optionFilterProp: \"children\",\n      filterOption: (input, option) => {\n        return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      key: \"choose\" + props.label,\n      value: \"None \",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name))), fields.length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n      className: \"dynamic-delete-button\",\n      onClick: () => {\n        remove(field.name);\n        handleRemove(index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 23\n      }\n    }) : null)), !checkIsOptionsEmpty() && /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: index => {\n        // if(props.value[index] || (index + 1)=== 0) {\n        add(); // }\n      },\n      rules: [{\n        required: true,\n        whitespace: true,\n        message: `Please input ${props.name} or delete this field.`\n      }],\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 24\n      }\n    }), \" Add \", props.name === \"secondMajors\" ? \"Major\" : props.name)));\n  }));\n};\n\nexport default DynamicFieldSet;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx"],"names":["Form","Button","Select","MinusCircleOutlined","PlusOutlined","generateOptions","React","useState","useEffect","isEmpty","Option","formItemLayoutWithOutLabel","wrapperCol","xs","span","offset","sm","DynamicFieldSet","props","cosnt","form","useForm","options","setOptions","optionList","handleRemove","index","updated","value","temp","i","length","fullName","name","splice","setUserInput","onChange","e","object","tag","checkIsOptionsEmpty","renderIntial","map","obj","width","input","option","children","toLowerCase","indexOf","label","updatedField","fieldKey","isListField","key","setFieldsValue","fields","add","remove","console","log","field","required","whitespace","message"],"mappings":"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","sourcesContent":["import { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\";\n// import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport React, { useState, useEffect} from \"react\";\nimport isEmpty from 'is-empty';\n\nconst { Option } = Select;\n\n// const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 4 },\n//     },\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 20 },\n//     },\n//   };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 0 },\n      sm: { span: 20, offset: 4 },\n    },\n  };\n  \n  \n\n  const DynamicFieldSet = (props) => {\n    cosnt [form] = Form.useForm();\n    const [options, setOptions] = useState(props.optionList);\n\n    const handleRemove = (index) => {\n      const updated = [...props.value];\n      if(updated[index]) {\n         //add removed option to options in state\n      const temp = [...options];\n      for(let i = 0; i < props.optionList.length; i++) {\n        if(props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n      setOptions(temp);\n\n      //remove option from userInput state in acad settings page\n      updated.splice(index, 1);\n      props.setUserInput({[props.name]: updated});\n      }\n    }\n\n    const onChange = (e, object, index) => {\n      const updated = [...props.value];\n     \n      const temp = [...options];\n        for(let i = 0; i < props.optionList.length; i++) {\n          if(updated[index]) {\n             //add removed option back into options\n            if(props.optionList[i].fullName === updated[index].name) {\n              temp.splice(i, 1, props.optionList[i]);\n            }\n          }\n          \n          if(props.optionList[i].fullName === object.value) {\n            temp.splice(i, 1, null);\n          } \n        }\n       setOptions(temp);\n\n      updated[index] = {\n                        name: object.value,\n                        tag: object.tag\n                      };\n      props.setUserInput({[object.name]: updated});\n  }\n\n  const checkIsOptionsEmpty = () => {\n    for(let i = 0; i < options.length; i++ ) {\n      if(options[i]) {\n        return false;\n      } \n    }\n    return true;\n  }\n\n  const renderIntial = () => {\n    props.value.map((obj, index) => {\n      return (\n        <Form.Item noStyle>\n          <Select\n            showSearch\n            onChange={(e, object) => onChange(e, object, index)}\n            defaultValue=\"None \"\n            value={obj ? obj.name : \"None \"}\n            style={{ width: 250 }}\n            optionFilterProp=\"children\"\n            filterOption={(input, option) => {\n                return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }}>\n            <Option \n                key={\"choose\" + props.label}\n                value=\"None \" \n                  disabled>\n                {\"Choose \" + props.label}\n            </Option>\n            {generateOptions((options ? options : props.optionList), props.name)}\n          </Select>\n        </Form.Item>\n      )\n    })\n  }\n\n    useEffect(() => {\n      // const {form: {setFieldsValue}} = props;\n      let updatedField = [];\n      if(props.value) {\n        for (let i = 0; i < props.value.length; i++) {\n          updatedField[i] = {fieldKey: i,\n                              isListField: true,\n                              key: i,\n                              name: i}\n        }\n        form.setFieldsValue(updatedField);\n      }\n    }, [form])\n  \n\n  //   useEffect(() => {\n  //     if(props.value[0]) {\n  //       let updated = [...options];\n        \n  //       props.value.map((object) => {\n  //         for(let i = 0; i < updated.length; i++) {\n  //           if(updated[i].fullName === object.name) {\n  //               updated.splice(i, 1);\n  //               break;\n  //           }\n  //         }\n  //       });\n  //       setOptions(updated);\n  //   }\n  // }, [props.value]);\n\n//   const addSingleField = () => {\n//     const { getFieldDecorator, getFieldValue, fields: obj, name } = props;\n//     getFieldDecorator(`${name}List`, { initialValue: [0] });\n//     const fieldCounter = getFieldValue(`${name}List`);\n//     return fieldCounter.map((k) => (\n//         <Form.Item\n//             key={k}\n//         >\n//             {\n//                 getFieldDecorator(`${name}[${k}]`,\n//                     obj.validation || this.defaultValidation(name))(obj.field())\n//             }\n//             {\n//                 fieldCounter.length > 1 ? (\n//                     <MinusCircleOutlined\n//                         className=\"dynamic-delete-button\"\n//                         type=\"minus-circle-o\"\n//                         onClick={this.remove(k)}\n//                     />\n//                 ) : null\n//             }\n//         </Form.Item>\n//     ));\n// };\n\n// const addMultipleFields = () => {\n//     const { getFieldDecorator, getFieldValue, fields, name } = props;\n//     getFieldDecorator(`${name}List`, { initialValue: [0] });\n//     const fieldCounter = getFieldValue(`${name}List`);\n\n//     return fieldCounter.reduce((preResult, k) => {\n//         const row = fields.map((obj, i) => (\n//             <Form.Item\n//                 key={`${k}${obj.name}`}\n//             >\n//                 {\n//                     getFieldDecorator(`${name}[${k}][${obj.name}]`,\n//                         obj.validation || this.defaultValidation(name))(obj.field())\n//                 }\n//                 {\n//                     fieldCounter.length > 1 && (fields.length - 1) === i? (\n//                         <MinusCircleOutlined\n//                             className=\"dynamic-delete-button\"\n//                             type=\"minus-circle-o\"\n//                             onClick={this.remove(k)}\n//                         />\n//                     ) : null\n//                 }\n//             </Form.Item>\n//         ));\n\n//         return [\n//             ...preResult,\n//             ...row\n//         ]\n//     }, []);\n\n// };\n    return (\n      <Form \n        name=\"dynamic_form_item\" \n        form={form}\n        // fields={fields}\n        {...formItemLayoutWithOutLabel}>\n          \n        <Form.List \n          name={props.name}>\n          {(fields, { add, remove }) => {\n            console.log(fields)\n            return (\n              <div>\n                {/* {Array.isArray(fields) ? this.addMultipleFields() : this.addSingleField()} */}\n                {fields.map((field, index) => (\n                  \n                  <Form.Item\n                    {...(formItemLayoutWithOutLabel)}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      // {...field}\n                      // validateTrigger={['onChange', 'onBlur']}\n                      // rules={[\n                      //   {\n                      //     required: true,\n                      //     whitespace: true,\n                      //     message: `Please input ${props.name} or delete this field.`,\n                      //   },\n                      // ]}\n                      noStyle\n                    >\n                      <Select\n                        showSearch\n                        onChange={(e, object) => onChange(e, object, index)}\n                        defaultValue=\"None \"\n                        value={props.value[index] ? props.value[index].name : \"None \"}\n                        style={{ width: 250 }}\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => {\n                            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }}>\n                        <Option \n                            key={\"choose\" + props.label}\n                            value=\"None \" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </Option>\n                        {generateOptions((options ? options : props.optionList), props.name)}\n                      </Select>\n                    </Form.Item>\n\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n\n                        onClick={() => {\n                          remove(field.name);\n                          handleRemove(index);\n                        }}\n                      />\n                    ) : null}\n                  </Form.Item>\n                ))}\n                \n                \n                {!checkIsOptionsEmpty() && <Form.Item>\n                  <Button\n                      type=\"dashed\"\n                      onClick={(index) => {\n                          // if(props.value[index] || (index + 1)=== 0) {\n                            add();\n                          // }\n                        }}\n                          rules={[\n                              {\n                                required: true,\n                                whitespace: true,\n                                message: `Please input ${props.name} or delete this field.`,\n                              }]\n                      }\n                      style={{ width: '100%' }}>\n                       <PlusOutlined /> Add {props.name === \"secondMajors\" ? \"Major\" : props.name}\n                    </Button>\n                  </Form.Item>}\n              </div>\n            );\n          }}\n        </Form.List>\n  \n        {/* <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item> */}\n      </Form>\n    );\n  };\n  \n\nexport default DynamicFieldSet;"]},"metadata":{},"sourceType":"module"}