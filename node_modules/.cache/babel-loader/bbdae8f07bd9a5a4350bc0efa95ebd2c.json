{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd'; //import generateCards from './generateCards'\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n  const [displayCard, setDisplayCard] = useState();\n\n  const generateCards = () => moduleCodeTitle.map((object, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: object.id,\n    className: \"card\",\n    title: `${object.moduleCode}: ${object.title}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }));\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => item.id,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n  }\n\n  function updateModuleCards(object) {\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(object)) {\n      newModuleCodeTitle.push(object);\n      setModuleCodeTitle(newModuleCodeTitle);\n      setDisplayCard(generateCards);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    style: {\n      width: '20rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '165px',\n      height: !displayCard && '59px',\n      outline: displayCard ? 'none' : '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, displayCard ? displayCard : 'Drop module here'), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    updateModuleCards: updateModuleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Add Module\")));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","moduleCodeTitle","setModuleCodeTitle","displayCard","setDisplayCard","generateCards","map","object","i","id","moduleCode","title","isOver","drop","accept","CARD","item","monitor","collect","handleButtonClick","updateModuleCards","newModuleCodeTitle","includes","push","semester","width","height","outline"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n//import generateCards from './generateCards'\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n    const [displayCard, setDisplayCard] = useState();\n    const generateCards = () => moduleCodeTitle.map((object, i) => \n            (<ModuleCard\n                id={object.id}\n                className=\"card\"\n                title={`${object.moduleCode}: ${object.title}`}/>));\n    \n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => (item.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n     }\n\n    function updateModuleCards(object) {\n       \n        let newModuleCodeTitle = moduleCodeTitle;\n        if (!newModuleCodeTitle.includes(object)) {\n            newModuleCodeTitle.push(object);\n            setModuleCodeTitle(newModuleCodeTitle);\n            setDisplayCard(generateCards);\n        }\n\n    }\n\n        return (\n            <div>\n                <h3>{props.semester}</h3>\n            <div   \n                ref={drop}\n                id={props.id}\n                style={{width: '20rem'}}\n            >\n\n            <div style={{width: '165px', height: !displayCard && '59px', outline: displayCard ? 'none' : '1px dotted'}}>{displayCard ? displayCard : 'Drop module here'}</div>\n            {isTextBoxOpen && <AutoCompleteText updateModuleCards={updateModuleCards}/>}\n                <Button onClick={handleButtonClick}>Add Module</Button>\n                \n                </div>\n            </div>\n        )\n   \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}