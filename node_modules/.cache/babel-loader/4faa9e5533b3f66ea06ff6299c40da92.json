{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/AutocompleteText.jsx\";\nimport React from 'react';\nimport \"./AutocompleteText.css\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestions: [],\n      text: ''\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderSuggestions = this.renderSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  } //Set suggestions that match the user's input\n\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    const category = this.props.category;\n    let suggestions = [];\n    let dataPool = []; // let i = 0;\n    // let toCompare;\n\n    if (category === \"module\") {\n      dataPool = this.props.module; // toCompare = dataPool[i].moduleCode;\n    } else if (category === \"major\") {\n      this.props.facultyOptions.map(obj => {\n        //TEMPORARY UNTIL DEGREES ARE OUT\n        if (obj.undergraduate) {\n          obj.undergraduate.secondMajors.map(object => {\n            dataPool.push(object);\n          });\n        }\n      }); // toCompare = dataPool[i].name;\n    } else if (category === \"minor\") {\n      this.props.facultyOptions.map(obj => {\n        //TEMPORARY UNTIL DEGREES ARE OUT\n        if (obj.undergraduate) {\n          obj.undergraduate.minors.map(object => {\n            dataPool.push(object);\n          });\n        }\n      }); // toCompare = dataPool[i].name;\n    }\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n      let toCompare;\n\n      for (let i = 0; i < dataPool.length; i++) {\n        if (category === \"module\") {\n          toCompare = dataPool[i].moduleCode;\n        } else if (category === \"major\") {\n          toCompare = dataPool[i].name;\n        } else if (category === \"minor\") {\n          toCompare = dataPool[i].name;\n        }\n\n        if (regex.test(toCompare)) {\n          // const toCompare = dataPool[i].moduleCode;\n          suggestions.push(dataPool[i]);\n        }\n      }\n    }\n\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  } //Add the clicked suggestion to modplan\n\n\n  handleListClick(object) {\n    const module = { ...object\n    };\n    module.location = this.props.location;\n    module.AY = this.props.AY;\n    this.props.setSelectedModules(module, this.props.modplan.selectedModules);\n    this.setState(() => ({\n      suggestions: []\n    }));\n  } //Display the suggestions \n\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, suggestions.map(object => /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.handleListClick(object),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 46\n      }\n    }, `${object.moduleCode}: ${object.title}`)));\n  }\n\n  suggestionsSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"autocomplete-input\",\n      value: text,\n      onChange: this.handleTextChange,\n      type: \"text\",\n      placeholder: \"Enter module code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nAutoCompleteText.propTypes = {\n  setSelectedModules: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan,\n  facultyOptions: state.settings.facultyOptions\n});\n\nexport default connect(mapStateToProps, {\n  setSelectedModules\n})(AutoCompleteText);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/AutocompleteText.jsx"],"names":["React","PropTypes","connect","setSelectedModules","AutoCompleteText","Component","constructor","props","state","suggestions","text","handleTextChange","bind","renderSuggestions","suggestionsSelected","handleListClick","e","value","target","category","dataPool","module","facultyOptions","map","obj","undergraduate","secondMajors","object","push","minors","length","regex","RegExp","toCompare","i","moduleCode","name","test","setState","location","AY","modplan","selectedModules","title","render","propTypes","func","isRequired","mapStateToProps","settings"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"./AutocompleteText.css\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = { suggestions: [],\n                       text: '',\n\n                     };\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.renderSuggestions = this.renderSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.handleListClick = this.handleListClick.bind(this);\n    }\n\n    //Set suggestions that match the user's input\n    handleTextChange (e) {\n        const value = e.target.value;\n        const category = this.props.category;\n        let suggestions = [];\n        let dataPool = [];\n        // let i = 0;\n        // let toCompare;\n\n        if(category === \"module\") {\n            dataPool = this.props.module;\n            // toCompare = dataPool[i].moduleCode;\n        } else if (category === \"major\") {\n            this.props.facultyOptions.map((obj) => {\n                //TEMPORARY UNTIL DEGREES ARE OUT\n                if(obj.undergraduate) {\n                    obj.undergraduate.secondMajors.map((object) => {\n                        dataPool.push(object);\n                    });\n                } \n            });\n            // toCompare = dataPool[i].name;\n        } else if (category === \"minor\") {\n            this.props.facultyOptions.map((obj) => {\n                //TEMPORARY UNTIL DEGREES ARE OUT\n                if(obj.undergraduate) {\n                    obj.undergraduate.minors.map((object) => {\n                        dataPool.push(object);\n                    });\n                } \n            });\n            // toCompare = dataPool[i].name;\n        }\n\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            let toCompare;\n            for(let i = 0; i < dataPool.length; i++) {\n                if(category === \"module\") {\n                    toCompare = dataPool[i].moduleCode;\n                } else if(category === \"major\") {\n                    toCompare = dataPool[i].name;\n                } else if (category === \"minor\") {\n                    toCompare = dataPool[i].name;\n                }\n                \n                if(regex.test(toCompare)) {\n                    // const toCompare = dataPool[i].moduleCode;\n                    suggestions.push(dataPool[i]);\n                }\n                \n            }\n\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    //Add the clicked suggestion to modplan\n    handleListClick(object) {\n        const module = {...object};\n        module.location = this.props.location;\n        module.AY = this.props.AY\n        this.props.setSelectedModules(module, this.props.modplan.selectedModules)\n        this.setState(() => ({suggestions: []})) \n    }\n\n    //Display the suggestions \n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        return (\n            <ul>\n                {suggestions.map((object) => <li onClick={() => this.handleListClick(object)}>{`${object.moduleCode}: ${object.title}`}</li>)}\n            </ul>\n        );\n\n    }\n\n    suggestionsSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    render () {\n        const { text } = this.state;\n        return (\n\n                <div className=\"AutoCompleteText\">\n                    <input \n                        className=\"autocomplete-input\"\n                        value={text}\n                        onChange={this.handleTextChange}\n                        type=\"text\"\n                        placeholder=\"Enter module code\" />\n                    {this.renderSuggestions()}\n                \n                </div>\n\n        )\n    }\n}\n\nAutoCompleteText.propTypes = {\n    setSelectedModules: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan,\n    facultyOptions: state.settings.facultyOptions\n});\n\nexport default connect(mapStateToProps, { setSelectedModules })(AutoCompleteText);"]},"metadata":{},"sourceType":"module"}