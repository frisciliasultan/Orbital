{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx\";\nimport { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\"; // import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\n\nimport React, { useState, useEffect } from \"react\";\nimport isEmpty from 'is-empty';\nconst {\n  Option\n} = Select; // const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 4 },\n//     },\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 20 },\n//     },\n//   };\n// const formItemLayoutWithOutLabel = {\n//   wrapperCol: {\n//     xs: { span: 24, offset: 0 },\n//     sm: { span: 20, offset: 4 },\n//   },\n// };\n\nconst DynamicFieldSet = props => {\n  const [options, setOptions] = useState(props.optionList);\n  const [keyList, setKeyList] = useState([0]);\n\n  const renderIntial = () => {\n    return keyList.map(key => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        showSearch: true,\n        onChange: (e, object) => onChange(e, object, index),\n        defaultValue: \"None \",\n        value: obj ? obj.name : \"None \",\n        style: {\n          width: 250\n        },\n        optionFilterProp: \"children\",\n        filterOption: (input, option) => {\n          return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Option, {\n        key: \"choose\" + props.label,\n        value: \"None \",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name)), fields.length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n        className: \"dynamic-delete-button\",\n        onClick: () => {\n          remove(field.name);\n          handleRemove(index + props.value.length);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }) : null);\n    });\n  };\n\n  const handleRemove = index => {\n    const updated = [...props.value];\n\n    if (updated[index]) {\n      //add removed option to options in state\n      const temp = [...options];\n\n      for (let i = 0; i < props.optionList.length; i++) {\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n\n      setOptions(temp); //remove option from userInput state in acad settings page\n\n      updated.splice(index, 1);\n      props.setUserInput({\n        [props.name]: updated\n      });\n    }\n  };\n\n  const onChange = (e, object, index) => {\n    const updated = [...props.value];\n    const temp = [...options];\n\n    for (let i = 0; i < props.optionList.length; i++) {\n      if (updated[index]) {\n        //add removed option back into options\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n        }\n      }\n\n      if (props.optionList[i].fullName === object.value) {\n        temp.splice(i, 1, null);\n      }\n    }\n\n    setOptions(temp);\n    updated[index] = {\n      name: object.value,\n      tag: object.tag\n    };\n    props.setUserInput({\n      [object.name]: updated\n    });\n  };\n\n  const checkIsOptionsEmpty = () => {\n    for (let i = 0; i < options.length; i++) {\n      if (options[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"dynamic_form_item\" // form={form}\n    // fields={fields}\n\n  }, formItemLayoutWithOutLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.List, {\n    name: props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, (fields, {\n    add,\n    remove\n  }) => {\n    console.log(fields);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, renderIntial(), fields.map((field, index) => /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n      required: false,\n      key: field.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      // {...field}\n      // validateTrigger={['onChange', 'onBlur']}\n      // rules={[\n      //   {\n      //     required: true,\n      //     whitespace: true,\n      //     message: `Please input ${props.name} or delete this field.`,\n      //   },\n      // ]}\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      onChange: (e, object) => onChange(e, object, index + props.value.length),\n      defaultValue: \"None \",\n      value: props.value[index + props.value.length] ? props.value[index + props.value.length].name : \"None \",\n      style: {\n        width: 250\n      },\n      optionFilterProp: \"children\",\n      filterOption: (input, option) => {\n        return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      key: \"choose\" + props.label,\n      value: \"None \",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name))), fields.length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n      className: \"dynamic-delete-button\",\n      onClick: () => {\n        remove(field.name);\n        handleRemove(index + props.value.length);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 23\n      }\n    }) : null)), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: () => // if(props.value[index] || (index + 1)=== 0) {\n      add() // }\n      ,\n      rules: [{\n        required: true,\n        whitespace: true,\n        message: `Please input ${props.name} or delete this field.`\n      }],\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 24\n      }\n    }), \" Add \", props.name === \"secondMajors\" ? \"Major\" : props.name)));\n  }));\n};\n\nexport default DynamicFieldSet;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx"],"names":["Form","Button","Select","MinusCircleOutlined","PlusOutlined","generateOptions","React","useState","useEffect","isEmpty","Option","DynamicFieldSet","props","options","setOptions","optionList","keyList","setKeyList","renderIntial","map","key","e","object","onChange","index","obj","name","width","input","option","children","toLowerCase","indexOf","label","fields","length","remove","field","handleRemove","value","updated","temp","i","fullName","splice","setUserInput","tag","checkIsOptionsEmpty","formItemLayoutWithOutLabel","add","console","log","required","whitespace","message"],"mappings":"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","sourcesContent":["import { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\";\n// import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport React, { useState, useEffect} from \"react\";\nimport isEmpty from 'is-empty';\n\nconst { Option } = Select;\n\n// const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 4 },\n//     },\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 20 },\n//     },\n//   };\n  // const formItemLayoutWithOutLabel = {\n  //   wrapperCol: {\n  //     xs: { span: 24, offset: 0 },\n  //     sm: { span: 20, offset: 4 },\n  //   },\n  // };\n  \n  const DynamicFieldSet = (props) => {\n    const [options, setOptions] = useState(props.optionList);\n    const [keyList, setKeyList] = useState([0]);\n\n    const renderIntial = () => {\n        return keyList.map((key) => {\n          return (\n            <div key={key}>\n              <Select\n                showSearch\n                onChange={(e, object) => onChange(e, object, index)}\n                defaultValue=\"None \"\n                value={obj ? obj.name : \"None \"}\n                style={{ width: 250 }}\n                optionFilterProp=\"children\"\n                filterOption={(input, option) => {\n                    return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }}>\n                <Option \n                    key={\"choose\" + props.label}\n                    value=\"None \" \n                      disabled>\n                    {\"Choose \" + props.label}\n                </Option>\n                {generateOptions((options ? options : props.optionList), props.name)}\n              </Select>\n\n              {fields.length > 1 ? (\n                <MinusCircleOutlined\n                  className=\"dynamic-delete-button\"\n\n                  onClick={() => {\n                    remove(field.name);\n                    handleRemove(index + props.value.length);\n                  }}\n                />\n              ) : null}\n            </div>\n          )\n        })\n  }\n\n    const handleRemove = (index) => {\n      const updated = [...props.value];\n      if(updated[index]) {\n         //add removed option to options in state\n      const temp = [...options];\n      for(let i = 0; i < props.optionList.length; i++) {\n        if(props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n      setOptions(temp);\n\n      //remove option from userInput state in acad settings page\n      updated.splice(index, 1);\n      props.setUserInput({[props.name]: updated});\n      }\n    }\n\n    const onChange = (e, object, index) => {\n      const updated = [...props.value];\n     \n      const temp = [...options];\n        for(let i = 0; i < props.optionList.length; i++) {\n          if(updated[index]) {\n             //add removed option back into options\n            if(props.optionList[i].fullName === updated[index].name) {\n              temp.splice(i, 1, props.optionList[i]);\n            }\n          }\n          \n          if(props.optionList[i].fullName === object.value) {\n            temp.splice(i, 1, null);\n          } \n        }\n       setOptions(temp);\n\n      updated[index] = {\n                        name: object.value,\n                        tag: object.tag\n                      };\n      props.setUserInput({[object.name]: updated});\n  }\n\n  const checkIsOptionsEmpty = () => {\n    for(let i = 0; i < options.length; i++ ) {\n      if(options[i]) {\n        return false;\n      } \n    }\n    return true;\n  }\n\n  \n\n    return (\n      <Form \n        name=\"dynamic_form_item\" \n        // form={form}\n        // fields={fields}\n        {...formItemLayoutWithOutLabel}>\n          \n        <Form.List \n          name={props.name}>\n          {(fields, { add, remove }) => {\n            console.log(fields)\n            return (\n              <div>\n                {renderIntial()}\n                {fields.map((field, index) => (\n                  \n                  <Form.Item\n                    {...(formItemLayoutWithOutLabel)}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      // {...field}\n                      // validateTrigger={['onChange', 'onBlur']}\n                      // rules={[\n                      //   {\n                      //     required: true,\n                      //     whitespace: true,\n                      //     message: `Please input ${props.name} or delete this field.`,\n                      //   },\n                      // ]}\n                      noStyle\n                    >\n                      <Select\n                        showSearch\n                        onChange={(e, object) => onChange(e, object, (index + props.value.length))}\n                        defaultValue=\"None \"\n                        value={props.value[index + props.value.length] ? props.value[index + props.value.length].name : \"None \"}\n                        style={{ width: 250 }}\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => {\n                            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }}>\n                        <Option \n                            key={\"choose\" + props.label}\n                            value=\"None \" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </Option>\n                        {generateOptions((options ? options : props.optionList), props.name)}\n                      </Select>\n                    </Form.Item>\n\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n\n                        onClick={() => {\n                          remove(field.name);\n                          handleRemove(index + props.value.length);\n                        }}\n                      />\n                    ) : null}\n                  </Form.Item>\n                ))}\n                \n                \n                {/* {!checkIsOptionsEmpty() &&  */}\n                <Form.Item>\n                  <Button\n                      type=\"dashed\"\n                      onClick={() =>\n                          // if(props.value[index] || (index + 1)=== 0) {\n                            add()\n                          // }\n                        }\n                          rules={[\n                              {\n                                required: true,\n                                whitespace: true,\n                                message: `Please input ${props.name} or delete this field.`,\n                              }]\n                      }\n                      style={{ width: '100%' }}>\n                       <PlusOutlined /> Add {props.name === \"secondMajors\" ? \"Major\" : props.name}\n                    </Button>\n                  </Form.Item>\n                  {/* } */}\n              </div>\n            );\n          }}\n        </Form.List>\n  \n        {/* <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item> */}\n      </Form>\n    );\n  };\n  \n\nexport default DynamicFieldSet;"]},"metadata":{},"sourceType":"module"}