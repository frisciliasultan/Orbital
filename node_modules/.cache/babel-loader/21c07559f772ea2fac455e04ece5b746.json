{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx\";\nimport { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\"; // import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\n\nimport React, { useState, useEffect } from \"react\";\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 20\n    }\n  }\n};\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 20,\n      offset: 4\n    }\n  }\n};\n\nconst DynamicFieldSet = props => {\n  const handleRemove = index => {\n    const original = props.value ? [...props.value] : [];\n    original.splice(index, 1);\n    props.setUserInput({\n      [props.name]: original\n    });\n  };\n\n  const [fields, setFields] = useState();\n\n  const onChange = (e, object, index) => {\n    const updated = [...props.value];\n    updated[index] = {\n      name: object.value,\n      tag: object.tag\n    };\n    props.setUserInput({\n      [object.name]: updated\n    });\n  };\n\n  useEffect(() => {\n    let updatedField = [];\n\n    if (props.value) {\n      for (let i = 0; i < props.value.length; i++) {\n        updatedField[i] = {\n          fieldKey: i,\n          isListField: true,\n          key: i,\n          name: i\n        };\n      }\n\n      setFields(updatedField);\n    }\n  }, []);\n  console.log(props.value);\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"dynamic_form_item\"\n  }, formItemLayoutWithOutLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.List, {\n    // name={props.name}\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, (fields, {\n    add,\n    remove\n  }) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, fields.map((field, index) => /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n      required: false,\n      key: field.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      // {...field}\n      // validateTrigger={['onChange', 'onBlur']}\n      // rules={[\n      //   {\n      //     required: true,\n      //     whitespace: true,\n      //     message: `Please input ${props.name} or delete this field.`,\n      //   },\n      // ]}\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      onChange: (e, object) => onChange(e, object, index),\n      defaultValue: \"None \",\n      value: props.value[index] ? props.value[index].name : \"None \",\n      style: {\n        width: 250\n      },\n      optionFilterProp: \"children\",\n      filterOption: (input, option) => {\n        return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      key: \"choose\" + props.label,\n      value: \"None \",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, \"Choose \" + props.label), generateOptions(props.optionList, props.name))), fields.length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n      className: \"dynamic-delete-button\",\n      onClick: () => {\n        remove(field.name);\n        handleRemove(index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }\n    }) : null)), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: () => {\n        add();\n      },\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }), \" Add \", props.name === \"secondMajor\" ? \"Major\" : props.name)));\n  }));\n};\n\nexport default DynamicFieldSet;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx"],"names":["Form","Button","Select","MinusCircleOutlined","PlusOutlined","generateOptions","React","useState","useEffect","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","DynamicFieldSet","props","handleRemove","index","original","value","splice","setUserInput","name","fields","setFields","onChange","e","object","updated","tag","updatedField","i","length","fieldKey","isListField","key","console","log","add","remove","map","field","width","input","option","children","toLowerCase","indexOf","label","optionList"],"mappings":"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","sourcesContent":["import { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\";\n// import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport React, { useState, useEffect} from \"react\";\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 4 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 20 },\n    },\n  };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 0 },\n      sm: { span: 20, offset: 4 },\n    },\n  };\n  \n  \n\n  const DynamicFieldSet = (props) => {\n\n    const handleRemove = (index) => {\n      const original = props.value ? [...props.value] : [];\n      original.splice(index, 1);\n      props.setUserInput({[props.name]: original});\n    }\n\n    const [fields, setFields] = useState();\n\n    const onChange = (e, object, index) => {\n      const updated = [...props.value];\n      updated[index] = {\n                        name: object.value,\n                        tag: object.tag\n                      };\n      props.setUserInput({[object.name]: updated});\n  }\n\n    useEffect(() => {\n      let updatedField = [];\n      if(props.value) {\n        for (let i = 0; i < props.value.length; i++) {\n          updatedField[i] = {fieldKey: i,\n                              isListField: true,\n                              key: i,\n                              name: i      }\n        }\n        setFields(updatedField);\n      }\n    }, [])\n\n    console.log(props.value)\n    return (\n      <Form name=\"dynamic_form_item\" \n        {...formItemLayoutWithOutLabel}>\n          \n        <Form.List \n        // name={props.name}\n        name=\"name\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                \n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(formItemLayoutWithOutLabel)}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      // {...field}\n                      // validateTrigger={['onChange', 'onBlur']}\n                      // rules={[\n                      //   {\n                      //     required: true,\n                      //     whitespace: true,\n                      //     message: `Please input ${props.name} or delete this field.`,\n                      //   },\n                      // ]}\n                      noStyle\n                    >\n                      <Select\n                        showSearch\n                        onChange={(e, object) => onChange(e, object, index)}\n                        defaultValue=\"None \"\n                        value={props.value[index] ? props.value[index].name : \"None \"}\n                        style={{ width: 250 }}\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => {\n                            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }}>\n                        <Option \n                            key={\"choose\" + props.label}\n                            value=\"None \" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </Option>\n                        {generateOptions(props.optionList, props.name)}\n                      </Select>\n                    </Form.Item>\n\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n\n                        onClick={() => {\n                          remove(field.name);\n                          handleRemove(index);\n                        }}\n                      />\n                    ) : null}\n                  </Form.Item>\n                ))}\n                <Form.Item>\n                  <Button\n                    type=\"dashed\"\n                    onClick={() => {\n                      add();\n                    }}\n                    style={{ width: '100%' }}\n                  >\n                    <PlusOutlined /> Add {props.name === \"secondMajor\" ? \"Major\" : props.name}\n                  </Button>\n                </Form.Item>\n              </div>\n            );\n          }}\n        </Form.List>\n  \n        {/* <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item> */}\n      </Form>\n    );\n  };\n  \n\nexport default DynamicFieldSet;"]},"metadata":{},"sourceType":"module"}