{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, setTranscript } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\nimport { generateOptions, handleSaveClick } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\n\nconst CAPCalculatorPage = props => {\n  const gradeList = [{\n    grade: \"A+\",\n    gradePoint: 5\n  }, {\n    grade: \"A\",\n    gradePoint: 5\n  }, {\n    grade: \"A-\",\n    gradePoint: 4.5\n  }, {\n    grade: \"B+\",\n    gradePoint: 4\n  }, {\n    grade: \"B\",\n    gradePoint: 3.5\n  }, {\n    grade: \"B-\",\n    gradePoint: 3\n  }, {\n    grade: \"C+\",\n    gradePoint: 2.5\n  }, {\n    grade: \"C\",\n    gradePoint: 2\n  }, {\n    grade: \"D+\",\n    gradePoint: 1.5\n  }, {\n    grade: \"D\",\n    gradePoint: 1\n  }, {\n    grade: \"F\",\n    gradePoint: 0\n  }];\n  const [semester, setSemester] = useState(userAY);\n  const [isPast, setIsPast] = useState(); //to count what semester the user is in currently\n\n  const year = props.settings.currentAY.substr(5, 4);\n  const matYear = !isEmpty(props.settings.userInfo) ? props.settings.userInfo.matriculationYear.substr(0, 4) : 0;\n  const statusYear = year - matYear;\n  const userSemester = props.settings.currentSemester === \"Semester 1\" ? statusYear * 2 - 1 : statusYear * 2;\n  const userAY = userSemester % 2 === 0 ? `Year ${userSemester / 2} Semester 2` : `Year ${userSemester / 2 + 0.5} Semester 1`;\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo)) {\n      const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n      const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n      const diff = end - start;\n      props.setSemesterOptions(diff);\n    }\n\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.selectedModules)) {\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    }\n\n    if (!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n      props.setTranscript(null, props.settings.userInfo.transcript);\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    const convertSemToNumber = sem => {\n      if (sem.substr(7) === \"Semester 1\") {\n        return sem.substr(5, 1) * 2 - 1;\n      } else {\n        return sem.substr(5, 1) * 2;\n      }\n    };\n\n    const currSem = convertSemToNumber(semester); //check if the semester chosen is in the past or future\n\n    if (userSemester > currSem) {\n      setIsPast(true);\n    } else if (userSemester === currSem) {\n      if (props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12 || props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6) {\n        setIsPast(true);\n      }\n    } else {\n      setIsPast(false);\n    }\n  }, [semester]);\n\n  const checkDuplicate = (moduleAdded, transcript) => {\n    let indexOfDuplicate;\n    let unique = true;\n    let newModule;\n\n    for (let i = 0; i < transcript.length; i++) {\n      if (transcript[i].moduleCode === moduleAdded.moduleCode) {\n        indexOfDuplicate = i;\n        unique = false;\n      }\n    } //if moduleAdded exists in transcript, create a module \n\n\n    if (!unique) {\n      newModule = {\n        moduleCode: transcript[indexOfDuplicate].moduleCode,\n        title: transcript[indexOfDuplicate].title,\n        moduleCredit: transcript[indexOfDuplicate].moduleCredit,\n        grade: transcript[indexOfDuplicate].grade,\n        SU: transcript[indexOfDuplicate].SU\n      };\n    }\n\n    const result = {\n      unique: unique,\n      indexOfDuplicate: indexOfDuplicate,\n      newModule: newModule\n    };\n    console.log(result);\n    return result;\n  };\n\n  const handleGradeClick = (e, object) => {\n    let module;\n    let isUnique;\n    let index;\n    const transcript = isPast ? props.cap.transcript : props.cap.targetGrade; //default module\n\n    module = {\n      moduleCode: object.moduleCode,\n      title: object.title,\n      moduleCredit: object.moduleCredit,\n      grade: e.target.value\n    }; //to obtain module object from transcript for modification\n\n    if (!isEmpty(transcript)) {\n      const {\n        unique,\n        indexOfDuplicate,\n        newModule\n      } = checkDuplicate(object, transcript);\n\n      if (!unique) {\n        newModule.grade = e.target.value;\n        module = newModule;\n      }\n\n      isUnique = unique;\n      index = indexOfDuplicate;\n    }\n\n    const cat = isPast ? \"transcript\" : \"targetGrade\";\n    return props.setTranscript(module, transcript, isUnique, index, cat);\n  };\n\n  const handleCheckboxChange = (e, object) => {\n    let module;\n    let isUnique;\n    let index;\n    const transcript = props.cap.transcript; //default module\n\n    module = {\n      moduleCode: object.moduleCode,\n      title: object.title,\n      moduleCredit: object.moduleCredit,\n      SU: true\n    }; //to obtain module object from transcript for modification\n\n    if (!isEmpty(transcript)) {\n      const {\n        unique,\n        indexOfDuplicate,\n        newModule\n      } = checkDuplicate(object, transcript);\n\n      if (!unique) {\n        newModule.SU = newModule.SU ? false : true;\n        module = newModule;\n      }\n\n      isUnique = unique;\n      index = indexOfDuplicate;\n    }\n\n    return props.setTranscript(module, transcript, isUnique, index);\n  };\n\n  const generateTable = () => {\n    return props.modplan.selectedModules.filter(object => object.location === semester).map(object => {\n      const {\n        moduleCode,\n        title,\n        moduleCredit\n      } = object;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: moduleCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }, title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }, moduleCode), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }\n      }, moduleCredit), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        name: object,\n        onChange: e => handleGradeClick(e, object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        selected: true,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 37\n        }\n      }, \"Grade\"), generateOptions(gradeList, \"grade\"))), isPast && /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        onChange: e => handleCheckboxChange(e, object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 33\n        }\n      })));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, \"CAP Calculator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \"CAP at the beginning of the semester: \", props.settings.userInfo.cap, \" \"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, \"Semester: \"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"time\",\n    value: userAY,\n    onChange: e => setSemester(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, isEmpty(props.cap.semesterOptions) && /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 56\n    }\n  }, \"Year 1 Semester 1\"), generateOptions(props.cap.semesterOptions)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, \"Courses taken this semester\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, \"Module Title\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, \"Module Code\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }, \"Modular Credits\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, isPast ? \"Grade\" : \"Target Grade\"), isPast && /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 28\n    }\n  }, \"S/U\"), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, !isEmpty(props.settings.userInfo) && generateTable())), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, isPast ? \"Save Transcript\" : \"Save Target Grade\"));\n};\n\nCAPCalculatorPage.propType = {\n  setSemesterOptions: PropTypes.func.isRequired,\n  setTranscript: PropTypes.func.isRequired,\n  setSelectedModules: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  generateOptions: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired,\n  selectedModules: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  setSemesterOptions,\n  setTranscript,\n  setSelectedModules,\n  updateSettings\n})(CAPCalculatorPage);\n{\n  /* <label>CAP: </label>\n            <input type=\"text\" name=\"prevCAP\" />\n            <label>Credits Earned: </label>\n            <input type=\"text\" name=\"prevCreditsEarned\" />\n            <br/>\n            <br/> */\n}\n{\n  /* <label>Module</label>\n            <label>Grade</label>\n            <br/>\n            <input type=\"text\" placeholder=\"Credits\"/>\n            <input type=\"text\" placeholder=\"MCs\" /> */\n}","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx"],"names":["React","useState","useEffect","connect","PropTypes","setSemesterOptions","setTranscript","updateSettings","setSelectedModules","generateOptions","handleSaveClick","isEmpty","CAPCalculatorPage","props","gradeList","grade","gradePoint","semester","setSemester","userAY","isPast","setIsPast","year","settings","currentAY","substr","matYear","userInfo","matriculationYear","statusYear","userSemester","currentSemester","start","end","targetGradYear","diff","modPlan","selectedModules","transcript","cap","convertSemToNumber","sem","currSem","month","checkDuplicate","moduleAdded","indexOfDuplicate","unique","newModule","i","length","moduleCode","title","moduleCredit","SU","result","console","log","handleGradeClick","e","object","module","isUnique","index","targetGrade","target","value","cat","handleCheckboxChange","generateTable","modplan","filter","location","map","semesterOptions","propType","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, setTranscript } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\nimport { generateOptions, handleSaveClick } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\n\n\nconst CAPCalculatorPage = (props) => {\n    const gradeList = [\n                        {grade: \"A+\", gradePoint: 5},\n                        {grade: \"A\", gradePoint: 5},\n                        {grade: \"A-\", gradePoint: 4.5},\n                        {grade: \"B+\", gradePoint: 4},\n                        {grade: \"B\", gradePoint: 3.5},\n                        {grade: \"B-\", gradePoint: 3},\n                        {grade: \"C+\", gradePoint: 2.5},\n                        {grade: \"C\", gradePoint: 2},\n                        {grade: \"D+\", gradePoint: 1.5},\n                        {grade: \"D\", gradePoint: 1},\n                        {grade: \"F\", gradePoint: 0}\n    ]       \n\n    const [semester, setSemester] = useState(userAY);\n    const [isPast, setIsPast] = useState();\n\n    //to count what semester the user is in currently\n    const year = props.settings.currentAY.substr(5,4);\n    const matYear = !isEmpty(props.settings.userInfo) ? props.settings.userInfo.matriculationYear.substr(0,4) : 0;\n    const statusYear = year - matYear \n    const userSemester = props.settings.currentSemester === \"Semester 1\" \n                            ? statusYear * 2 - 1 \n                            : statusYear * 2;\n    const userAY = userSemester % 2 === 0 ? `Year ${userSemester / 2} Semester 2` : `Year ${userSemester / 2 + 0.5} Semester 1`;\n    \n    useEffect(() => {\n        if (!isEmpty(props.settings.userInfo)) {\n            const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n            const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n            const diff = end - start;\n            props.setSemesterOptions(diff);\n        }\n        if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.selectedModules)) {\n            props.setSelectedModules(null, props.settings.userInfo.modPlan)\n        } \n\n        if(!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n            props.setTranscript(null, props.settings.userInfo.transcript)\n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        const convertSemToNumber = (sem) => {\n            if(sem.substr(7) === \"Semester 1\") {\n                return sem.substr(5,1) * 2 - 1;\n            } else {\n                return sem.substr(5,1) * 2;\n            }\n        }\n\n        const currSem = convertSemToNumber(semester);\n\n        //check if the semester chosen is in the past or future\n        if (userSemester > currSem) {\n            setIsPast(true);\n        } else if (userSemester === currSem) {\n            if ((props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12) \n                || (props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6)) {\n                    setIsPast(true);\n            }\n        } else {\n            setIsPast(false);\n        }\n    }, [semester])\n\n    const checkDuplicate = (moduleAdded, transcript) => {\n        let indexOfDuplicate;\n        let unique = true;\n        let newModule;\n\n        for(let i = 0; i < transcript.length; i++) {\n            if(transcript[i].moduleCode === moduleAdded.moduleCode) {\n                 indexOfDuplicate = i;\n                 unique = false;\n            }\n        }\n\n        //if moduleAdded exists in transcript, create a module \n        if(!unique) {\n            newModule = {\n                moduleCode: transcript[indexOfDuplicate].moduleCode,\n                title: transcript[indexOfDuplicate].title,\n                moduleCredit: transcript[indexOfDuplicate].moduleCredit,\n                grade: transcript[indexOfDuplicate].grade,\n                SU: transcript[indexOfDuplicate].SU\n            }\n        }\n\n        const result = {\n            unique: unique,\n            indexOfDuplicate: indexOfDuplicate,\n            newModule: newModule\n        }\n        console.log(result);\n        return result;\n    }\n\n    const handleGradeClick = (e, object) => {\n        let module;\n        let isUnique;\n        let index;\n        const transcript = isPast ? props.cap.transcript : props.cap.targetGrade;\n\n        //default module\n        module = {\n                    moduleCode: object.moduleCode,\n                    title: object.title,\n                    moduleCredit: object.moduleCredit,\n                    grade: e.target.value,\n        };\n\n        //to obtain module object from transcript for modification\n        if(!isEmpty(transcript)) {\n            const { unique, indexOfDuplicate, newModule} = checkDuplicate(object, transcript);\n            if(!unique) {\n                newModule.grade = e.target.value;\n                module = newModule;\n            }\n            isUnique = unique;\n            index = indexOfDuplicate;\n        } \n\n        const cat = isPast ? \"transcript\": \"targetGrade\"\n        return props.setTranscript(module, transcript, isUnique, index, cat); \n    }\n\n    const handleCheckboxChange = (e, object) => {\n        let module;\n        let isUnique;\n        let index;\n        const transcript = props.cap.transcript;\n\n        //default module\n        module = {\n            moduleCode: object.moduleCode,\n            title: object.title,\n            moduleCredit: object.moduleCredit,\n            SU: true\n        };\n\n        //to obtain module object from transcript for modification\n        if(!isEmpty(transcript)) {\n            const { unique, indexOfDuplicate, newModule} = checkDuplicate(object, transcript);\n            if(!unique) {\n                newModule.SU = newModule.SU ? false : true;\n                module = newModule; \n            }\n            isUnique = unique;\n            index = indexOfDuplicate;\n        } \n\n        return props.setTranscript(module, transcript, isUnique, index);\n    }\n\n    const generateTable = () => {\n            return props.modplan.selectedModules\n                .filter((object) => object.location === semester)\n                .map((object) => {\n                    const { moduleCode, title, moduleCredit } = object;\n                    return (\n                        <tr key={moduleCode}>\n                            <td>{title}</td>\n                            <td>{moduleCode}</td>\n                            <td>{moduleCredit}</td>\n                            <td>\n                                <select \n                                    name={object}\n                                    onChange={(e) => handleGradeClick(e, object)}>\n                                    <option selected disabled>Grade</option>\n                                    {generateOptions(gradeList, \"grade\")}\n                                </select>\n                            </td>\n                            {isPast && \n                            <td>\n                                <input\n                                    type=\"checkbox\"\n                                    onChange={(e) => handleCheckboxChange(e, object)}/>\n                            </td>}\n                        </tr>\n                    )\n                })   \n    }\n\n    \n    return(\n        <div className=\"ml-4\">\n            <h1 className=\"display-3\">CAP Calculator</h1>\n            <h3>CAP at the beginning of the semester: {props.settings.userInfo.cap} </h3>\n            {/* <h5 onClick={() => {this.setState({open: true})}}>Or click here to manually input CAP</h5> */}\n            {/* {this.state.open && (<input type=\"text\"/>)} */}\n            <label>Semester: </label>\n            <select \n                id=\"time\"\n                value={userAY}\n                onChange={(e) => setSemester(e.target.value)}>\n\n                {/* buffer to display to wait for userInfo */}\n                {isEmpty(props.cap.semesterOptions) && <option>Year 1 Semester 1</option>}\n                {generateOptions(props.cap.semesterOptions)}\n            </select>\n            <br/>\n            \n            <h3>Courses taken this semester</h3>\n            <table className=\"table table-hover\">\n                <th>Module Title</th>\n                <th>Module Code</th>\n                <th>Modular Credits</th>\n                <th>{isPast ? \"Grade\" : \"Target Grade\"}</th>\n                {isPast && <th>S/U</th>}\n                <tbody>\n                    {!isEmpty(props.settings.userInfo) && generateTable()}\n                </tbody>\n            </table>\n            <button onClick={() => handleSaveClick(props)}>{isPast ? \"Save Transcript\" : \"Save Target Grade\" }</button>\n        \n        </div>\n    );\n}\n\n\nCAPCalculatorPage.propType = {\n    setSemesterOptions: PropTypes.func.isRequired,\n    setTranscript: PropTypes.func.isRequired,\n    setSelectedModules: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    generateOptions: PropTypes.func.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired,\n    selectedModules: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps,\n                        { setSemesterOptions, setTranscript, setSelectedModules, updateSettings })\n                        (CAPCalculatorPage);\n\n\n\n {/* <label>CAP: </label>\n            <input type=\"text\" name=\"prevCAP\" />\n            <label>Credits Earned: </label>\n            <input type=\"text\" name=\"prevCreditsEarned\" />\n            <br/>\n            <br/> */}\n\n\n\n {/* <label>Module</label>\n            <label>Grade</label>\n            <br/>\n            <input type=\"text\" placeholder=\"Credits\"/>\n            <input type=\"text\" placeholder=\"MCs\" /> */}"]},"metadata":{},"sourceType":"module"}