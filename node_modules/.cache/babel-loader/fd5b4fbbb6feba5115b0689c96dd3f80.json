{"ast":null,"code":"import { SET_MODULES_FOR_CAP, SET_SEMESTER_OPTIONS, CLEAN_UP_CAP, SET_TRANSCRIPT } from \"../actions/types\";\nconst initialState = {\n  transcript: [],\n  semesterOptions: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_TRANSCRIPT:\n      let unique = true;\n      let indexOfDuplicate;\n      const transcript = [...action.transcript];\n      const {\n        moduleAdded\n      } = action;\n\n      if (!moduleAdded) {\n        return { ...state,\n          transcript: transcript\n        };\n      }\n\n      for (let i = 0; i < transcript.length; i++) {\n        console.log('called');\n\n        if (transcript[i].moduleCode === moduleAdded.moduleCode) {\n          unique = false;\n          indexOfDuplicate = i;\n        }\n      }\n\n      if (!transcript.includes(moduleAdded)) {\n        if (unique) {\n          transcript.push(moduleAdded);\n        } else {\n          transcript.splice(indexOfDuplicate, 1);\n          transcript.push(moduleAdded);\n        }\n      }\n\n      return { ...state,\n        transcript: transcript\n      };\n\n    case SET_SEMESTER_OPTIONS:\n      let sem1;\n      let sem2;\n      let semesterOptions = [];\n\n      for (let i = 1; i < action.payload * 2; i += 2) {\n        const year = Math.ceil(i / 2);\n        sem1 = `Year ${year} Semester 1`;\n        sem2 = `Year ${year} Semester 2`;\n        semesterOptions[i - 1] = sem1;\n        semesterOptions[i] = sem2;\n      }\n\n      return { ...state,\n        semesterOptions: semesterOptions\n      };\n\n    case CLEAN_UP_CAP:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/reducers/capReducer.js"],"names":["SET_MODULES_FOR_CAP","SET_SEMESTER_OPTIONS","CLEAN_UP_CAP","SET_TRANSCRIPT","initialState","transcript","semesterOptions","state","action","type","unique","indexOfDuplicate","moduleAdded","i","length","console","log","moduleCode","includes","push","splice","sem1","sem2","payload","year","Math","ceil"],"mappings":"AAAA,SACIA,mBADJ,EAEIC,oBAFJ,EAGIC,YAHJ,EAIIC,cAJJ,QAKO,kBALP;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,eAAe,EAAE;AAFA,CAArB;AAKA,eAAe,UAASC,KAAK,GAAGH,YAAjB,EAA+BI,MAA/B,EAAuC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,cAAL;AACI,UAAIO,MAAM,GAAG,IAAb;AACA,UAAIC,gBAAJ;AACA,YAAMN,UAAU,GAAG,CAAC,GAAGG,MAAM,CAACH,UAAX,CAAnB;AACA,YAAM;AAAEO,QAAAA;AAAF,UAAkBJ,MAAxB;;AAEA,UAAG,CAACI,WAAJ,EAAiB;AACb,eAAO,EACH,GAAGL,KADA;AAEHF,UAAAA,UAAU,EAAEA;AAFT,SAAP;AAIH;;AAED,WAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,UAAU,CAACS,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvCE,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,YAAGX,UAAU,CAACQ,CAAD,CAAV,CAAcI,UAAd,KAA6BL,WAAW,CAACK,UAA5C,EAAwD;AACpDP,UAAAA,MAAM,GAAG,KAAT;AACAC,UAAAA,gBAAgB,GAAGE,CAAnB;AACH;AACJ;;AAED,UAAI,CAACR,UAAU,CAACa,QAAX,CAAoBN,WAApB,CAAL,EAAuC;AACnC,YAAGF,MAAH,EAAW;AACPL,UAAAA,UAAU,CAACc,IAAX,CAAgBP,WAAhB;AACH,SAFD,MAEO;AACHP,UAAAA,UAAU,CAACe,MAAX,CAAkBT,gBAAlB,EAAoC,CAApC;AACAN,UAAAA,UAAU,CAACc,IAAX,CAAgBP,WAAhB;AACH;AACJ;;AAED,aAAO,EACH,GAAGL,KADA;AAEHF,QAAAA,UAAU,EAAEA;AAFT,OAAP;;AAKJ,SAAKJ,oBAAL;AACI,UAAIoB,IAAJ;AACA,UAAIC,IAAJ;AACA,UAAIhB,eAAe,GAAG,EAAtB;;AAEA,WAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAIL,MAAM,CAACe,OAAP,GAAiB,CAArC,EAAyCV,CAAC,IAAI,CAA9C,EAAiD;AAC7C,cAAMW,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUb,CAAC,GAAG,CAAd,CAAb;AACAQ,QAAAA,IAAI,GAAI,QAAOG,IAAK,aAApB;AACAF,QAAAA,IAAI,GAAI,QAAOE,IAAK,aAApB;AACAlB,QAAAA,eAAe,CAACO,CAAC,GAAG,CAAL,CAAf,GAAyBQ,IAAzB;AACAf,QAAAA,eAAe,CAACO,CAAD,CAAf,GAAqBS,IAArB;AACH;;AAED,aAAO,EACH,GAAGf,KADA;AAEHD,QAAAA,eAAe,EAAEA;AAFd,OAAP;;AAKJ,SAAKJ,YAAL;AACI,aAAOE,YAAP;;AAEJ;AACI,aAAOG,KAAP;AA1DR;AA4DH","sourcesContent":["import {\n    SET_MODULES_FOR_CAP,\n    SET_SEMESTER_OPTIONS,\n    CLEAN_UP_CAP,\n    SET_TRANSCRIPT\n} from \"../actions/types\";\n\nconst initialState = {\n    transcript: [],\n    semesterOptions: []\n};\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case SET_TRANSCRIPT: \n            let unique = true;\n            let indexOfDuplicate;\n            const transcript = [...action.transcript];\n            const { moduleAdded } = action;\n            \n            if(!moduleAdded) {\n                return {\n                    ...state,\n                    transcript: transcript\n                }\n            }\n\n            for(let i = 0; i < transcript.length; i++) {\n                console.log('called')\n                if(transcript[i].moduleCode === moduleAdded.moduleCode) {\n                    unique = false;\n                    indexOfDuplicate = i;\n                }\n            }\n\n            if (!transcript.includes(moduleAdded)) {\n                if(unique) {\n                    transcript.push(moduleAdded);\n                } else {\n                    transcript.splice(indexOfDuplicate, 1);\n                    transcript.push(moduleAdded);           \n                }\n            }\n\n            return {\n                ...state, \n                transcript: transcript\n            }\n        \n        case SET_SEMESTER_OPTIONS: \n            let sem1;\n            let sem2;\n            let semesterOptions = [];\n\n            for(let i = 1; i < (action.payload * 2); i += 2) {\n                const year = Math.ceil(i / 2);\n                sem1 = `Year ${year} Semester 1`;\n                sem2 = `Year ${year} Semester 2`;\n                semesterOptions[i - 1] = sem1;\n                semesterOptions[i] = sem2;\n            }\n\n            return {\n                ...state,\n                semesterOptions: semesterOptions\n            }\n\n        case CLEAN_UP_CAP:\n            return initialState;\n\n        default: \n            return state;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}