{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx\";\nimport { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\"; // import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\n\nimport React, { useState, useEffect } from \"react\";\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 20\n    }\n  }\n};\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 20,\n      offset: 4\n    }\n  }\n};\n\nconst DynamicFieldSet = props => {\n  const [fields, setFields] = useState();\n  const [options, setOptions] = useState(props.optionList);\n\n  const handleRemove = index => {\n    const updated = [...props.value]; //add removed option to options in state\n\n    const temp = [...options];\n\n    for (let i = 0; i < props.optionList.length; i++) {\n      if (props.optionList[i].fullName === updated[index].name) {\n        temp.splice(i, 0, props.optionList[i]);\n        break;\n      }\n    }\n\n    setOptions(temp); //remove option from userInput state in acad settings page\n\n    updated.splice(index, 1);\n    props.setUserInput({\n      [props.name]: updated\n    });\n  };\n\n  const onChange = (e, object, index) => {\n    const updated = [...props.value]; //add removed option back into options\n\n    const temp = [...options];\n\n    for (let i = 0; i < props.optionList.length; i++) {\n      if (updated[0]) {\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 0, props.optionList[i]);\n        }\n      }\n\n      if (props.optionList[i].fullName === object.value) {\n        temp.splice(i, 1);\n      }\n    }\n\n    setOptions(temp);\n    updated[index] = {\n      name: object.value,\n      tag: object.tag\n    };\n    props.setUserInput({\n      [object.name]: updated\n    });\n  };\n\n  useEffect(() => {\n    let updatedField = [];\n\n    if (props.value) {\n      for (let i = 0; i < props.value.length; i++) {\n        updatedField[i] = {\n          fieldKey: i,\n          isListField: true,\n          key: i,\n          name: i\n        };\n      }\n\n      setFields(updatedField);\n    }\n  }, []);\n  useEffect(() => {\n    if (props.value[0]) {\n      let updated = [...options];\n      props.value.map(object => {\n        for (let i = 0; i < updated.length; i++) {\n          if (updated[i].fullName === object.name) {\n            updated.splice(i, 1);\n            break;\n          }\n        }\n      });\n      setOptions(updated);\n    }\n  }, [props.value]);\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"dynamic_form_item\"\n  }, formItemLayoutWithOutLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.List, {\n    // name={props.name}\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, (fields, {\n    add,\n    remove\n  }) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, fields.map((field, index) => /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n      required: false,\n      key: field.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      // {...field}\n      // validateTrigger={['onChange', 'onBlur']}\n      // rules={[\n      //   {\n      //     required: true,\n      //     whitespace: true,\n      //     message: `Please input ${props.name} or delete this field.`,\n      //   },\n      // ]}\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      onChange: (e, object) => onChange(e, object, index),\n      defaultValue: \"None \",\n      value: props.value[index] ? props.value[index].name : \"None \",\n      style: {\n        width: 250\n      },\n      optionFilterProp: \"children\",\n      filterOption: (input, option) => {\n        return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      key: \"choose\" + props.label,\n      value: \"None \",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name))), fields.length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n      className: \"dynamic-delete-button\",\n      onClick: () => {\n        remove(field.name);\n        handleRemove(index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 23\n      }\n    }) : null)), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 19\n      }\n    }, options[0] && /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: () => {\n        if (options[0]) {\n          add();\n        }\n      },\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 24\n      }\n    }), \" Add \", props.name === \"secondMajors\" ? \"Major\" : props.name)));\n  }));\n};\n\nexport default DynamicFieldSet;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx"],"names":["Form","Button","Select","MinusCircleOutlined","PlusOutlined","generateOptions","React","useState","useEffect","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","DynamicFieldSet","props","fields","setFields","options","setOptions","optionList","handleRemove","index","updated","value","temp","i","length","fullName","name","splice","setUserInput","onChange","e","object","tag","updatedField","fieldKey","isListField","key","map","add","remove","field","width","input","option","children","toLowerCase","indexOf","label"],"mappings":"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","sourcesContent":["import { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\";\n// import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport React, { useState, useEffect} from \"react\";\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 4 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 20 },\n    },\n  };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 0 },\n      sm: { span: 20, offset: 4 },\n    },\n  };\n  \n  \n\n  const DynamicFieldSet = (props) => {\n   \n    const [fields, setFields] = useState();\n    const [options, setOptions] = useState(props.optionList);\n\n    const handleRemove = (index) => {\n      const updated = [...props.value];\n\n       //add removed option to options in state\n      const temp = [...options];\n        for(let i = 0; i < props.optionList.length; i++) {\n          if(props.optionList[i].fullName === updated[index].name) {\n            temp.splice(i, 0, props.optionList[i]);\n            break;\n          }\n        }\n       setOptions(temp);\n\n      //remove option from userInput state in acad settings page\n      updated.splice(index, 1);\n      props.setUserInput({[props.name]: updated});\n    }\n\n    const onChange = (e, object, index) => {\n      const updated = [...props.value];\n      //add removed option back into options\n      const temp = [...options];\n        for(let i = 0; i < props.optionList.length; i++) {\n          if(updated[0]) {\n            if(props.optionList[i].fullName === updated[index].name) {\n              temp.splice(i, 0, props.optionList[i]);\n            }\n          }\n          \n          if(props.optionList[i].fullName === object.value) {\n            temp.splice(i, 1);\n          } \n        }\n       setOptions(temp);\n\n      updated[index] = {\n                        name: object.value,\n                        tag: object.tag\n                      };\n      props.setUserInput({[object.name]: updated});\n  }\n\n    useEffect(() => {\n      let updatedField = [];\n      if(props.value) {\n        for (let i = 0; i < props.value.length; i++) {\n          updatedField[i] = {fieldKey: i,\n                              isListField: true,\n                              key: i,\n                              name: i}\n        }\n        setFields(updatedField);\n      }\n    }, [])\n\n    useEffect(() => {\n      if(props.value[0]) {\n        let updated = [...options];\n        \n        props.value.map((object) => {\n          for(let i = 0; i < updated.length; i++) {\n            if(updated[i].fullName === object.name) {\n                updated.splice(i, 1);\n                break;\n            }\n          }\n        });\n        setOptions(updated);\n    }\n  }, [props.value]);\n\n    return (\n      <Form name=\"dynamic_form_item\" \n        {...formItemLayoutWithOutLabel}>\n          \n        <Form.List \n        // name={props.name}\n        name=\"name\">\n          {(fields, { add, remove }) => {\n            return (\n              <div>\n                \n                {fields.map((field, index) => (\n                  <Form.Item\n                    {...(formItemLayoutWithOutLabel)}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      // {...field}\n                      // validateTrigger={['onChange', 'onBlur']}\n                      // rules={[\n                      //   {\n                      //     required: true,\n                      //     whitespace: true,\n                      //     message: `Please input ${props.name} or delete this field.`,\n                      //   },\n                      // ]}\n                      noStyle\n                    >\n                      <Select\n                        showSearch\n                        onChange={(e, object) => onChange(e, object, index)}\n                        defaultValue=\"None \"\n                        value={props.value[index] ? props.value[index].name : \"None \"}\n                        style={{ width: 250 }}\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => {\n                            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }}>\n                        <Option \n                            key={\"choose\" + props.label}\n                            value=\"None \" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </Option>\n                        {generateOptions((options ? options : props.optionList), props.name)}\n                      </Select>\n                    </Form.Item>\n\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n\n                        onClick={() => {\n                          remove(field.name);\n                          handleRemove(index);\n                        }}\n                      />\n                    ) : null}\n                  </Form.Item>\n                ))}\n                \n                \n                  <Form.Item>\n                  {options[0] && <Button\n                      type=\"dashed\"\n                      onClick={() => {\n                        if(options[0]) {\n                          add();\n                        }\n                      }}\n                      style={{ width: '100%' }}>\n                       <PlusOutlined /> Add {props.name === \"secondMajors\" ? \"Major\" : props.name}\n                    </Button>}\n                  </Form.Item>\n              </div>\n            );\n          }}\n        </Form.List>\n  \n        {/* <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item> */}\n      </Form>\n    );\n  };\n  \n\nexport default DynamicFieldSet;"]},"metadata":{},"sourceType":"module"}