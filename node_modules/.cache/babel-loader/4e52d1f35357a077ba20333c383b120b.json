{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteSearch.jsx\";\nimport React from 'react';\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: ['Fris', 'Dani', 'Hey', 'Ho'],\n      suggestions: []\n    };\n  }\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    let suggestions = [];\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^$(value)`, 'i');\n      suggestions = this.items.sort().filter(v => regex.test(v));\n    }\n\n    this.setState(() => ({\n      suggestions\n    }));\n  }\n\n  renderSuggestions() {\n    const suggestions = this.state.suggestions;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 44\n      }\n    }, item)));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.handleTextChange,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nexport default AutoCompleteText;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteSearch.jsx"],"names":["React","AutoCompleteText","Component","constructor","props","state","items","suggestions","handleTextChange","e","value","target","length","regex","RegExp","sort","filter","v","test","setState","renderSuggestions","map","item","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAN,SAA+BD,KAAK,CAACE,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,CACN,MADM,EAEN,MAFM,EAGN,KAHM,EAIN,IAJM,CAAT;AAMEC,MAAAA,WAAW,EAAE;AANf,KAAb;AAQH;;AAEDC,EAAAA,gBAAgB,CAAEC,CAAF,EAAK;AACjB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,QAAIH,WAAW,GAAG,EAAlB;;AACA,QAAIG,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClB,YAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,WAAZ,EAAwB,GAAxB,CAAd;AACAP,MAAAA,WAAW,GAAG,KAAKD,KAAL,CAAWS,IAAX,GAAkBC,MAAlB,CAAyBC,CAAC,IAAIJ,KAAK,CAACK,IAAN,CAAWD,CAAX,CAA9B,CAAd;AACH;;AACD,SAAKE,QAAL,CAAc,OAAO;AAAEZ,MAAAA;AAAF,KAAP,CAAd;AACH;;AAEDa,EAAAA,iBAAiB,GAAI;AACjB,UAAMb,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA/B;;AACA,QAAIA,WAAW,CAACK,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,aAAO,IAAP;AACH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKL,WAAW,CAACc,GAAZ,CAAiBC,IAAD,iBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,IAAL,CAA1B,CADL,CADJ;AAMH;;AAEDC,EAAAA,MAAM,GAAI;AACN,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,QAAQ,EAAE,KAAKf,gBAAtB;AACO,MAAA,IAAI,EAAC,MADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGK,KAAKY,iBAAL,EAHL,CADJ;AAOH;;AA9C0C;;AAiD/C,eAAenB,gBAAf","sourcesContent":["import React from 'react';\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = { items: [\n                        'Fris',\n                        'Dani',\n                        'Hey',\n                        'Ho'\n                    ] ,\n                       suggestions: []\n                     };\n    }\n\n    handleTextChange (e) {\n        const value = e.target.value;\n        let suggestions = [];\n        if (value.length > 0) {\n            const regex = new RegExp(`^$(value)`, 'i');\n            suggestions = this.items.sort().filter(v => regex.test(v));\n        }\n        this.setState(() => ({ suggestions }));\n    }\n\n    renderSuggestions () {\n        const suggestions = this.state.suggestions;\n        if (suggestions.length === 0) {\n            return null;\n        }\n\n        return (\n            <ul>\n                {suggestions.map((item) => <li>{item}</li>)}\n            </ul>\n        );\n\n    }\n\n    render () {\n        return (\n            <div>\n                <input onChange={this.handleTextChange}\n                       type=\"text\" />\n                {this.renderSuggestions()}\n            </div>\n        )\n    }\n}\n\nexport default AutoCompleteText;"]},"metadata":{},"sourceType":"module"}