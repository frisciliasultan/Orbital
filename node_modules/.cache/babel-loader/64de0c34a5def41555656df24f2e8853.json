{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [isBoardFilled, setIsBoardFilled] = useState(false); // const [selectedModules, setSelectedModules] = useState();\n\n  const [display, setDisplay] = useState(); //const selectedModules = props.selectedModules;\n\n  useEffect(() => {\n    if (props.selectedModules) {\n      console.log('called');\n      console.log(selectedModules);\n      console.log(props.id);\n\n      const updateIsBoardFilled = () => {\n        if (props.selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n          setIsBoardFilled(true);\n          console.log('isboard updated to true');\n        } else {\n          setIsBoardFilled(false);\n          console.log('isboard updated to false');\n        }\n      };\n\n      updateIsBoardFilled();\n\n      if (isBoardFilled) {\n        console.log('generate cardscalled');\n\n        const generateCards = () => props.selectedModules.filter((object, i) => object.location === props.id).map((object, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n          id: object.moduleCode,\n          location: props.id,\n          className: \"card\",\n          title: `${object.moduleCode}: ${object.title}`,\n          MCs: object.moduleCredit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 30\n          }\n        }));\n\n        setDisplay(generateCards());\n        console.log(display);\n      }\n    } else {\n      setIsBoardFilled(false);\n    }\n  }, [props.selectedModules]); // const generateCards = () => selectedModules\n  //     .filter((object, i) => object.location === props.id)\n  //     .map((object, i) => \n  //             (<ModuleCard\n  //                 id={object.moduleCode}\n  //                 location={props.id}\n  //                 className=\"card\"\n  //                 title={`${object.moduleCode}: ${object.title}`}\n  //                 MCs={object.moduleCredit}/>));\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n  } // function updateIsBoardFilled() {\n  //     if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n  //         setIsBoardFilled(true);\n  //     } else {\n  //         setIsBoardFilled(false);\n  //     }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    style: {\n      width: '20rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '165px',\n      height: !isBoardFilled && '59px',\n      outline: isBoardFilled ? 'none' : '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, isBoardFilled ? display : 'Drop module here'), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    location: props.id,\n    updateSelectedModules: props.updateSelectedModules,\n    module: props.module,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \"Add Module\")));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","isBoardFilled","setIsBoardFilled","display","setDisplay","selectedModules","console","log","id","updateIsBoardFilled","filter","object","i","location","length","generateCards","map","moduleCode","title","moduleCredit","isOver","drop","accept","CARD","item","monitor","updateModuleLocation","collect","handleButtonClick","semester","width","height","outline","updateSelectedModules","module"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [isBoardFilled, setIsBoardFilled] = useState(false);\n    // const [selectedModules, setSelectedModules] = useState();\n    const [display, setDisplay] = useState();\n    //const selectedModules = props.selectedModules;\n    \n    useEffect(() => { \n    \n        if(props.selectedModules) {\n            console.log('called');\n            console.log(selectedModules);\n            console.log(props.id);\n\n            const updateIsBoardFilled = () => {\n                if(props.selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n                    setIsBoardFilled(true);\n                    console.log('isboard updated to true')\n                } else {\n                    setIsBoardFilled(false);\n                    console.log('isboard updated to false')\n                }\n            }\n            updateIsBoardFilled();\n\n            if(isBoardFilled) {\n                console.log('generate cardscalled');\n                const generateCards = () => props.selectedModules\n                    .filter((object, i) => object.location === props.id)\n                    .map((object, i) => \n                            (<ModuleCard\n                                id={object.moduleCode}\n                                location={props.id}\n                                className=\"card\"\n                                title={`${object.moduleCode}: ${object.title}`}\n                                MCs={object.moduleCredit}/>));\n                                \n                    setDisplay(generateCards());\n                    console.log(display);\n            }\n            \n        } else {\n            setIsBoardFilled(false);\n        }\n\n    }, [props.selectedModules])\n        \n    // const generateCards = () => selectedModules\n    //     .filter((object, i) => object.location === props.id)\n    //     .map((object, i) => \n    //             (<ModuleCard\n    //                 id={object.moduleCode}\n    //                 location={props.id}\n    //                 className=\"card\"\n    //                 title={`${object.moduleCode}: ${object.title}`}\n    //                 MCs={object.moduleCredit}/>));\n\n        \n\n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n     }\n\n    // function updateIsBoardFilled() {\n    //     if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n    //         setIsBoardFilled(true);\n    //     } else {\n    //         setIsBoardFilled(false);\n    //     }\n    // }\n \n\n        \n        return (\n            \n            <div>\n                <h3>{props.semester}</h3>\n            <div   \n                ref={drop}\n                id={props.id}\n                style={{width: '20rem'}}\n            >\n\n            <div style={{width: '165px', \n                        height: (!isBoardFilled) && '59px', \n                        outline: isBoardFilled ? 'none' : '1px dotted'}}>\n                            {/* {isBoardFilled ? generateCards() : 'Drop module here'} */}\n                            {isBoardFilled ? display : 'Drop module here'}\n            </div>\n            {isTextBoxOpen && <AutoCompleteText \n                                            location={props.id}\n                                            updateSelectedModules={props.updateSelectedModules}\n                                            module={props.module}/>}\n                <Button onClick={handleButtonClick}>Add Module</Button>\n                \n                </div>\n            </div>\n        )\n   \n}\n\nexport default Board;\n\n"]},"metadata":{},"sourceType":"module"}