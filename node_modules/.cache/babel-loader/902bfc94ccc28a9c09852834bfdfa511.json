{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/ModulePlannerPage.jsx\";\nimport React, { useEffect } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty';\n\nconst ModulePlannerPageTemp = props => {\n  const module = props.modplan.modules;\n  useEffect(() => {\n    return () => {\n      if (isEmpty(props.settings.userInfo)) {\n        props.initialSettings();\n      }\n\n      if (!isEmpty(props.settings.userInfo.modPlan)) {\n        props.setSelectedModules(props.settings.userInfo.modPlan);\n      }\n    };\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    return () => {\n      if (isEmpty(this.props.modplan.rules)) {\n        this.props.callBackendAPI('Rules');\n      }\n\n      if (isEmpty(this.props.modplan.modules)) {\n        this.props.callBackendAPI('NUSMods');\n      }\n    };\n  }, []);\n\n  const handleEvalButtonClick = () => {\n    const modules = props.modplan.selectedModules;\n\n    if (isEmpty(modules)) {\n      alert('Please add modules before evaluating');\n    } else {\n      this.props.setCallBackendNow(true);\n    }\n  };\n\n  const handleSaveClick = () => {\n    const userData = {\n      modPlan: props.modplan.selectedModules,\n      name: props.settings.userInfo.name,\n      residential: props.settings.userInfo.residential,\n      major: props.settings.userInfo.major,\n      matriculationYear: props.settings.userInfo.matriculationYear,\n      targetGradYear: props.settings.userInfo.targetGradYear,\n      transcript: {}\n    };\n    this.props.updateSettings(userData);\n  };\n\n  return /*#__PURE__*/React.createElement(DndProvider, {\n    backend: Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-module-planner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(YearDisplay, {\n    year: \"Year 1\",\n    AY: \"2018/2019\",\n    module: props.modplan.modules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YearDisplay, {\n    year: \"Year 2\",\n    AY: \"2019/2020\",\n    module: props.modplan.modules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YearDisplay, {\n    year: \"Year 3\",\n    AY: \"2020/2021\",\n    module: props.modplan.modules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YearDisplay, {\n    year: \"Year 4\",\n    AY: \"2022/2023\",\n    module: props.modplan.modules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TrashBox, {\n    module: props.modplan.selectedModules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    id: \"eval-button\",\n    onClick: () => handleEvalButtonClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Evaluate\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: handleSaveClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Rules, {\n    rules: props.modplan.rules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  })));\n};\n\nModulePlannerPageTemp.propTypes = {\n  callBackendAPI: PropTypes.func.isRequired,\n  setCallBackendNow: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan,\n  settings: state.settings\n});\n\nexport default connect(mapStateToProps, {\n  callBackendAPI,\n  setCallBackendNow,\n  updateSettings,\n  setSelectedModules,\n  initialSettings\n})(ModulePlannerPageTemp);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/ModulePlannerPage.jsx"],"names":["React","useEffect","Board","Rules","TrashBox","YearDisplay","Button","Card","HTML5Backend","Backend","DndProvider","connect","callBackendAPI","setCallBackendNow","setSelectedModules","updateSettings","initialSettings","PropTypes","isEmpty","ModulePlannerPageTemp","props","module","modplan","modules","settings","userInfo","modPlan","rules","handleEvalButtonClick","selectedModules","alert","handleSaveClick","userData","name","residential","major","matriculationYear","targetGradYear","transcript","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty'\n\n\nconst ModulePlannerPageTemp = (props) => {\n\n    const module = props.modplan.modules;\n\n    useEffect(() => {\n        return () => {\n            if(isEmpty(props.settings.userInfo)) {\n                props.initialSettings();\n            }\n\n            if(!isEmpty(props.settings.userInfo.modPlan)) {\n                props.setSelectedModules(props.settings.userInfo.modPlan)\n            }\n        };\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        return () => {\n            if(isEmpty(this.props.modplan.rules)) {\n                this.props.callBackendAPI('Rules');\n            }\n            \n            if(isEmpty(this.props.modplan.modules)){\n                this.props.callBackendAPI('NUSMods');\n            }\n        };\n    }, [])\n\n    const handleEvalButtonClick = () => {\n        const modules = props.modplan.selectedModules;\n        if (isEmpty(modules)) {\n            alert('Please add modules before evaluating');\n        } else {\n            this.props.setCallBackendNow(true);\n        }\n    }\n\n    const handleSaveClick = () => {\n        const userData = {\n            modPlan: props.modplan.selectedModules,\n            name: props.settings.userInfo.name,\n            residential: props.settings.userInfo.residential,\n            major: props.settings.userInfo.major,\n            matriculationYear: props.settings.userInfo.matriculationYear,\n            targetGradYear: props.settings.userInfo.targetGradYear,\n            transcript: {}\n        }\n\n        this.props.updateSettings(userData);\n    }\n    \n    return (\n        <DndProvider backend={Backend} >\n            <div className=\"container-module-planner\">\n                <YearDisplay\n                        year=\"Year 1\"\n                        AY=\"2018/2019\"\n                        module={props.modplan.modules} />\n\n                <YearDisplay\n                        year=\"Year 2\"\n                        AY=\"2019/2020\"\n                        module={props.modplan.modules}/> \n\n                <YearDisplay\n                        year=\"Year 3\"\n                        AY=\"2020/2021\"\n                        module={props.modplan.modules} />\n\n                <YearDisplay\n                        year=\"Year 4\"\n                        AY=\"2022/2023\"\n                        module={props.modplan.modules} /> \n                \n                <TrashBox\n                        module={props.modplan.selectedModules}/>\n\n\n                <br/>\n\n                <Button className=\"button\" id=\"eval-button\" onClick={() => handleEvalButtonClick()}>Evaluate</Button>\n                <Button className=\"button\" onClick={handleSaveClick} >Save</Button>\n                <br/>\n                <br/>\n                <Card>\n                    <Rules\n                        rules={props.modplan.rules}/>\n                </Card>\n                <br/>\n            </div>\n        </DndProvider>\n    )\n}\n\nModulePlannerPageTemp.propTypes = {\n    callBackendAPI: PropTypes.func.isRequired,\n    setCallBackendNow: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan,\n    settings: state.settings\n});\n\nexport default connect(mapStateToProps, \n                    { callBackendAPI, setCallBackendNow, updateSettings, setSelectedModules, initialSettings }) \n                    (ModulePlannerPageTemp);\n"]},"metadata":{},"sourceType":"module"}