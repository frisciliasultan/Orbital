{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/AccountSettings.jsx\";\nimport React, { useState, useReducer, useEffect } from \"react\";\nimport SideNav from \"./SideNav\";\nimport { Input, Popconfirm, Modal, Button } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport RegistrationForm from \"./ChangePassword\";\nimport { deleteUser } from \"../actions/authActions\";\nimport { setEditAll } from \"../actions/settingsActions\";\nimport { removeSuccess } from \"../actions/successActions\";\nimport { handleSaveClick, checkSubmission } from \"../utils/commonFunctions\";\nimport LoadingDots from \"../Pages/Loading Page/LoadingDots\";\n\nconst AccountSettings = props => {\n  const [isModalVisible, setIsModalVisible] = useState(false); // const [changePassword, setChangePassword] = useState(false);\n\n  const [userInput, setUserInput] = useReducer((state, newState) => ({ ...state,\n    ...newState\n  }), {\n    username: props.auth.user.name,\n    email: props.auth.user.email\n  });\n  useEffect(() => {\n    feedback();\n  }, [props.success]);\n\n  function confirm(e) {\n    console.log(e);\n    message.success('Account successfully deleted');\n    message.config({\n      top: '70px',\n      duration: 2\n    });\n    props.deleteUser();\n  }\n\n  const openNotification = (type, placement) => {\n    notification[type]({\n      message: type === \"success\" ? \"Success!\" : \"Whoops!\",\n      description: type === \"success\" ? props.success : \"Please fill in your particulars before saving!\",\n      placement\n    });\n  };\n\n  const presentButton = () => {\n    if (!props.isEditing[2]) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"button settings-button\",\n        onClick: () => props.setEditAll(true, props.isEditing, 2),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }\n      }, \"Edit Settings\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"button settings-button\",\n        onClick: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 20\n        }\n      }, \"Save Settings\");\n    }\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInput({\n      [name]: value\n    });\n  };\n\n  const handleSubmit = () => {\n    const userData = {\n      name: userInput.name,\n      email: userInput.email\n    }; //if all props of userData is filled, allow user to save\n    //else alert popup to redirect user back to filling in their data (TEMPORARY)\n\n    if (checkSubmission(userData)) {\n      handleSaveClick(props, userData, 2);\n    } else {\n      openNotification('warning', 'bottomRight');\n    }\n  };\n\n  const renderContent = name => {\n    if (props.isEditing[2]) {\n      if (name === \"username\") {\n        return /*#__PURE__*/React.createElement(Input, {\n          placeholder: \"Enter username\",\n          type: \"text\",\n          value: userInput.username,\n          name: name,\n          onChange: e => handleChange(e) //  onPressEnter={(e) => handleChange(e)}\n          //  onFocusOut={(e) => handleChange(e)}\n          ,\n          prefix: /*#__PURE__*/React.createElement(UserOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 34\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(Input, {\n          placeholder: `Enter ${name}`,\n          type: \"email\",\n          value: userInput.email,\n          name: name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }\n        });\n      }\n    } else {\n      return userInput[name];\n    }\n  };\n\n  const handleOk = () => {//what happens when updating password\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const feedback = () => {\n    if (!isEmpty(props.success)) {\n      openNotification('success', \"bottomRight\");\n      setTimeout(props.removeSuccess, 500) && clearTimeout(setTimeout(props.removeSuccess, 2000));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SideNav, {\n    active: \"account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"acad-settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"container\",\n    id: \"degree-settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, \"Account Settings\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table settings-table table-hover \",\n    id: \"degree-acad-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 33\n    }\n  }, \"Username :\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, renderContent(\"username\"))), !props.auth.socialLogin && /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 58\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 37\n    }\n  }, \"Email :\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, renderContent(\"email\"))))), presentButton(), !isModalVisible && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    onClick: () => setIsModalVisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }, \"Change Password\"), /*#__PURE__*/React.createElement(Modal, {\n    visible: isModalVisible,\n    title: \"Change Password\",\n    onOk: handleOk,\n    onCancel: handleCancel,\n    footer: [/*#__PURE__*/React.createElement(Button, {\n      key: \"back\",\n      onClick: handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 33\n      }\n    }, \"Return\"), /*#__PURE__*/React.createElement(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      loading: props.auth.isLoading,\n      onClick: handleOk,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 33\n      }\n    }, \"Save\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(RegistrationForm, {\n    setIsModalVisible: setIsModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 30\n    }\n  })), /*#__PURE__*/React.createElement(Popconfirm, {\n    title: \"Confirm delete account?\",\n    onConfirm: confirm,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"delete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 29\n    }\n  }, \"Delete account\")))));\n};\n\nAccountSettings.propType = {\n  deleteUser: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  isEditing: PropTypes.object.isRequired,\n  success: PropTypes.object.isRequired\n};\n\nconst mapStateToProp = state => ({\n  auth: state.auth,\n  isEditing: state.settings.isEditing,\n  success: state.success\n});\n\nexport default connect(mapStateToProp, {\n  deleteUser,\n  setEditAll,\n  removeSuccess\n})(AccountSettings);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/AccountSettings.jsx"],"names":["React","useState","useReducer","useEffect","SideNav","Input","Popconfirm","Modal","Button","UserOutlined","Card","connect","PropTypes","RegistrationForm","deleteUser","setEditAll","removeSuccess","handleSaveClick","checkSubmission","LoadingDots","AccountSettings","props","isModalVisible","setIsModalVisible","userInput","setUserInput","state","newState","username","auth","user","name","email","feedback","success","confirm","e","console","log","message","config","top","duration","openNotification","type","placement","notification","description","presentButton","isEditing","handleSubmit","handleChange","value","target","userData","renderContent","handleOk","handleCancel","isEmpty","setTimeout","clearTimeout","socialLogin","isLoading","propType","func","isRequired","object","mapStateToProp","settings"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from \"react\";\nimport SideNav from \"./SideNav\";\nimport { Input, Popconfirm, Modal, Button } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport RegistrationForm from \"./ChangePassword\";\nimport { deleteUser } from \"../actions/authActions\";\nimport { setEditAll } from \"../actions/settingsActions\";\nimport { removeSuccess } from \"../actions/successActions\";\nimport { handleSaveClick, checkSubmission } from \"../utils/commonFunctions\";\nimport LoadingDots from \"../Pages/Loading Page/LoadingDots\";\n\nconst AccountSettings = (props) => {\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    // const [changePassword, setChangePassword] = useState(false);\n\n    const [userInput, setUserInput] = useReducer(\n        (state, newState) => ({...state, ...newState}), \n        {\n          username: props.auth.user.name,\n          email: props.auth.user.email,\n        }\n      );\n    \n    useEffect(() => {\n    feedback();\n    }, [props.success])\n\n    function confirm(e) {\n        console.log(e);\n        message.success('Account successfully deleted');\n        message.config({\n            top: '70px',\n            duration: 2\n        })\n        props.deleteUser();\n    }\n    \n    const openNotification = (type, placement) => {\n        notification[type]({\n          message: type === \"success\" ? \"Success!\" : \"Whoops!\",\n          description:\n            type === \"success\" ? props.success : \"Please fill in your particulars before saving!\",\n          placement,\n        });\n      };\n\n    const presentButton = () => {\n          if(!props.isEditing[2]) {\n            return <button \n              className=\"button settings-button\" \n              onClick={() => props.setEditAll(true, props.isEditing, 2)}>\n                  Edit Settings\n            </button>\n          } else {\n            return <button \n              className=\"button settings-button\" \n              onClick={handleSubmit}>\n                Save Settings\n            </button>\n          }\n      }\n    \n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setUserInput({[name]: value})\n    }\n\n    const handleSubmit = () => {\n        const userData = {\n            name: userInput.name,\n            email: userInput.email,\n          }\n      \n        //if all props of userData is filled, allow user to save\n        //else alert popup to redirect user back to filling in their data (TEMPORARY)\n        if(checkSubmission(userData)) {\n            handleSaveClick(props, userData, 2);\n        } else {\n            openNotification('warning', 'bottomRight');\n        }\n    } \n\n\n    const renderContent = (name) => {\n        if(props.isEditing[2]) {\n            if(name === \"username\") {\n                return (\n                    <Input \n                         placeholder=\"Enter username\"\n                         type=\"text\"\n                         value={userInput.username}\n                         name={name}\n                         onChange={(e) => handleChange(e)}\n                        //  onPressEnter={(e) => handleChange(e)}\n                        //  onFocusOut={(e) => handleChange(e)}\n                         prefix={<UserOutlined />}/>) \n            } else {\n                return (\n                    <Input \n                         placeholder={`Enter ${name}`}\n                         type=\"email\"\n                         value={userInput.email}\n                         name={name}/>) \n            }\n                \n        } else {\n            return userInput[name];\n        }\n    }\n    \n    const handleOk = () => {\n      //what happens when updating password\n    };\n    \n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const feedback = () => {\n        if(!isEmpty(props.success)) {\n         openNotification('success', \"bottomRight\" );\n           setTimeout(props.removeSuccess, 500) &&\n           clearTimeout(setTimeout(props.removeSuccess, 2000))\n        } \n     }\n\n    return (\n        <div className=\"settings\">\n            <SideNav active=\"account\"/>\n                <div className=\"acad-settings\">\n                <Card className=\"container\" id=\"degree-settings\">\n                    <Card.Header>\n                        Account Settings\n                    </Card.Header>\n                    <table className=\"table settings-table table-hover \" id=\"degree-acad-table\">\n                        <tbody>\n                            <tr>\n                                <td>\n                                    Username :\n                                </td>\n\n                                <td>\n                                    {renderContent(\"username\")}\n                                </td>\n                            </tr>\n\n                            {!props.auth.socialLogin && (<tr>\n                                <td>\n                                    <label>Email :</label>\n                                </td>\n\n                                <td>\n                                    {renderContent(\"email\")}\n                                </td>\n                            </tr>)}\n                        </tbody>\n                    </table>\n                  \n                    {presentButton()}\n                    {!isModalVisible && \n                        <button \n                            className=\"button settings-button\" \n                            onClick={() => setIsModalVisible(true)}>\n                                Change Password\n                        </button>}\n                    \n                        <Modal\n                            visible={isModalVisible}\n                            title=\"Change Password\"\n                            onOk={handleOk}\n                            onCancel={handleCancel}\n                            footer={[\n                                <Button key=\"back\" onClick={handleCancel}>\n                                Return\n                                </Button>,\n                                <Button key=\"submit\" type=\"primary\" loading={props.auth.isLoading} onClick={handleOk}>\n                                Save\n                                </Button>,\n                            ]}\n                        >\n                             <RegistrationForm \n                                    setIsModalVisible={setIsModalVisible}/>\n                        </Modal>                            \n                    \n                        <Popconfirm\n                            title=\"Confirm delete account?\"\n                            onConfirm={confirm}\n                            okText=\"Yes\"\n                            cancelText=\"No\"\n                        >\n                            <button \n                                className=\"button settings-button\" id=\"delete\">\n                                    Delete account\n                            </button>\n                        </Popconfirm>\n                </Card>\n                </div>\n        </div>\n    )\n}\n\nAccountSettings.propType = {\n    deleteUser: PropTypes.func.isRequired,\n    removeSuccess: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    isEditing: PropTypes.object.isRequired,\n    success: PropTypes.object.isRequired\n};\n\nconst mapStateToProp = state => ({\n    auth: state.auth,\n    isEditing: state.settings.isEditing,\n    success: state.success\n});\n\nexport default connect(mapStateToProp, { deleteUser, setEditAll, removeSuccess }) (AccountSettings);"]},"metadata":{},"sourceType":"module"}