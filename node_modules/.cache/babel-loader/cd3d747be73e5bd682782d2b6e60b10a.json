{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd'; //import generateCards from './generateCards'\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n  const [displayCard, setDisplayCard] = useState();\n\n  const cardList = () => moduleCodeTitle.map((item, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: \"card_\" + i,\n    className: \"card\",\n    title: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }));\n\n  useEffect(() => {});\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => item.id,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(true);\n  }\n\n  function updateModuleCards(item) {\n    console.log(moduleCodeTitle + 'beginning');\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(item)) {\n      newModuleCodeTitle.push(item);\n      setModuleCodeTitle(newModuleCodeTitle);\n      cardList();\n      setDisplayCard(cardList);\n    }\n\n    console.log(moduleCodeTitle);\n  } // function generateModuleCards() {\n  //     console.log('called');\n  //     return( result\n  // moduleCodeTitle.map((item, i) => {\n  //     return (\n  //         <ModuleCard\n  //             id={\"card_\" + i}\n  //             className=\"card\"\n  //             title={item}/>\n  //     )\n  // })\n  //     )\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, props.year + ' ' + props.semester), displayCard, isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    updateModuleCards: updateModuleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Add Module\"));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","DropdownButton","Dropdown","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","moduleCodeTitle","setModuleCodeTitle","displayCard","setDisplayCard","cardList","map","item","i","isOver","drop","accept","CARD","monitor","id","collect","handleButtonClick","updateModuleCards","console","log","newModuleCodeTitle","includes","push","year","semester"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,MAAnC,QAAiD,iBAAjD;AACA,OAAOC,UAAP,MAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CACA;;AAKA,SAASC,KAAT,CAAgBC,KAAhB,EAAuB;AACnB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,EAA9C;;AACA,QAAMiB,QAAQ,GAAG,MAAMJ,eAAe,CAACK,GAAhB,CAAoB,CAACC,IAAD,EAAOC,CAAP,kBAClC,oBAAC,UAAD;AACG,IAAA,EAAE,EAAE,UAAUA,CADjB;AAEG,IAAA,SAAS,EAAC,MAFb;AAGG,IAAA,KAAK,EAAED,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,CAAvB;;AAYAlB,EAAAA,SAAS,CAAE,MAAM,CAEZ,CAFI,CAAT;AAKA,QAAM,CAAC;AAAEoB,IAAAA;AAAF,GAAD,EAAaC,IAAb,IAAqBd,OAAO,CAAC;AAC3Be,IAAAA,MAAM,EAAEhB,SAAS,CAACiB,IADS;AAE3BF,IAAAA,IAAI,EAAE,CAACH,IAAD,EAAOM,OAAP,KAAoBN,IAAI,CAACO,EAFJ;AAG3BC,IAAAA,OAAO,EAAEF,OAAO,KAAK;AACjBJ,MAAAA,MAAM,EAAE,CAAC,CAACI,OAAO,CAACJ,MAAR;AADO,KAAL;AAHW,GAAD,CAAlC;;AAWA,WAASO,iBAAT,GAA6B;AACzBhB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACF;;AAEF,WAASiB,iBAAT,CAA2BV,IAA3B,EAAiC;AAC7BW,IAAAA,OAAO,CAACC,GAAR,CAAYlB,eAAe,GAAG,WAA9B;AACA,QAAImB,kBAAkB,GAAGnB,eAAzB;;AACA,QAAI,CAACmB,kBAAkB,CAACC,QAAnB,CAA4Bd,IAA5B,CAAL,EAAwC;AACpCa,MAAAA,kBAAkB,CAACE,IAAnB,CAAwBf,IAAxB;AACAL,MAAAA,kBAAkB,CAACkB,kBAAD,CAAlB;AACAf,MAAAA,QAAQ;AACRD,MAAAA,cAAc,CAACC,QAAD,CAAd;AACH;;AACDa,IAAAA,OAAO,CAACC,GAAR,CAAYlB,eAAZ;AACH,GA9CkB,CAgDnB;AACA;AAEA;AACY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEZ;AAEA;;;AAII,sBACI;AACI,IAAA,GAAG,EAAES,IADT;AAEI,IAAA,EAAE,EAAEZ,KAAK,CAACgB,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKhB,KAAK,CAACyB,IAAN,GAAa,GAAb,GAAmBzB,KAAK,CAAC0B,QAA9B,CAJJ,EAKKrB,WALL,EAMKJ,aAAa,iBAAI,oBAAC,gBAAD;AAAkB,IAAA,iBAAiB,EAAEkB,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANtB,eAQI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,CADJ;AAeP;;AAED,eAAenB,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n//import generateCards from './generateCards'\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n    const [displayCard, setDisplayCard] = useState();\n    const cardList = () => moduleCodeTitle.map((item, i) => \n            (<ModuleCard\n                id={\"card_\" + i}\n                className=\"card\"\n                title={item}/>));\n        \n    \n\n\n                 \n\n\n    useEffect( () => {\n        \n        })\n    \n    \n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => (item.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n\n    \n\n    function handleButtonClick() {\n        setIsTextBoxOpen(true);\n     }\n\n    function updateModuleCards(item) {\n        console.log(moduleCodeTitle + 'beginning');\n        let newModuleCodeTitle = moduleCodeTitle;\n        if (!newModuleCodeTitle.includes(item)) {\n            newModuleCodeTitle.push(item);\n            setModuleCodeTitle(newModuleCodeTitle);\n            cardList();\n            setDisplayCard(cardList);\n        }\n        console.log(moduleCodeTitle);\n    }\n\n    // function generateModuleCards() {\n    //     console.log('called');\n        \n    //     return( result\n                // moduleCodeTitle.map((item, i) => {\n                //     return (\n                //         <ModuleCard\n                //             id={\"card_\" + i}\n                //             className=\"card\"\n                //             title={item}/>\n                //     )\n                // })\n        \n    //     )\n        \n    // }\n\n\n\n        return (\n            <div   \n                ref={drop}\n                id={props.id}\n            >\n                <h3>{props.year + ' ' + props.semester}</h3>\n                {displayCard}\n                {isTextBoxOpen && <AutoCompleteText updateModuleCards={updateModuleCards}/>}\n                \n                <Button onClick={handleButtonClick}>Add Module</Button>\n            </div>\n        )\n        \n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}