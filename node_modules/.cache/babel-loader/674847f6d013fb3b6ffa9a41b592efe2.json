{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setModuleLocation } from \"../../actions/modplanActions\";\n\nfunction Board(props) {\n  const [isBoardFilled, setIsBoardFilled] = useState(false);\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [display, setDisplay] = useState();\n  const selectedModules = props.modplan.selectedModules;\n  let totalMCs = 0;\n  useEffect(() => {\n    updateIsBoardFilled();\n  }, [selectedModules]);\n  const generateCards = selectedModules.filter((object, i) => object.location === props.id).map((object, i) => {\n    totalMCs += Number(object.moduleCredit);\n    return /*#__PURE__*/React.createElement(ModuleCard, {\n      id: object.moduleCode,\n      location: props.id,\n      title: `${object.moduleCode}: ${object.title}`,\n      MCs: object.moduleCredit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }\n    });\n  });\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: item => props.setModuleLocation(item, props.id, props.AY, selectedModules),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n  }\n\n  function updateIsBoardFilled() {\n    if (selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n      setIsBoardFilled(true);\n    } else {\n      setIsBoardFilled(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    style: {\n      width: '20rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    style: {\n      width: '165px',\n      height: !isBoardFilled && '59px',\n      outline: isBoardFilled ? 'none' : '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, isBoardFilled ? generateCards : 'Drop module here'), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    AY: props.AY,\n    location: props.id,\n    module: props.module,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Add Module\"), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, \"Total MCs: \", totalMCs)));\n}\n\nBoard.propType = {\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  setModuleLocation\n})(Board);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","PropTypes","connect","setModuleLocation","Board","props","isBoardFilled","setIsBoardFilled","isTextBoxOpen","setIsTextBoxOpen","display","setDisplay","selectedModules","modplan","totalMCs","updateIsBoardFilled","generateCards","filter","object","i","location","id","map","Number","moduleCredit","moduleCode","title","isOver","drop","accept","CARD","item","AY","collect","monitor","handleButtonClick","length","semester","width","height","outline","module","propType","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setModuleLocation } from \"../../actions/modplanActions\";\n\n\n\nfunction Board (props) {\n    const [isBoardFilled, setIsBoardFilled] = useState(false);\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [display, setDisplay] = useState();\n    const selectedModules = props.modplan.selectedModules;\n    let totalMCs = 0;\n    \n    useEffect(() => { \n            updateIsBoardFilled();\n    }, [selectedModules])\n        \n    const generateCards = selectedModules\n        .filter((object, i) => object.location === props.id)\n        .map((object, i) => {\n                totalMCs += Number(object.moduleCredit)\n                return (<ModuleCard\n                    id={object.moduleCode}\n                    location={props.id}\n                    title={`${object.moduleCode}: ${object.title}`}\n                    MCs={object.moduleCredit}/>)});\n\n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item) => props.setModuleLocation(item, props.id, props.AY, selectedModules),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n     }\n\n    function updateIsBoardFilled() {\n        if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n            setIsBoardFilled(true);\n            \n        } else {\n            setIsBoardFilled(false);\n        }\n    }\n \n\n        return (\n            \n            <div>\n                <h3>{props.semester}</h3>\n            <div   \n                ref={drop}\n                id={props.id}\n                style={{width: '20rem'}}\n            >\n\n            <div className=\"\" style={{width: '165px', \n                        height: (!isBoardFilled) && '59px', \n                        outline: isBoardFilled ? 'none' : '1px dotted'}}>\n                            {isBoardFilled ? generateCards : 'Drop module here'}\n            </div>\n            {isTextBoxOpen && <AutoCompleteText \n                                            AY={props.AY}\n                                            location={props.id}\n                                            module={props.module}/>}\n                <Button className=\"button\" onClick={handleButtonClick}>Add Module</Button>\n                <h5>Total MCs: {totalMCs}</h5>\n                \n                </div>\n            </div>\n        )\n   \n}\n\nBoard.propType = {\n    modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, { setModuleLocation }) (Board);\n\n"]},"metadata":{},"sourceType":"module"}