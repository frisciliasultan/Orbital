{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n  useEffect(() => {\n    return moduleCodeTitle.map((item, i) => {\n      setDisplayCard( /*#__PURE__*/React.createElement(ModuleCard, {\n        id: \"card_\" + i,\n        className: \"card\",\n        title: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }\n      }));\n    });\n  });\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => item.id,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(true);\n  }\n\n  function updateModuleCards(item) {\n    console.log(moduleCodeTitle + 'beginning');\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(item)) {\n      newModuleCodeTitle.push(item);\n      setModuleCodeTitle(newModuleCodeTitle);\n    }\n\n    console.log(moduleCodeTitle);\n  }\n\n  function generateModuleCards() {\n    console.log('called');\n    return moduleCodeTitle.map((item, i) => {\n      return /*#__PURE__*/React.createElement(ModuleCard, {\n        id: \"card_\" + i,\n        className: \"card\",\n        title: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, props.year + ' ' + props.semester), displayCard, isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    updateModuleCards: updateModuleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Add Module\"));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","DropdownButton","Dropdown","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","moduleCodeTitle","setModuleCodeTitle","map","item","i","setDisplayCard","isOver","drop","accept","CARD","monitor","id","collect","handleButtonClick","updateModuleCards","console","log","newModuleCodeTitle","includes","push","generateModuleCards","year","semester","displayCard"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n\n\n    useEffect( () => {\n        return(\n            moduleCodeTitle.map((item, i) => {\n                setDisplayCard (\n                    <ModuleCard\n                        id={\"card_\" + i}\n                        className=\"card\"\n                        title={item}>\n                    </ModuleCard>\n                )\n            })\n        \n        )\n        })\n    \n    \n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => (item.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n\n    \n\n    function handleButtonClick() {\n        setIsTextBoxOpen(true);\n     }\n\n    function updateModuleCards(item) {\n        console.log(moduleCodeTitle + 'beginning');\n        let newModuleCodeTitle = moduleCodeTitle;\n        if (!newModuleCodeTitle.includes(item)) {\n            newModuleCodeTitle.push(item);\n            setModuleCodeTitle(newModuleCodeTitle);\n\n            \n        }\n        console.log(moduleCodeTitle);\n    }\n\n    function generateModuleCards() {\n        console.log('called');\n        \n        return(\n                moduleCodeTitle.map((item, i) => {\n                    return (\n                        <ModuleCard\n                            id={\"card_\" + i}\n                            className=\"card\"\n                            title={item}>\n                        </ModuleCard>\n                    )\n                })\n        \n        )\n        \n    }\n\n\n\n        return (\n            <div   \n                ref={drop}\n                id={props.id}\n            >\n                \n                <h3>{props.year + ' ' + props.semester}</h3>\n                {displayCard}\n                {isTextBoxOpen && <AutoCompleteText updateModuleCards={updateModuleCards}/>}\n                \n                <Button onClick={handleButtonClick}>Add Module</Button>\n            </div>\n        )\n        \n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}