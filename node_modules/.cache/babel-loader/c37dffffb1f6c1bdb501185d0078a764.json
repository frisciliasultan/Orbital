{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/AcadSettings.jsx\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport SideNav from \"./SideNav\";\nimport Options from './Options';\nimport DegreeSettings from \"./DegreeSettings\";\nimport LoadingDots from \"../Pages/Loading Page/LoadingPage\";\nimport { Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { updateSettings, setMatriculationYearOptions, setTargetGradYearOptions, setDegreeOptions, setEditAll } from \"../actions/settingsActions\";\nimport { deleteUser } from \"../actions/authActions\";\nimport { removeSuccess } from \"../actions/successActions\";\nimport isEmpty from \"is-empty\";\nimport { generateOptions } from '../utils/commonFunctions';\nimport { Spin, notification } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst AcadSettings = props => {\n  const antIcon = /*#__PURE__*/React.createElement(LoadingOutlined, {\n    style: {\n      fontSize: 24\n    },\n    spin: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }\n  });\n  const [userInput, setUserInput] = useReducer((state, newState) => ({ ...state,\n    ...newState\n  }), {\n    faculty: props.userInfo.faculty,\n    facIndex: props.userInfo.facIndex,\n    major: props.userInfo.major,\n    majorIndex: props.userInfo.majorIndex,\n    specialisation: props.userInfo.specialisation,\n    secondMajor: props.userInfo.secondMajor,\n    minor: props.userInfo.minor,\n    residence: props.userInfo.residential,\n    matriculationYear: props.userInfo.matriculationYear,\n    targetGradYear: props.userInfo.targetGradYear\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  useEffect(() => {\n    if (isEmpty(props.settings.facultyOptions)) {\n      props.setDegreeOptions();\n    }\n  }, []);\n  useEffect(() => {\n    if (props.settings.currentAY && isEmpty(props.settings.matriculationOptions)) {\n      props.setMatriculationYearOptions(props.settings.currentAY, props.settings.currentSemester);\n      props.setTargetGradYearOptions(props.settings.currentAY, props.settings.currentSemester);\n    }\n  }, [props.settings.currentAY]);\n  useEffect(() => {\n    if (!isEmpty(props.userInfo)) {\n      setUserInput({\n        faculty: props.userInfo.faculty,\n        facIndex: props.userInfo.facIndex,\n        major: props.userInfo.major,\n        majorIndex: props.userInfo.majorIndex,\n        specialisation: props.userInfo.specialisation,\n        secondMajor: props.userInfo.secondMajor,\n        minor: props.userInfo.minor,\n        residence: props.userInfo.residential,\n        matriculationYear: props.userInfo.matriculationYear,\n        targetGradYear: props.userInfo.targetGradYear\n      });\n\n      if (props.auth.firstTimeRegistered || !props.settings.userInfo.faculty) {\n        console.log(props.auth.firstTimeRegistered);\n        console.log(props.settings.userInfo.faculty);\n        props.setEditAll(true, props.settings.isEditing, \"editAll\");\n      }\n    }\n  }, [props.userInfo]);\n  useEffect(() => {\n    feedback();\n  }, [props.success]);\n\n  const openNotification = (type, placement) => {\n    console.log(type);\n    notification[type]({\n      message: type === \"success\" ? \"Success!\" : \"Whoops!\",\n      description: type === \"success\" ? props.success : \"Please fill in your particulars before saving!\",\n      placement\n    });\n  };\n\n  const handleChange = (e, object) => {\n    const {\n      name,\n      value,\n      selectedindex\n    } = object;\n\n    if (name === \"faculty\") {\n      console.log('changed');\n      setUserInput({\n        [name]: value,\n        facIndex: selectedindex,\n        major: null\n      });\n    } else if (name === \"major\") {\n      setUserInput({\n        [name]: value,\n        majorIndex: selectedindex\n      });\n    } else {\n      setUserInput({\n        [name]: value\n      });\n    }\n  }; //Check if there is any part of userData that is undefined/falsy\n\n\n  const checkSubmission = userData => {\n    const keys = Object.keys(userData);\n    let status;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      status = userData[key] || userData[key] === 0 ? true : false;\n\n      if (!status) {\n        return status = false;\n      }\n    }\n\n    return status;\n  };\n\n  const handleSubmit = () => {\n    const userData = {\n      faculty: userInput.faculty,\n      facIndex: userInput.facIndex,\n      major: userInput.major,\n      majorIndex: userInput.majorIndex,\n      specialisation: userInput.specialisation ? userInput.specialisation : \"None\",\n      secondMajor: userInput.secondMajor ? userInput.secondMajor : \"None\",\n      minor: userInput.minor ? userInput.minor : \"None\",\n      residential: userInput.residence ? userInput.residence : \"None\",\n      matriculationYear: userInput.matriculationYear,\n      targetGradYear: userInput.targetGradYear,\n      modPlan: props.modplan,\n      cap: props.cap.cap,\n      targetCap: props.cap.targetCap\n    }; //if all props of userData is filled, allow user to save\n    //else alert popup to redirect user back to filling in their data (TEMPORARY)\n\n    if (checkSubmission(userData)) {\n      props.updateSettings(userData);\n    } else {\n      openNotification('warning', 'bottomRight');\n    }\n  };\n\n  const presentButton = () => {\n    if (!props.settings.editAll) {\n      if (!isEditing) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"button settings-button\",\n          onClick: () => setIsEditing(true),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 16\n          }\n        }, \"Edit Settings\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"button settings-button\",\n          onClick: () => {\n            handleSubmit();\n            setIsEditing(isEmpty(props.success) ? false : true);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 16\n          }\n        }, \"Save Settings\");\n      }\n    }\n  };\n\n  const feedback = () => {\n    if (!isEmpty(props.success)) {\n      openNotification('success', \"bottomRight\");\n      setTimeout(props.removeSuccess, 500) && clearTimeout(setTimeout(props.removeSuccess, 2000));\n    }\n  };\n\n  return props.auth.loading || isEmpty(props.settings.facultyOptions) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(SideNav, {\n    active: \"academics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"acad-settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, \"Academic Settings\"), /*#__PURE__*/React.createElement(Card, {\n    className: \"container\",\n    id: \"general-acad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, \"General Academic Settings\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table settings-table table-hover\",\n    id: \"general-acad-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Options, {\n    label: \"Residential College : \",\n    handleChange: handleChange,\n    name: \"residence\",\n    value: userInput.residence,\n    editing: isEditing || props.settings.editAll,\n    optionList: props.settings.residenceOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Options, {\n    label: \"Matriculation Year : \",\n    handleChange: handleChange,\n    name: \"matriculationYear\",\n    value: userInput.matriculationYear,\n    editing: isEditing || props.settings.editAll,\n    optionList: props.settings.matriculationOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Options, {\n    label: \"Graduation Year : \",\n    handleChange: handleChange,\n    name: \"targetGradYear\",\n    value: userInput.targetGradYear,\n    editing: isEditing || props.settings.editAll,\n    optionList: props.settings.targetGradOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }\n  }))), presentButton()), /*#__PURE__*/React.createElement(DegreeSettings, {\n    status: \"first\",\n    userInput: userInput,\n    setUserInput: setUserInput,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }), !props.settings.editAll ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"all-settings\",\n    onClick: () => props.setEditAll(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, \"Edit All Settings\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"all-settings\",\n    onClick: () => {\n      handleSubmit(\"editAll\");\n      props.setEditAll(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, \"Save All Settings\", /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    spinning: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 19\n    }\n  })))));\n};\n\nAcadSettings.propTypes = {\n  updateSettings: PropTypes.func.isRequired,\n  setMatriculationYearOptions: PropTypes.func.isRequired,\n  setTargetGradYearOptions: PropTypes.func.isRequired,\n  setDegreeOptions: PropTypes.func.isRequired,\n  setEditAll: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  deleteUser: PropTypes.func.isRequired,\n  modplan: PropTypes.array.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  modplan: state.modplan.selectedModules,\n  settings: state.settings,\n  userInfo: state.settings.userInfo,\n  cap: state.cap,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  updateSettings,\n  setMatriculationYearOptions,\n  setTargetGradYearOptions,\n  setDegreeOptions,\n  setEditAll,\n  removeSuccess,\n  deleteUser\n})(AcadSettings);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/AcadSettings.jsx"],"names":["React","useState","useEffect","useReducer","SideNav","Options","DegreeSettings","LoadingDots","Card","connect","PropTypes","updateSettings","setMatriculationYearOptions","setTargetGradYearOptions","setDegreeOptions","setEditAll","deleteUser","removeSuccess","isEmpty","generateOptions","Spin","notification","LoadingOutlined","AcadSettings","props","antIcon","fontSize","userInput","setUserInput","state","newState","faculty","userInfo","facIndex","major","majorIndex","specialisation","secondMajor","minor","residence","residential","matriculationYear","targetGradYear","isEditing","setIsEditing","settings","facultyOptions","currentAY","matriculationOptions","currentSemester","auth","firstTimeRegistered","console","log","feedback","success","openNotification","type","placement","message","description","handleChange","e","object","name","value","selectedindex","checkSubmission","userData","keys","Object","status","i","length","key","handleSubmit","modPlan","modplan","cap","targetCap","presentButton","editAll","setTimeout","clearTimeout","loading","residenceOptions","targetGradOptions","propTypes","func","isRequired","array","mapStateToProps","selectedModules"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useReducer} from 'react';\nimport SideNav from \"./SideNav\";\nimport Options from './Options';\nimport DegreeSettings from \"./DegreeSettings\";\nimport LoadingDots from \"../Pages/Loading Page/LoadingPage\"\nimport { Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { updateSettings, setMatriculationYearOptions,\n  setTargetGradYearOptions, setDegreeOptions,\n  setEditAll } from \"../actions/settingsActions\";\nimport { deleteUser } from \"../actions/authActions\";\nimport { removeSuccess } from \"../actions/successActions\";\nimport isEmpty from \"is-empty\";\nimport { generateOptions } from '../utils/commonFunctions';\nimport { Spin, notification } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\n\nconst AcadSettings = (props) => {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n  const [userInput, setUserInput] = useReducer(\n    (state, newState) => ({...state, ...newState}), \n    {\n      faculty: props.userInfo.faculty,\n      facIndex: props.userInfo.facIndex,\n      major: props.userInfo.major,\n      majorIndex: props.userInfo.majorIndex,\n      specialisation: props.userInfo.specialisation,\n      secondMajor: props.userInfo.secondMajor,\n      minor: props.userInfo.minor,\n      residence: props.userInfo.residential,\n      matriculationYear: props.userInfo.matriculationYear,\n      targetGradYear: props.userInfo.targetGradYear\n    }\n  );\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  useEffect(() => {\n    if(isEmpty(props.settings.facultyOptions)) {\n        props.setDegreeOptions();\n    }\n  }, []);\n\n  useEffect(() => {\n    if(props.settings.currentAY && isEmpty(props.settings.matriculationOptions)) {\n        props.setMatriculationYearOptions(props.settings.currentAY, props.settings.currentSemester);\n        props.setTargetGradYearOptions(props.settings.currentAY, props.settings.currentSemester);\n    }\n  }, [props.settings.currentAY]);\n\n  useEffect(() => {\n    if(!isEmpty(props.userInfo)) {\n      setUserInput({\n        faculty: props.userInfo.faculty,\n        facIndex: props.userInfo.facIndex,\n        major: props.userInfo.major,\n        majorIndex: props.userInfo.majorIndex,\n        specialisation: props.userInfo.specialisation,\n        secondMajor: props.userInfo.secondMajor,\n        minor: props.userInfo.minor,\n        residence: props.userInfo.residential,\n        matriculationYear: props.userInfo.matriculationYear,\n        targetGradYear: props.userInfo.targetGradYear\n      });\n      \n      if(props.auth.firstTimeRegistered || !props.settings.userInfo.faculty) {\n        console.log(props.auth.firstTimeRegistered)\n        console.log(props.settings.userInfo.faculty)\n        props.setEditAll(true, props.settings.isEditing, \"editAll\");\n      }\n    }\n  }, [props.userInfo]);\n\n  useEffect(() => {\n    feedback();\n  }, [props.success])\n\n  const openNotification = (type, placement) => {\n    console.log(type)\n    notification[type]({\n      message: type === \"success\" ? \"Success!\" : \"Whoops!\",\n      description:\n        type === \"success\" ? props.success : \"Please fill in your particulars before saving!\",\n      placement,\n    });\n  };\n\n  const handleChange = (e, object) => {\n    const {name, value, selectedindex} = object;\n    if(name === \"faculty\") {\n      console.log('changed');\n      setUserInput({[name]: value,\n                      facIndex: (selectedindex),\n                      major: null});\n        \n    } else if(name === \"major\") {\n      setUserInput({[name]: value,\n                      majorIndex: (selectedindex)});\n\n    } else {\n      setUserInput({[name]: value});\n    } \n  };\n\n\n  //Check if there is any part of userData that is undefined/falsy\n  const checkSubmission = (userData) => {\n    const keys = Object.keys(userData);\n    let status;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      status = (userData[key] || userData[key] === 0) ? true : false;\n     \n      if(!status) {\n        return status = false;\n      }\n    }\n\n    return status;\n  }\n\n  const handleSubmit = () => {\n    const userData = {\n      faculty: userInput.faculty,\n      facIndex: userInput.facIndex,\n      major: userInput.major,\n      majorIndex: userInput.majorIndex,\n      specialisation: userInput.specialisation ? userInput.specialisation : \"None\",\n      secondMajor: userInput.secondMajor ? userInput.secondMajor : \"None\",\n      minor: userInput.minor ? userInput.minor : \"None\",\n      residential: userInput.residence ? userInput.residence : \"None\",\n      matriculationYear: userInput.matriculationYear,\n      targetGradYear: userInput.targetGradYear,\n      modPlan: props.modplan,\n      cap: props.cap.cap,\n      targetCap: props.cap.targetCap\n    }\n\n  //if all props of userData is filled, allow user to save\n  //else alert popup to redirect user back to filling in their data (TEMPORARY)\n  if(checkSubmission(userData)) {\n    props.updateSettings(userData);\n\n  } else {\n    openNotification('warning', 'bottomRight');\n  }\n} \n\n  const presentButton = () => {\n    if(!props.settings.editAll) {\n      if(!isEditing) {\n        return <button \n          className=\"button settings-button\" \n          onClick={() => setIsEditing(true)}>\n              Edit Settings\n        </button>\n      } else {\n        return <button \n          className=\"button settings-button\" \n          onClick={() => {\n            handleSubmit();\n            setIsEditing(isEmpty(props.success) ? false : true )\n            }}>\n            Save Settings\n        </button>\n      }\n    }\n  }\n\n  const feedback = () => {\n     if(!isEmpty(props.success)) {\n      openNotification('success', \"bottomRight\" );\n        setTimeout(props.removeSuccess, 500) &&\n        clearTimeout(setTimeout(props.removeSuccess, 2000))\n     } \n  }\n\n  return (\n    props.auth.loading || isEmpty(props.settings.facultyOptions) \n      ? <LoadingDots/>\n      : (<div className=\"settings\">\n          <SideNav active=\"academics\"/>\n          \n          <div className=\"acad-settings\">\n            <h1>Academic Settings</h1>\n\n            <Card className=\"container\" id=\"general-acad\">\n              <Card.Header className=\"card-header\">General Academic Settings</Card.Header>\n              <table className=\"table settings-table table-hover\" id=\"general-acad-table\">\n                <tbody>\n                  <Options\n                    label=\"Residential College : \"\n                    handleChange={handleChange}\n                    name=\"residence\"\n                    value={userInput.residence}\n                    editing={isEditing || props.settings.editAll}\n                    optionList={props.settings.residenceOptions}/>\n                  \n                  <Options\n                    label=\"Matriculation Year : \"\n                    handleChange={handleChange}\n                    name=\"matriculationYear\"\n                    value={userInput.matriculationYear}\n                    editing={isEditing || props.settings.editAll}\n                    optionList={props.settings.matriculationOptions}/>\n\n                  <Options\n                    label=\"Graduation Year : \"\n                    handleChange={handleChange}\n                    name=\"targetGradYear\"\n                    value={userInput.targetGradYear}\n                    editing={isEditing || props.settings.editAll}\n                    optionList={props.settings.targetGradOptions}/>\n                </tbody>\n              </table>\n\n              {presentButton()}\n            </Card> \n\n            <DegreeSettings\n              status=\"first\"\n              userInput={userInput}\n              setUserInput={setUserInput}\n              handleChange={handleChange}\n              handleSubmit={handleSubmit}\n            />\n\n          {!props.settings.editAll \n            ? <button \n                className=\"button settings-button\" id=\"all-settings\"\n                onClick={() => props.setEditAll(true)}>\n                    Edit All Settings\n              </button>\n            : (\n              <div>\n              <button \n                className=\"button settings-button\" id=\"all-settings\"\n                onClick={() => {\n                    handleSubmit(\"editAll\");\n                    props.setEditAll(false);}}>\n                  Save All Settings\n                  <Spin indicator={antIcon} spinning={false}/>\n              </button>\n             \n               </div>)\n          }\n          </div>\n        </div>)\n  );\n}\n\n\nAcadSettings.propTypes = {\n  updateSettings: PropTypes.func.isRequired,\n  setMatriculationYearOptions: PropTypes.func.isRequired,\n  setTargetGradYearOptions: PropTypes.func.isRequired,\n  setDegreeOptions: PropTypes.func.isRequired,\n  setEditAll: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  deleteUser: PropTypes.func.isRequired,\n  modplan: PropTypes.array.isRequired,\n  settings: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  modplan: state.modplan.selectedModules,\n  settings: state.settings,\n  userInfo: state.settings.userInfo,\n  cap: state.cap,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, \n  { updateSettings, setMatriculationYearOptions, setTargetGradYearOptions, setDegreeOptions, setEditAll, removeSuccess, deleteUser }) (AcadSettings);\n"]},"metadata":{},"sourceType":"module"}