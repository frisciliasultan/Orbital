{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd'; //import generateCards from './generateCards'\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n  const [displayCard, setDisplayCard] = useState();\n\n  const result = () => moduleCodeTitle.map((item, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: \"card_\" + i,\n    className: \"card\",\n    title: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }));\n\n  let cardList;\n  useEffect(() => {});\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => item.id,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(true);\n  }\n\n  function updateModuleCards(item) {\n    console.log(moduleCodeTitle + 'beginning');\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(item)) {\n      newModuleCodeTitle.push(item);\n      setModuleCodeTitle(newModuleCodeTitle);\n      result(); // cardList = generateModuleCards();\n\n      setDisplayCard(cardList);\n    }\n\n    console.log(moduleCodeTitle);\n  }\n\n  function generateModuleCards() {\n    console.log('called');\n    return result // moduleCodeTitle.map((item, i) => {\n    //     return (\n    //         <ModuleCard\n    //             id={\"card_\" + i}\n    //             className=\"card\"\n    //             title={item}/>\n    //     )\n    // })\n    ;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, props.year + ' ' + props.semester), displayCard, isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    updateModuleCards: updateModuleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Add Module\"));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","DropdownButton","Dropdown","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","moduleCodeTitle","setModuleCodeTitle","displayCard","setDisplayCard","result","map","item","i","cardList","isOver","drop","accept","CARD","monitor","id","collect","handleButtonClick","updateModuleCards","console","log","newModuleCodeTitle","includes","push","generateModuleCards","year","semester"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n//import generateCards from './generateCards'\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n    const [displayCard, setDisplayCard] = useState();\n    const result = () => moduleCodeTitle.map((item, i) => \n            (<ModuleCard\n                id={\"card_\" + i}\n                className=\"card\"\n                title={item}/>));\n        \n    \n    let cardList;\n\n                 \n\n\n    useEffect( () => {\n        \n        })\n    \n    \n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => (item.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n\n    \n\n    function handleButtonClick() {\n        setIsTextBoxOpen(true);\n     }\n\n    function updateModuleCards(item) {\n        console.log(moduleCodeTitle + 'beginning');\n        let newModuleCodeTitle = moduleCodeTitle;\n        if (!newModuleCodeTitle.includes(item)) {\n            newModuleCodeTitle.push(item);\n            setModuleCodeTitle(newModuleCodeTitle);\n            result();\n            // cardList = generateModuleCards();\n            setDisplayCard(cardList);\n        }\n        console.log(moduleCodeTitle);\n    }\n\n    function generateModuleCards() {\n        console.log('called');\n        \n        return( result\n                // moduleCodeTitle.map((item, i) => {\n                //     return (\n                //         <ModuleCard\n                //             id={\"card_\" + i}\n                //             className=\"card\"\n                //             title={item}/>\n                //     )\n                // })\n        \n        )\n        \n    }\n\n\n\n        return (\n            <div   \n                ref={drop}\n                id={props.id}\n            >\n                <h3>{props.year + ' ' + props.semester}</h3>\n                {displayCard}\n                {isTextBoxOpen && <AutoCompleteText updateModuleCards={updateModuleCards}/>}\n                \n                <Button onClick={handleButtonClick}>Add Module</Button>\n            </div>\n        )\n        \n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}