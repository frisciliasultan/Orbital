{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/Subrules.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Spinner } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setCallBackendNow } from \"../../actions/modplanActions\";\n\nfunction Subrules(props) {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [isRuleFulfilled, setIsRuleFulfilled] = useState();\n  // const [isBackendCalled, setIsBackendCalled] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const modules = props.modplan.selectedModules ? props.modplan.selectedModules.map(object => object.moduleCode) : null; // useEffect(() => {\n  //     const callBackendFunc = async (ruleTag) => {\n  //         try{\n  //             const link = \"https://modtree-api.netlify.app/.netlify/functions/eval/\";\n  //             const requestOptions = {\n  //                 method: 'POST',\n  //                 headers: { 'Content-Type': 'application/json',\n  //                             'accept': 'application/json'            \n  //                 },\n  //                 body: JSON.stringify({ plan: {modules: modules},\n  //                                        tag: props.ruleTag\n  //                                     })\n  //             };\n  //             setIsLoading(true);\n  //             const response = await fetch(link, requestOptions);\n  //             const status = await response.json();\n  //             if(!response.ok) {\n  //                 throw new Error(\"An error has occurred\")\n  //             } else {\n  //                 setIsRuleFulfilled(status);\n  //                 setIsLoading(false);\n  //                 setIsBackendCalled(true);\n  //             }\n  //         } catch(error) {\n  //                       setIsLoading(false);\n  //                       console.error('There was an error!', error);\n  //                     };\n  //     };\n  //     if(props.modplan.callBackendNow) {\n  //             callBackendFunc(props.ruleTag);\n  //             props.setCallBackendNow(false);\n  //     } \n  // }, [props.modplan.callBackendNow]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    onClick: () => setIsOpen(!isOpen),\n    style: {\n      color: isBackendCalled ? isRuleFulfilled ? 'green' : 'red' : 'black',\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, props.ruleName), isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    variant: \"success\",\n    role: \"status\",\n    as: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"Loading...\")), /*#__PURE__*/React.createElement(Card.Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 14\n    }\n  }, props.ruleDesc));\n}\n\nSubrules.propTypes = {\n  setCallBackendNow: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  setCallBackendNow\n})(Subrules);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/Subrules.jsx"],"names":["React","useState","useEffect","Card","Spinner","PropTypes","connect","setCallBackendNow","Subrules","props","isOpen","setIsOpen","modules","modplan","selectedModules","map","object","moduleCode","color","isBackendCalled","isRuleFulfilled","cursor","ruleName","isLoading","ruleDesc","propTypes","func","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,iBAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMW,OAAO,GAAGH,KAAK,CAACI,OAAN,CAAcC,eAAd,GAAgCL,KAAK,CAACI,OAAN,CAAcC,eAAd,CAA8BC,GAA9B,CAAmCC,MAAD,IAAYA,MAAM,CAACC,UAArD,CAAhC,GAAmG,IAAnH,CALqB,CAOrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,OAAO,EAAE,MAAMN,SAAS,CAAC,CAACD,MAAF,CAApC;AACY,IAAA,KAAK,EAAE;AAACQ,MAAAA,KAAK,EAAEC,eAAe,GAAIC,eAAe,GAAG,OAAH,GAAa,KAAhC,GAAyC,OAAhE;AAAyEC,MAAAA,MAAM,EAAE;AAAjF,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACiHZ,KAAK,CAACa,QADvH,CADJ,EAGKC,SAAS,iBAAI,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAC,SAApC;AAA8C,IAAA,IAAI,EAAC,QAAnD;AAA4D,IAAA,EAAE,EAAC,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACV;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADU,CAHlB,eAMK,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBd,KAAK,CAACe,QAAtB,CANL,CADJ;AAYH;;AAEDhB,QAAQ,CAACiB,SAAT,GAAqB;AACjBlB,EAAAA,iBAAiB,EAAEF,SAAS,CAACqB,IAAV,CAAeC,UADjB;AAEjBd,EAAAA,OAAO,EAAER,SAAS,CAACW,MAAV,CAAiBW;AAFT,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BhB,EAAAA,OAAO,EAAEgB,KAAK,CAAChB;AADe,CAAL,CAA7B;;AAIA,eAAeP,OAAO,CAACsB,eAAD,EAAkB;AAAErB,EAAAA;AAAF,CAAlB,CAAP,CAAiDC,QAAjD,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card, Spinner } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setCallBackendNow } from \"../../actions/modplanActions\";\n\nfunction Subrules(props) {\n    // const [isLoading, setIsLoading] = useState(false);\n    // const [isRuleFulfilled, setIsRuleFulfilled] = useState();\n    // const [isBackendCalled, setIsBackendCalled] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const modules = props.modplan.selectedModules ? props.modplan.selectedModules.map((object) => object.moduleCode) : null;\n\n    // useEffect(() => {\n    //     const callBackendFunc = async (ruleTag) => {\n    //         try{\n    //             const link = \"https://modtree-api.netlify.app/.netlify/functions/eval/\";\n    //             const requestOptions = {\n    //                 method: 'POST',\n    //                 headers: { 'Content-Type': 'application/json',\n    //                             'accept': 'application/json'            \n    //                 },\n    //                 body: JSON.stringify({ plan: {modules: modules},\n    //                                        tag: props.ruleTag\n    //                                     })\n    //             };\n    //             setIsLoading(true);\n                \n                \n    //             const response = await fetch(link, requestOptions);\n    //             const status = await response.json();\n\n    //             if(!response.ok) {\n    //                 throw new Error(\"An error has occurred\")\n    //             } else {\n    //                 setIsRuleFulfilled(status);\n    //                 setIsLoading(false);\n    //                 setIsBackendCalled(true);\n    //             }\n\n    //         } catch(error) {\n    //                       setIsLoading(false);\n    //                       console.error('There was an error!', error);\n    //                     };\n    //     };\n\n    //     if(props.modplan.callBackendNow) {\n    //             callBackendFunc(props.ruleTag);\n    //             props.setCallBackendNow(false);\n    //     } \n        \n    // }, [props.modplan.callBackendNow]);\n\n    return (    \n        <div>\n            <Card.Title onClick={() => setIsOpen(!isOpen)}\n                        style={{color: isBackendCalled ? (isRuleFulfilled ? 'green' : 'red') : 'black', cursor: 'pointer'}}>{props.ruleName}</Card.Title>\n            {isLoading && <Spinner animation=\"border\" variant=\"success\" role=\"status\" as=\"span\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>}\n            {<Card.Subtitle>{props.ruleDesc}</Card.Subtitle>}\n            \n        </div>\n    )\n\n}\n\nSubrules.propTypes = {\n    setCallBackendNow: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, { setCallBackendNow }) (Subrules);"]},"metadata":{},"sourceType":"module"}