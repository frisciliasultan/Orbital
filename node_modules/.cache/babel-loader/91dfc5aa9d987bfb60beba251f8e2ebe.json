{"ast":null,"code":"const parseMod = require('./parseMod');\n\nconst assert = require('assert');\n/*Accepts an array of module codes and multiple query objects. If different\nquery objects return different lists, the lists will be recombined to form\n*/\n\n\nfunction filterMods(modules, ...queries) {\n  //Helper function to filter by attribute\n  function checkFor(moduleCode, attribute, acceptedVals) {\n    key = parseMod(moduleCode)[attribute];\n    assert(key !== undefined);\n    return acceptedVals.includes(key);\n  } //Helper function to create one array of filtered mods based on a query\n\n\n  function helper(array, params) {\n    let modList = array;\n\n    if (params.prefix !== undefined) {\n      const allowed = Array.isArray(params.prefix) ? params.prefix : [params.prefix];\n      modList = modList.filter(mod => checkFor(mod, 'prefix', allowed));\n    }\n\n    if (params.notPrefix !== undefined) {\n      const allowed = Array.isArray(params.notPrefix) ? params.notPrefix : [params.notPrefix];\n      modList = modList.filter(mod => !checkFor(mod, 'prefix', allowed));\n    }\n\n    if (params.level !== undefined) {\n      const allowed = (Array.isArray(params.level) ? params.level : [params.level]).map(item => item.toString());\n      modList = modList.filter(mod => checkFor(mod, 'level', allowed));\n    }\n\n    if (params.notLevel !== undefined) {\n      const allowed = (Array.isArray(params.notLevel) ? params.notLevel : [params.notLevel]).map(item => item.toString());\n      modList = modList.filter(mod => !checkFor(mod, 'level', allowed));\n    }\n\n    if (params.type !== undefined) {\n      const allowed = (Array.isArray(params.type) ? params.type : [params.type]).map(item => item.toString());\n      modList = modList.filter(mod => checkFor(mod, 'type', allowed));\n    }\n\n    if (params.notType !== undefined) {\n      const allowed = (Array.isArray(params.notType) ? params.notType : [params.notType]).map(item => item.toString());\n      modList = modList.filter(mod => !checkFor(mod, 'type', allowed));\n    }\n\n    if (params.block !== undefined) {\n      const blocked = params.block;\n      modList = modList.filter(mod => !blocked.includes(mod));\n    }\n\n    if (params.allow !== undefined) {\n      const allowed = params.allow;\n      const exception = modules.filter(mod => allowed.includes(mod));\n\n      for (i = 0; i < exception.length; i++) {\n        if (!modList.includes(exception[i])) {\n          modList.push(exception[i]);\n        }\n      }\n    }\n\n    return modList;\n  }\n\n  var output = [];\n\n  for (i = 0; i < queries.length; i++) {\n    const aList = helper(modules, queries[i]);\n\n    for (j = 0; j < aList.length; j++) {\n      if (!output.includes(aList[j])) {\n        output.push(aList[j]);\n      }\n    }\n  }\n\n  return output;\n}\n\nconst options = {\n  allow: 'CS1101S'\n};\nconst options2 = {\n  level: ['BS1234', 'ACC1701X']\n};\nmodule.exports = filterMods;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/backend_utils/filterMods.js"],"names":["parseMod","require","assert","filterMods","modules","queries","checkFor","moduleCode","attribute","acceptedVals","key","undefined","includes","helper","array","params","modList","prefix","allowed","Array","isArray","filter","mod","notPrefix","level","map","item","toString","notLevel","type","notType","block","blocked","allow","exception","i","length","push","output","aList","j","options","options2","module","exports"],"mappings":"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","sourcesContent":["const parseMod = require('./parseMod');\nconst assert = require('assert');\n\n/*Accepts an array of module codes and multiple query objects. If different\nquery objects return different lists, the lists will be recombined to form\n*/\nfunction filterMods (modules, ...queries) {\n\n  //Helper function to filter by attribute\n  function checkFor (moduleCode, attribute, acceptedVals) {\n    key = parseMod(moduleCode)[attribute];\n    assert(key !== undefined);\n    return acceptedVals.includes(key);    \n  }\n\n  //Helper function to create one array of filtered mods based on a query\n  function helper (array, params) {\n    let modList = array;\n\n    if (params.prefix !== undefined) {\n      const allowed = Array.isArray(params.prefix)\n      ? params.prefix\n      : [params.prefix];\n      modList = modList.filter(mod => checkFor(mod, 'prefix', allowed));\n    }\n  \n    if (params.notPrefix !== undefined) {\n      const allowed = Array.isArray(params.notPrefix)\n        ? params.notPrefix\n        : [params.notPrefix];\n      modList = modList.filter(mod => !checkFor(mod, 'prefix', allowed));\n    }\n  \n    if (params.level !== undefined) {\n      const allowed = (Array.isArray(params.level)\n        ? params.level\n        : [params.level]).map(item => item.toString());\n      modList = modList.filter(mod => checkFor(mod, 'level', allowed));\n    }\n  \n    if (params.notLevel !== undefined) {\n      const allowed = (Array.isArray(params.notLevel)\n        ? params.notLevel\n        : [params.notLevel]).map(item => item.toString());\n      modList = modList.filter(mod => !checkFor(mod, 'level', allowed));\n    }\n  \n    if (params.type !== undefined) {\n      const allowed = (Array.isArray(params.type)\n        ? params.type\n        : [params.type]).map(item => item.toString());\n      modList = modList.filter(mod => checkFor(mod, 'type', allowed));\n    }\n  \n    if (params.notType !== undefined) {\n      const allowed = (Array.isArray(params.notType)\n        ? params.notType\n        : [params.notType]).map(item => item.toString());\n      modList = modList.filter(mod => !checkFor(mod, 'type', allowed));\n    }\n  \n    if (params.block !== undefined) {\n      const blocked = params.block;\n      modList = modList.filter(mod => !blocked.includes(mod));\n    }\n  \n    if (params.allow !== undefined) {\n      const allowed = params.allow;\n      const exception = modules.filter(mod => allowed.includes(mod));\n      for(i = 0; i < exception.length; i++) {\n        if ( !modList.includes(exception[i]) ) {\n          modList.push(exception[i]);\n        }\n      }\n    }\n\n    return modList;\n  }\n\n  var output = [];\n  for (i = 0; i < queries.length; i++){\n    const aList = helper(modules, queries[i]);\n\n    for(j = 0; j < aList.length; j++) {\n      if ( !output.includes(aList[j]) ) {\n        output.push(aList[j]);\n      }\n    }\n  }\n  return output;\n}\n\nconst options = {\n  allow: 'CS1101S'\n}\nconst options2 = {\n  level: ['BS1234', 'ACC1701X']\n}\nmodule.exports = filterMods;"]},"metadata":{},"sourceType":"module"}