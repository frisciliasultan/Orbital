{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/AutocompleteText.jsx\";\nimport React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestions: [],\n      text: this.props.value ? this.props.value[this.props.index] : ''\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderSuggestions = this.renderSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  } //Set suggestions that match the user's input\n\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    const category = this.props.category;\n    let suggestions = [];\n    let dataPool = []; // let i = 0;\n    // let toCompare;\n\n    if (category === \"module\") {\n      dataPool = this.props.module; // toCompare = dataPool[i].moduleCode;\n    } else if (category === \"secondMajor\") {\n      this.props.facultyOptions.map(obj => {\n        //TEMPORARY UNTIL DEGREES ARE OUT\n        if (obj.undergraduate) {\n          obj.undergraduate.secondMajors.map(object => {\n            dataPool.push(object);\n          });\n        }\n      }); // toCompare = dataPool[i].name;\n    } else if (category === \"minor\") {\n      this.props.facultyOptions.map(obj => {\n        //TEMPORARY UNTIL DEGREES ARE OUT\n        if (obj.undergraduate) {\n          obj.undergraduate.minors.map(object => {\n            dataPool.push(object);\n          });\n        }\n      }); // toCompare = dataPool[i].name;\n    }\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n      let toCompare;\n\n      for (let i = 0; i < dataPool.length; i++) {\n        if (category === \"module\") {\n          toCompare = dataPool[i].moduleCode;\n        } else if (category === \"secondMajor\") {\n          toCompare = dataPool[i].name;\n        } else if (category === \"minor\") {\n          toCompare = dataPool[i].name;\n        }\n\n        if (regex.test(toCompare)) {\n          suggestions.push(dataPool[i]);\n        }\n      }\n    }\n\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  } //Add the clicked suggestion to modplan\n\n\n  handleListClick(object) {\n    const category = this.props.category;\n\n    if (category === \"module\") {\n      const module = { ...object\n      };\n      module.location = this.props.location;\n      module.AY = this.props.AY;\n      this.props.setSelectedModules(module, this.props.modplan.selectedModules);\n      this.suggestionsSelected('');\n      this.setState(() => ({\n        suggestions: []\n      }));\n    } else {\n      const original = this.props.value ? [...this.props.value] : [];\n      original[this.props.index] = object.fullName;\n      this.props.setUserInput({\n        [category]: original\n      });\n      this.suggestionsSelected(object.fullName);\n      this.setState(() => ({\n        suggestions: []\n      }));\n    }\n  } //Display the suggestions \n\n\n  renderSuggestions() {\n    const category = this.props.category;\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, suggestions.map(object => {\n      let toDisplay;\n\n      if (category === \"module\") {\n        toDisplay = `${object.moduleCode}: ${object.title}`;\n      } else {\n        toDisplay = object.name;\n      }\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        onClick: () => this.handleListClick(object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, toDisplay);\n    }));\n  }\n\n  suggestionsSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      className: \"autocomplete-input\",\n      id: this.props.id ? this.props.id : this.props.category,\n      value: text,\n      onChange: this.handleTextChange,\n      type: \"text\",\n      autoComplete: \"off\",\n      placeholder: this.props.category === \"module\" ? \"Enter module code\" : `Enter ${this.props.category === \"secondMajor\" ? \"Major\" : \"Minor\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nAutoCompleteText.propTypes = {\n  setSelectedModules: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan,\n  facultyOptions: state.settings.facultyOptions\n});\n\nexport default connect(mapStateToProps, {\n  setSelectedModules\n})(AutoCompleteText);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/AutocompleteText.jsx"],"names":["React","Input","PropTypes","connect","setSelectedModules","AutoCompleteText","Component","constructor","props","state","suggestions","text","value","index","handleTextChange","bind","renderSuggestions","suggestionsSelected","handleListClick","e","target","category","dataPool","module","facultyOptions","map","obj","undergraduate","secondMajors","object","push","minors","length","regex","RegExp","toCompare","i","moduleCode","name","test","setState","location","AY","modplan","selectedModules","original","fullName","setUserInput","toDisplay","title","render","id","propTypes","func","isRequired","mapStateToProps","settings"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = { suggestions: [],\n                       text: this.props.value\n                       ? this.props.value[this.props.index] \n                       : '',\n                     };\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.renderSuggestions = this.renderSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.handleListClick = this.handleListClick.bind(this);\n    }\n\n    \n\n    //Set suggestions that match the user's input\n    handleTextChange (e) {\n        const value = e.target.value;\n        const category = this.props.category;\n        let suggestions = [];\n        let dataPool = [];\n        // let i = 0;\n        // let toCompare;\n\n        if(category === \"module\") {\n            dataPool = this.props.module;\n            // toCompare = dataPool[i].moduleCode;\n        } else if (category === \"secondMajor\") {\n            this.props.facultyOptions.map((obj) => {\n                //TEMPORARY UNTIL DEGREES ARE OUT\n                if(obj.undergraduate) {\n                    obj.undergraduate.secondMajors.map((object) => {\n                        dataPool.push(object);\n                    });\n                } \n            });\n            // toCompare = dataPool[i].name;\n        } else if (category === \"minor\") {\n            this.props.facultyOptions.map((obj) => {\n                //TEMPORARY UNTIL DEGREES ARE OUT\n                if(obj.undergraduate) {\n                    obj.undergraduate.minors.map((object) => {\n                        dataPool.push(object);\n                    });\n                } \n            });\n            // toCompare = dataPool[i].name;\n        }\n\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            let toCompare;\n            for(let i = 0; i < dataPool.length; i++) {\n                if(category === \"module\") {\n                    toCompare = dataPool[i].moduleCode;\n                } else if(category === \"secondMajor\") {\n                    toCompare = dataPool[i].name;\n                } else if (category === \"minor\") {\n                    toCompare = dataPool[i].name;\n                }\n\n                if(regex.test(toCompare)) {\n                    suggestions.push(dataPool[i]);\n                }\n                \n            }\n\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    //Add the clicked suggestion to modplan\n    handleListClick(object) {\n        const category = this.props.category;\n\n        if(category === \"module\") {\n            const module = {...object};\n            module.location = this.props.location;\n            module.AY = this.props.AY\n            this.props.setSelectedModules(module, this.props.modplan.selectedModules)\n            this.suggestionsSelected('');\n            this.setState(() => ({suggestions: []})) \n        } else {\n            const original = this.props.value ? [...this.props.value] : [];\n            original[this.props.index] = object.fullName;\n            this.props.setUserInput({[category]: original});\n            this.suggestionsSelected(object.fullName);\n            this.setState(() => ({suggestions: []})) \n        }\n    }\n\n    //Display the suggestions \n    renderSuggestions () {\n        const category = this.props.category;\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        return (\n            <ul>\n                {suggestions.map((object) => {\n                    let toDisplay;\n                    if(category === \"module\") {\n                        toDisplay = `${object.moduleCode}: ${object.title}`;\n                    } else {\n                        toDisplay = object.name;\n                    }\n\n                    return (\n                        <li onClick={() => this.handleListClick(object)}>\n                            {toDisplay}\n                        </li>\n                    )\n                })}\n            </ul>   \n        );\n    }\n\n    suggestionsSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    render () {\n        const { text } = this.state;\n        return (\n            \n                <div className=\"AutoCompleteText\" >\n                    <Input \n                        className=\"autocomplete-input\" id={this.props.id ? this.props.id : this.props.category}\n                        value={text}\n                        onChange={this.handleTextChange}\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        placeholder={this.props.category === \"module\" \n                            ? \"Enter module code\" \n                            : `Enter ${this.props.category === \"secondMajor\" ? \"Major\" : \"Minor\"}`}/>\n                    {this.renderSuggestions()}\n                \n                </div>\n\n        )\n    }\n}\n\nAutoCompleteText.propTypes = {\n    setSelectedModules: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan,\n    facultyOptions: state.settings.facultyOptions\n});\n\nexport default connect(mapStateToProps, { setSelectedModules })(AutoCompleteText);"]},"metadata":{},"sourceType":"module"}