{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/AutocompleteText.jsx\";\nimport React from 'react';\nimport \"./AutocompleteText.css\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestions: [],\n      text: ''\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderSuggestions = this.renderSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.handleListClick = this.handleListClick.bind(this);\n  } //Set suggestions that match the user's input\n\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    let suggestions = [];\n    const dataPool = this.props.module;\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n\n      for (let i = 0; i < dataPool.length; i++) {\n        const moduleCode = dataPool[i].moduleCode;\n\n        if (regex.test(moduleCode)) {\n          suggestions.push(dataPool[i]);\n        }\n      }\n    }\n\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  } //Add the clicked suggestion to modplan\n\n\n  handleListClick(object) {\n    const module = { ...object\n    };\n    module.location = this.props.location;\n    module.AY = this.props.AY;\n    this.props.setSelectedModules(module, this.props.modplan.selectedModules);\n    this.setState(() => ({\n      suggestions: []\n    }));\n  } //Display the suggestions \n\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, suggestions.map(object => /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.handleListClick(object),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 46\n      }\n    }, `${object.moduleCode}: ${object.title}`)));\n  }\n\n  suggestionsSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"autocomplete-input\",\n      value: text,\n      onChange: this.handleTextChange,\n      type: \"text\",\n      placeholder: \"Enter module code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nAutoCompleteText.propTypes = {\n  setSelectedModules: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  setSelectedModules\n})(AutoCompleteText);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/AutocompleteText.jsx"],"names":["React","PropTypes","connect","setSelectedModules","AutoCompleteText","Component","constructor","props","state","suggestions","text","handleTextChange","bind","renderSuggestions","suggestionsSelected","handleListClick","e","value","target","dataPool","module","length","regex","RegExp","i","moduleCode","test","push","setState","object","location","AY","modplan","selectedModules","map","title","render","propTypes","func","isRequired","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"./AutocompleteText.css\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = { suggestions: [],\n                       text: '',\n\n                     };\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.renderSuggestions = this.renderSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.handleListClick = this.handleListClick.bind(this);\n    }\n\n    //Set suggestions that match the user's input\n    handleTextChange (e) {\n        const value = e.target.value;\n        let suggestions = [];\n        const dataPool = this.props.module;\n        \n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n\n            for(let i = 0; i < dataPool.length; i++) {\n                const moduleCode = dataPool[i].moduleCode\n                if(regex.test(moduleCode)) {\n                    suggestions.push(dataPool[i]);\n                }\n            }\n\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    //Add the clicked suggestion to modplan\n    handleListClick(object) {\n        const module = {...object};\n        module.location = this.props.location;\n        module.AY = this.props.AY\n        this.props.setSelectedModules(module, this.props.modplan.selectedModules)\n        this.setState(() => ({suggestions: []})) \n    }\n\n    //Display the suggestions \n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n        return (\n            <ul>\n                {suggestions.map((object) => <li onClick={() => this.handleListClick(object)}>{`${object.moduleCode}: ${object.title}`}</li>)}\n            </ul>\n        );\n\n    }\n\n    suggestionsSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    render () {\n        const { text } = this.state;\n        return (\n\n                <div className=\"AutoCompleteText\">\n                    <input \n                        className=\"autocomplete-input\"\n                        value={text}\n                        onChange={this.handleTextChange}\n                        type=\"text\"\n                        placeholder=\"Enter module code\" />\n                    {this.renderSuggestions()}\n                \n                </div>\n\n        )\n    }\n}\n\nAutoCompleteText.propTypes = {\n    setSelectedModules: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, { setSelectedModules })(AutoCompleteText);"]},"metadata":{},"sourceType":"module"}