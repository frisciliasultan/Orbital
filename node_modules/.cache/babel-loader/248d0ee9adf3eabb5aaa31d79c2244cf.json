{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Selection Page/ModuleSelectionPage.jsx\";\nimport React, { useEffect } from \"react\";\nimport { Dropdown } from './Dropdown';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport isEmpty from \"is-empty\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\nimport { generateObject } from \"../../utils/commonFunctions\";\nimport { setFirstRender } from \"../../actions/settingsActions\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nlet totalGEMMCs = 0;\nexport const ModuleSelectionPage = props => {\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules) && props.settings.firstRender) {\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n      props.setFirstRender(false);\n    }\n  }, [props.settings.userInfo]);\n\n  const handleClick = (code, name, MCs, moduleCat) => {\n    const title = code + ': ' + name;\n    this.setState({\n      GEMTitle: title,\n      MCTemp: MCs,\n      moduleCat: moduleCat\n    });\n  };\n\n  const countModule = () => {\n    const GEMs = this.state.totalGEMMCs;\n    const coreModules = this.state.dummymodules[1].coreModules.reduce((currentTotal, next) => {\n      return currentTotal + next.MCs;\n    }, 0);\n    const specialisationModules = this.state.dummymodules[2].specialisationModules.reduce((currentTotal, next) => {\n      return currentTotal + next.MCs;\n    }, 0);\n    const unrestrictedModules = this.state.dummymodules[3].unrestrictedModules.reduce((currentTotal, next) => {\n      return currentTotal + next.MCs;\n    }, 0);\n    const grandTotal = GEMs + coreModules + specialisationModules + unrestrictedModules;\n    this.setState({\n      summary: [{\n        cat: \"General Elective Module\",\n        MCs: GEMs\n      }, {\n        cat: \"Core Module\",\n        MCs: coreModules\n      }, {\n        cat: \"Specialisation Module\",\n        MCs: specialisationModules\n      }, {\n        cat: \"Unrestricted Module\",\n        MCs: unrestrictedModules\n      }],\n      grandTotal: grandTotal\n    });\n  }; // takes in array of objects for modules and return a table\n\n\n  return isEmpty(props.settings.userInfo) || isEmpty(props.settings.userInfo.matriculationYear) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"module-planner-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }\n  }, \"Module Information\")), generateObject(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear, \"tables\", props.modplan.selectedModules));\n};\nModuleSelectionPage.propTypes = {\n  setSelectedModules: PropTypes.func.isRequired,\n  setFirstRender: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan,\n  settings: state.settings\n});\n\nexport default connect(mapStateToProps, {\n  setSelectedModules,\n  setFirstRender\n})(ModuleSelectionPage);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Selection Page/ModuleSelectionPage.jsx"],"names":["React","useEffect","Dropdown","PropTypes","connect","isEmpty","setSelectedModules","generateObject","setFirstRender","LoadingDots","totalGEMMCs","ModuleSelectionPage","props","settings","userInfo","modPlan","modplan","selectedModules","firstRender","handleClick","code","name","MCs","moduleCat","title","setState","GEMTitle","MCTemp","countModule","GEMs","state","coreModules","dummymodules","reduce","currentTotal","next","specialisationModules","unrestrictedModules","grandTotal","summary","cat","matriculationYear","targetGradYear","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Dropdown } from './Dropdown';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport isEmpty from \"is-empty\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\nimport { generateObject } from \"../../utils/commonFunctions\";\nimport { setFirstRender } from \"../../actions/settingsActions\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\n\nlet totalGEMMCs = 0;\n\nexport const ModuleSelectionPage = (props) => {\n  useEffect(() => {\n    if(!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)\n        && props.settings.firstRender) {\n        props.setSelectedModules(null, props.settings.userInfo.modPlan);\n        props.setFirstRender(false);\n    }\n  }, [props.settings.userInfo])\n    \n  const handleClick = (code, name, MCs, moduleCat) => {\n        const title = code + ': ' + name;\n        this.setState({GEMTitle: title,\n                       MCTemp: MCs,\n                        moduleCat: moduleCat});\n      }\n    \n  const countModule = () => {\n        const GEMs = this.state.totalGEMMCs;\n        const coreModules = this.state.dummymodules[1].coreModules.reduce((currentTotal, next) => {\n          return currentTotal + next.MCs} , 0);\n        const specialisationModules = this.state.dummymodules[2].specialisationModules.reduce((currentTotal, next) => {\n          return currentTotal + next.MCs} , 0);\n        const unrestrictedModules = this.state.dummymodules[3].unrestrictedModules.reduce((currentTotal, next) => {\n          return currentTotal + next.MCs} , 0);\n        const grandTotal = GEMs + coreModules + specialisationModules + unrestrictedModules;\n          this.setState({summary: [{cat: \"General Elective Module\",\n                                   MCs: GEMs},\n                                  {cat: \"Core Module\",\n                                   MCs: coreModules},\n                                  {cat: \"Specialisation Module\",\n                                   MCs: specialisationModules},\n                                  {cat: \"Unrestricted Module\",\n                                   MCs: unrestrictedModules}],\n                        grandTotal: grandTotal\n                                  });\n          \n        }\n    \n      // takes in array of objects for modules and return a table\n  \n\n  return (\n    isEmpty(props.settings.userInfo) || isEmpty(props.settings.userInfo.matriculationYear) \n            ? <LoadingDots/>\n            : (\n                <div className=\"full-container\">\n                  <div className=\"page-title\">\n                      <h3 id=\"module-planner-title\">Module Information</h3>\n                  </div>\n                  {generateObject(props.settings.userInfo.matriculationYear, \n                              props.settings.userInfo.targetGradYear,\n                              \"tables\", props.modplan.selectedModules)}\n                </div>)\n  )\n}\n\nModuleSelectionPage.propTypes = {\n  setSelectedModules: PropTypes.func.isRequired,\n  setFirstRender: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan,\n  settings: state.settings\n});\n\nexport default connect(mapStateToProps, { setSelectedModules, setFirstRender }) (ModuleSelectionPage);"]},"metadata":{},"sourceType":"module"}