{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/ModulePlannerPage.jsx\";\nimport React from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow } from '../../actions/modplanActions';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty';\n\nclass ModulePlannerPageTemp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedModules: null,\n      callBackendNow: false,\n      rules: []\n    }; // this.updateSelectedModules = this.updateSelectedModules.bind(this);\n    // this.updateModuleLocation = this.updateModuleLocation.bind(this);\n    // this.updateCallBackendNow = this.updateCallBackendNow.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.callBackendAPI('Rules');\n    this.props.callBackendAPI('NUSMods');\n  } // updateSelectedModules(object) {\n  //     let newSelectedModules = this.state.selectedModules ? this.state.selectedModules : [];\n  //     let unique = true;\n  //     let indexOfDuplicate;\n  //     for(let i = 0; i < newSelectedModules.length; i++) {\n  //         if(newSelectedModules[i].moduleCode === object.moduleCode) {\n  //             unique = false;\n  //             indexOfDuplicate = i;\n  //         }\n  //     }\n  //      if (!newSelectedModules.includes(object) && unique) {\n  //          if(unique) {\n  //             newSelectedModules.push(object);\n  //          } else {\n  //             newSelectedModules.splice(indexOfDuplicate, 1);\n  //             newSelectedModules.push(object);           \n  //          }\n  //          this.setState({selectedModules: newSelectedModules});\n  //     }\n  //      console.log(this.state.selectedModules);\n  //  }\n  //  updateModuleLocation(item, location) {\n  //      let changedModule;\n  //      if(!location) {\n  //          changedModule = this.state.selectedModules.filter((object) => object.moduleCode !== item.id);\n  //      } else {\n  //         const moduleToChange = this.state.selectedModules.filter((object) => object.moduleCode === item.id);\n  //         moduleToChange[0].location =  location;\n  //         changedModule = this.state.selectedModules.filter((object) => object.moduleCode !== item.id).concat(moduleToChange[0])\n  //      }\n  //      this.setState({selectedModules: changedModule});\n  //     console.log(changedModule);\n  // }\n  // updateCallBackendNow() {\n  //     // this.setState({callBackendNow: false});\n  //     this.props.setCallBackendNow(false);\n  // }\n\n\n  handleEvalButtonClick() {\n    const modules = this.props.modplan.selectedModules;\n    console.log(modules);\n\n    if (isEmpty(modules)) {\n      alert('Please add modules before evaluating');\n    } else {\n      this.props.setCallBackendNow(true);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(DndProvider, {\n      backend: Backend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-module-planner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(YearDisplay, {\n      year: \"Year 1\",\n      updateSelectedModules: this.updateSelectedModules,\n      selectedModules: this.state.selectedModules,\n      updateModuleLocation: this.updateModuleLocation,\n      module: this.state.module,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(YearDisplay, {\n      year: \"Year 2\",\n      updateSelectedModules: this.updateSelectedModules,\n      selectedModules: this.state.selectedModules,\n      updateModuleLocation: this.updateModuleLocation,\n      module: this.state.module,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(YearDisplay, {\n      year: \"Year 3\",\n      updateSelectedModules: this.updateSelectedModules,\n      selectedModules: this.state.selectedModules,\n      updateModuleLocation: this.updateModuleLocation,\n      module: this.state.module,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(YearDisplay, {\n      year: \"Year 4\",\n      updateSelectedModules: this.updateSelectedModules,\n      selectedModules: this.state.selectedModules,\n      updateModuleLocation: this.updateModuleLocation,\n      module: this.state.module,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TrashBox, {\n      updateModuleLocation: this.updateModuleLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: \"button\",\n      id: \"eval-button\",\n      onClick: () => this.handleEvalButtonClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, \"Evaluate\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"button\",\n      onClick: () => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Rules, {\n      rules: this.state.rules,\n      callBackendNow: this.state.callBackendNow,\n      selectedModules: this.state.selectedModules,\n      updateCallBackendNow: this.updateCallBackendNow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nModulePlannerPageTemp.propTypes = {\n  callBackendAPI: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  callBackendAPI,\n  setCallBackendNow\n})(ModulePlannerPageTemp);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/ModulePlannerPage.jsx"],"names":["React","Board","Rules","TrashBox","YearDisplay","Button","Card","HTML5Backend","Backend","DndProvider","connect","callBackendAPI","setCallBackendNow","PropTypes","isEmpty","ModulePlannerPageTemp","Component","constructor","props","state","selectedModules","callBackendNow","rules","componentDidMount","handleEvalButtonClick","modules","modplan","console","log","alert","render","updateSelectedModules","updateModuleLocation","module","updateCallBackendNow","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow } from '../../actions/modplanActions';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty'\n\n\nclass ModulePlannerPageTemp extends React.Component {\n   constructor(props) {\n       super(props);\n       this.state = {   selectedModules: null,\n                        callBackendNow: false,\n                        rules: []\n        }\n        // this.updateSelectedModules = this.updateSelectedModules.bind(this);\n        // this.updateModuleLocation = this.updateModuleLocation.bind(this);\n        // this.updateCallBackendNow = this.updateCallBackendNow.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.props.callBackendAPI('Rules');\n        this.props.callBackendAPI('NUSMods');\n    }\n    \n    // updateSelectedModules(object) {\n    //     let newSelectedModules = this.state.selectedModules ? this.state.selectedModules : [];\n    //     let unique = true;\n    //     let indexOfDuplicate;\n        \n    //     for(let i = 0; i < newSelectedModules.length; i++) {\n    //         if(newSelectedModules[i].moduleCode === object.moduleCode) {\n    //             unique = false;\n    //             indexOfDuplicate = i;\n    //         }\n    //     }\n\n    //      if (!newSelectedModules.includes(object) && unique) {\n    //          if(unique) {\n    //             newSelectedModules.push(object);\n                \n    //          } else {\n    //             newSelectedModules.splice(indexOfDuplicate, 1);\n    //             newSelectedModules.push(object);           \n    //          }\n    //          this.setState({selectedModules: newSelectedModules});\n    //     }\n         \n    //      console.log(this.state.selectedModules);\n    //  }\n    \n    //  updateModuleLocation(item, location) {\n    //      let changedModule;\n    //      if(!location) {\n    //          changedModule = this.state.selectedModules.filter((object) => object.moduleCode !== item.id);\n    //      } else {\n    //         const moduleToChange = this.state.selectedModules.filter((object) => object.moduleCode === item.id);\n    //         moduleToChange[0].location =  location;\n    //         changedModule = this.state.selectedModules.filter((object) => object.moduleCode !== item.id).concat(moduleToChange[0])\n    //      }\n    //      this.setState({selectedModules: changedModule});\n    //     console.log(changedModule);\n    // }\n    \n    // updateCallBackendNow() {\n    //     // this.setState({callBackendNow: false});\n    //     this.props.setCallBackendNow(false);\n    // }\n\n    handleEvalButtonClick() {\n        const modules = this.props.modplan.selectedModules;\n        console.log(modules);\n        if (isEmpty(modules)) {\n            alert('Please add modules before evaluating');\n        } else {\n            this.props.setCallBackendNow(true);\n        }\n    }\n    \n    render () {\n        return (\n            <DndProvider backend={Backend} >\n                <div className=\"container-module-planner\">\n                    <YearDisplay\n                            year=\"Year 1\"\n                            updateSelectedModules={this.updateSelectedModules}\n                            selectedModules={this.state.selectedModules}\n                            updateModuleLocation={this.updateModuleLocation}\n                            module={this.state.module} />\n\n                    <YearDisplay\n                            year=\"Year 2\"\n                            updateSelectedModules={this.updateSelectedModules}\n                            selectedModules={this.state.selectedModules}\n                            updateModuleLocation={this.updateModuleLocation}\n                            module={this.state.module} /> \n\n                    <YearDisplay\n                            year=\"Year 3\"\n                            updateSelectedModules={this.updateSelectedModules}\n                            selectedModules={this.state.selectedModules}\n                            updateModuleLocation={this.updateModuleLocation}\n                            module={this.state.module} />\n\n                    <YearDisplay\n                            year=\"Year 4\"\n                            updateSelectedModules={this.updateSelectedModules}\n                            selectedModules={this.state.selectedModules}\n                            updateModuleLocation={this.updateModuleLocation}\n                            module={this.state.module} /> \n                    \n                    <TrashBox\n                            updateModuleLocation={this.updateModuleLocation}/>\n\n\n                    <br/>\n\n                    <Button className=\"button\" id=\"eval-button\" onClick={() => this.handleEvalButtonClick()}>Evaluate</Button>\n                    <Button className=\"button\" onClick={() => {}}>Save</Button>\n                    <br/>\n                    <br/>\n                    <Card>\n                        <Rules\n                            rules={this.state.rules}\n                            callBackendNow={this.state.callBackendNow}\n                            selectedModules={this.state.selectedModules}\n                            updateCallBackendNow={this.updateCallBackendNow}/>\n                    </Card>\n                    <br/>\n                </div>\n           </DndProvider>\n        )\n    }\n}\n\nModulePlannerPageTemp.propTypes = {\n    callBackendAPI: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, { callBackendAPI, setCallBackendNow }) (ModulePlannerPageTemp);\n"]},"metadata":{},"sourceType":"module"}