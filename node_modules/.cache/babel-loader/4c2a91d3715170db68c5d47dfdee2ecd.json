{"ast":null,"code":"import axios from 'axios';\nimport { SET_BOARD_FILLED, SET_MODULES, SET_RULES, SET_CALL_BACKEND_NOW, SET_SELECTED_MODULES, SET_MODULE_LOCATION, SET_CURRRENT_SEMESTER, CLEAN_UP_MODPLAN } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nexport const setIsBoardFilled = () => {\n  return {\n    type: SET_BOARD_FILLED\n  };\n};\nexport const callBackendAPI = backend => dispatch => {\n  if (backend === 'NUSMods') {\n    setAuthToken(false);\n    axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json').then(res => dispatch(setModules(res.data))).then(setAuthToken(localStorage.jwtToken)).catch(err => {\n      console.log(err);\n    });\n  } else {\n    axios.get('https://modtree-api.netlify.app/.netlify/functions/user/directory').then(res => {\n      return res.data.list.map(async ruleTag => {\n        const ruleData = await axios.get('https://modtree-api.netlify.app/.netlify/functions/rules/assemble/' + ruleTag);\n\n        if (ruleData.status !== 200) {\n          throw Error(ruleData.message);\n        }\n\n        return ruleData;\n      });\n    }).then(res => {\n      res.map(item => {\n        console.log(item);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n}; //AXIOS CALL BUT IT DOESNT WORK -- FOR FUTURE REFERENCE\n// export const callBackendAPI = () => dispatch => {\n//     const headers = { headers: {'accept': 'application/json'}}\n//     axios.all([\n//         axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json', headers),\n//         axios.get('http://172.19.162.53:3000/rules/r_cs_degree')\n//     ])\n//     .then(resArr => {\n//         dispatch(setModules(resArr[0]));\n//         dispatch(setRules(resArr[1].data));\n//     }) \n//     .catch(err => {\n//         console.log(err)\n//     });\n// }\n\nexport const setModules = modules => {\n  return {\n    type: SET_MODULES,\n    payload: modules\n  };\n};\nexport const setRules = rules => {\n  return {\n    type: SET_RULES,\n    payload: rules\n  };\n};\nexport const setCallBackendNow = status => {\n  return {\n    type: SET_CALL_BACKEND_NOW,\n    payload: status\n  };\n};\nexport const setSelectedModules = (object, selectedModules) => {\n  return {\n    type: SET_SELECTED_MODULES,\n    moduleAdded: object,\n    currentSelectedModules: selectedModules\n  };\n};\nexport const setModuleLocation = (item, location, AY, selectedModules) => {\n  return {\n    type: SET_MODULE_LOCATION,\n    item,\n    location,\n    AY,\n    modules: selectedModules\n  };\n};\nexport const setCurrentSemester = (AY, semester) => {\n  return {\n    type: SET_CURRRENT_SEMESTER,\n    AY,\n    semester\n  };\n};\nexport const cleanUpModPlan = () => {\n  return {\n    type: CLEAN_UP_MODPLAN\n  };\n};","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/actions/modplanActions.js"],"names":["axios","SET_BOARD_FILLED","SET_MODULES","SET_RULES","SET_CALL_BACKEND_NOW","SET_SELECTED_MODULES","SET_MODULE_LOCATION","SET_CURRRENT_SEMESTER","CLEAN_UP_MODPLAN","setAuthToken","setIsBoardFilled","type","callBackendAPI","backend","dispatch","get","then","res","setModules","data","localStorage","jwtToken","catch","err","console","log","list","map","ruleTag","ruleData","status","Error","message","item","modules","payload","setRules","rules","setCallBackendNow","setSelectedModules","object","selectedModules","moduleAdded","currentSelectedModules","setModuleLocation","location","AY","setCurrentSemester","semester","cleanUpModPlan"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    SET_BOARD_FILLED,\n    SET_MODULES,\n    SET_RULES,\n    SET_CALL_BACKEND_NOW,\n    SET_SELECTED_MODULES,\n    SET_MODULE_LOCATION,\n    SET_CURRRENT_SEMESTER,\n    CLEAN_UP_MODPLAN\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n\n\nexport const setIsBoardFilled = () => {\n    return {\n        type: SET_BOARD_FILLED,\n    }\n}\n\nexport const callBackendAPI = (backend) => dispatch => {\n\n    if(backend === 'NUSMods') {\n        setAuthToken(false);\n\n        axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json' )\n        .then(res => dispatch(setModules(res.data)))\n        .then(setAuthToken(localStorage.jwtToken))\n        .catch(err => {\n            console.log(err)\n        });\n        \n    } else {\n        axios.get('https://modtree-api.netlify.app/.netlify/functions/user/directory')\n        .then(res => {\n            return res.data.list.map( async (ruleTag) => {\n                const ruleData = await axios.get('https://modtree-api.netlify.app/.netlify/functions/rules/assemble/' + ruleTag);\n                if(ruleData.status !== 200) {\n                    throw Error (ruleData.message);\n                }\n                return ruleData;\n        })})\n        .then(res => {res.map((item) => {console.log(item)})})\n     \n        .catch(err => {\n            console.log(err)\n        });\n    }\n    \n}\n\n//AXIOS CALL BUT IT DOESNT WORK -- FOR FUTURE REFERENCE\n// export const callBackendAPI = () => dispatch => {\n\n//     const headers = { headers: {'accept': 'application/json'}}\n//     axios.all([\n//         axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json', headers),\n//         axios.get('http://172.19.162.53:3000/rules/r_cs_degree')\n//     ])\n//     .then(resArr => {\n//         dispatch(setModules(resArr[0]));\n//         dispatch(setRules(resArr[1].data));\n//     }) \n//     .catch(err => {\n//         console.log(err)\n//     });\n// }\n\nexport const setModules = (modules) => {\n    return {\n        type: SET_MODULES,\n        payload: modules\n    }\n}\n\nexport const setRules = (rules) => {\n    return {\n        type: SET_RULES,\n        payload: rules\n    }\n}\n\nexport const setCallBackendNow = (status) => {\n    return {\n        type: SET_CALL_BACKEND_NOW,\n        payload: status\n    }\n}\n\nexport const setSelectedModules = (object, selectedModules) => {\n    return { \n        type: SET_SELECTED_MODULES,\n        moduleAdded: object,\n        currentSelectedModules: selectedModules\n    }\n}\n\nexport const setModuleLocation = (item, location, AY, selectedModules) => {\n    return { \n        type: SET_MODULE_LOCATION,\n        item,\n        location,\n        AY,\n        modules: selectedModules\n    }\n}\n\nexport const setCurrentSemester = (AY, semester) => {\n    return {\n        type: SET_CURRRENT_SEMESTER,\n        AY,\n        semester\n    }\n}\n\nexport const cleanUpModPlan = () => {\n    return { \n        type: CLEAN_UP_MODPLAN\n    }\n}"]},"metadata":{},"sourceType":"module"}