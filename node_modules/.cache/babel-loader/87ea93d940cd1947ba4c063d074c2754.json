{"ast":null,"code":"import { SET_USER_SETTINGS, SET_CURRENT_SEMESTER, SET_MATRICULATION_OPTIONS, SET_TARGET_GRAD_OPTIONS, CLEAN_UP_SETTINGS, GET_SUCCESS } from \"./types\";\nimport { setUserLoading } from \"./authActions\";\nimport axios from \"axios\";\nexport const setUserSettings = userData => {\n  return {\n    type: SET_USER_SETTINGS,\n    payload: userData\n  };\n};\nexport const initialSettings = () => dispatch => {\n  axios.defaults.timeout = 2000;\n  dispatch(setUserLoading(true));\n  axios.get('http://172.19.162.53:3000/account').then(res => {\n    dispatch(setUserSettings(res.data));\n  }).then(res => dispatch(setUserLoading(false))).catch(err => {\n    dispatch(setUserLoading(false));\n    console.log(err); // window.location.replace(\"/500-error\")\n  });\n};\nexport const updateSettings = userData => dispatch => {\n  axios.defaults.timeout = 6000;\n  axios.put(\"http://172.19.162.53:3000/account\", userData).then(res => dispatch(setUserSettings(res.data.updated))).then(res => {\n    dispatch({\n      type: GET_SUCCESS,\n      payload: \"Saved successfully!\"\n    });\n    dispatch(setUserLoading(false));\n  }).catch(err => {\n    dispatch(setUserLoading(false));\n    console.log(err); // window.location.replace(\"/500-error\")\n  });\n};\nexport const setCurrentSemester = (currentAY, currentSemester, month) => {\n  return {\n    type: SET_CURRENT_SEMESTER,\n    currentAY,\n    currentSemester,\n    month\n  };\n};\nexport const setMatriculationYearOptions = (currentAY, currentSemester) => {\n  return {\n    type: SET_MATRICULATION_OPTIONS,\n    currentAY,\n    currentSemester\n  };\n};\nexport const setTargetGradYearOptions = (AY, Semester) => {\n  return {\n    type: SET_TARGET_GRAD_OPTIONS,\n    AY,\n    Semester\n  };\n};\nexport const cleanUpSettings = () => {\n  return {\n    type: CLEAN_UP_SETTINGS\n  };\n}; //turn array of choices into options dropdown\n// export const generateOptions = (optionList, category,) {\n//     let facIndex = this.state.facIndex;\n//   if(choices === 'faculty'){\n//     return this.state.dummyfac.map((obj) => {\n//       return (\n//       <option value={Object.keys(obj)}>\n//         {Object.keys(obj)}\n//       </option>\n//       );\n//     });\n//   } else if(choices === 'major') {\n//       if(this.state.faculty) {\n//     return this.state.dummyfac\n//            [facIndex]\n//            [this.state.faculty].map((obj) => {\n//                   return (\n//                     <option value={Object.keys(obj)}>\n//                       {Object.keys(obj)}\n//                     </option>\n//                   )\n//               }\n//     )}\n//   } else if(choices === 'specialisation') {\n//       if(this.state.major && this.state.faculty) {\n//       return this.state.dummyfac\n//              [facIndex]\n//              [this.state.faculty][this.state.majorIndex][this.state.major].map((item) => {\n//                   return (\n//                     <option>\n//                       {item}\n//                     </option>\n//                   )\n//                 }    \n//       )}\n//   } else if(choices === 'residence') {\n//     return this.state.residenceOptions.map((obj) => {\n//       return (\n//       <option value={obj}>\n//         {obj}\n//       </option>\n//       );\n//     });\n//   } else {\n//       let options;\n//       if(choices === 'matriculationYear') {\n//         options = this.props.settings.matriculationOptions\n//       } else {\n//         options = this.props.settings.targetGradOptions\n//       }\n//     return options.map((option) => {\n//       return (\n//       <option value={option}>\n//         {option}\n//       </option>\n//       );\n//     });\n//   }\n// }","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/actions/settingsActions.js"],"names":["SET_USER_SETTINGS","SET_CURRENT_SEMESTER","SET_MATRICULATION_OPTIONS","SET_TARGET_GRAD_OPTIONS","CLEAN_UP_SETTINGS","GET_SUCCESS","setUserLoading","axios","setUserSettings","userData","type","payload","initialSettings","dispatch","defaults","timeout","get","then","res","data","catch","err","console","log","updateSettings","put","updated","setCurrentSemester","currentAY","currentSemester","month","setMatriculationYearOptions","setTargetGradYearOptions","AY","Semester","cleanUpSettings"],"mappings":"AAAA,SACIA,iBADJ,EAEIC,oBAFJ,EAGIC,yBAHJ,EAIIC,uBAJJ,EAKIC,iBALJ,EAMIC,WANJ,QAOO,SAPP;AAQA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAc;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEV,iBADH;AAEHW,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,eAAe,GAAG,MAAMC,QAAQ,IAAI;AAC7CN,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyB,IAAzB;AACAF,EAAAA,QAAQ,CAACP,cAAc,CAAC,IAAD,CAAf,CAAR;AACAC,EAAAA,KAAK,CACAS,GADL,CACS,mCADT,EAEKC,IAFL,CAEUC,GAAG,IAAI;AACLL,IAAAA,QAAQ,CAACL,eAAe,CAACU,GAAG,CAACC,IAAL,CAAhB,CAAR;AACH,GAJT,EAKKF,IALL,CAKUC,GAAG,IAAKL,QAAQ,CAACP,cAAc,CAAC,KAAD,CAAf,CAL1B,EAMKc,KANL,CAMWC,GAAG,IAAI;AACVR,IAAAA,QAAQ,CAACP,cAAc,CAAC,KAAD,CAAf,CAAR;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAFU,CAGV;AACH,GAVL;AAWH,CAdM;AAgBP,OAAO,MAAMG,cAAc,GAAIf,QAAD,IAAcI,QAAQ,IAAI;AACpDN,EAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyB,IAAzB;AACAR,EAAAA,KAAK,CACAkB,GADL,CACS,mCADT,EAC8ChB,QAD9C,EAEKQ,IAFL,CAEUC,GAAG,IAAIL,QAAQ,CAACL,eAAe,CAACU,GAAG,CAACC,IAAJ,CAASO,OAAV,CAAhB,CAFzB,EAGKT,IAHL,CAGUC,GAAG,IAAI;AACTL,IAAAA,QAAQ,CAAC;AACGH,MAAAA,IAAI,EAAEL,WADT;AAEGM,MAAAA,OAAO,EAAE;AAFZ,KAAD,CAAR;AAIAE,IAAAA,QAAQ,CAACP,cAAc,CAAC,KAAD,CAAf,CAAR;AACC,GATT,EAWKc,KAXL,CAWWC,GAAG,IAAI;AACNR,IAAAA,QAAQ,CAACP,cAAc,CAAC,KAAD,CAAf,CAAR;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAFM,CAGN;AACH,GAfT;AAgBH,CAlBM;AAoBP,OAAO,MAAMM,kBAAkB,GAAG,CAACC,SAAD,EAAYC,eAAZ,EAA6BC,KAA7B,KAAuC;AACrE,SAAO;AACHpB,IAAAA,IAAI,EAAET,oBADH;AAEH2B,IAAAA,SAFG;AAGHC,IAAAA,eAHG;AAIHC,IAAAA;AAJG,GAAP;AAMH,CAPM;AASP,OAAO,MAAMC,2BAA2B,GAAG,CAACH,SAAD,EAAYC,eAAZ,KAAgC;AACvE,SAAO;AACHnB,IAAAA,IAAI,EAAER,yBADH;AAEH0B,IAAAA,SAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CANM;AAQP,OAAO,MAAMG,wBAAwB,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAkB;AACtD,SAAO;AACHxB,IAAAA,IAAI,EAAEP,uBADH;AAEH8B,IAAAA,EAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CANM;AAQP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,SAAO;AACHzB,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH,CAJM,C,CAKP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\n    SET_USER_SETTINGS,\n    SET_CURRENT_SEMESTER,\n    SET_MATRICULATION_OPTIONS,\n    SET_TARGET_GRAD_OPTIONS,\n    CLEAN_UP_SETTINGS,\n    GET_SUCCESS\n} from \"./types\";\nimport { setUserLoading } from \"./authActions\";\nimport axios from \"axios\";\n\nexport const setUserSettings = (userData) => {\n    return {\n        type: SET_USER_SETTINGS,\n        payload: userData\n    }\n}\n\nexport const initialSettings = () => dispatch => {\n    axios.defaults.timeout = 2000;\n    dispatch(setUserLoading(true));\n    axios  \n        .get('http://172.19.162.53:3000/account')\n        .then(res => {\n                dispatch(setUserSettings(res.data))\n            })\n        .then(res =>  dispatch(setUserLoading(false)))\n        .catch(err => {\n            dispatch(setUserLoading(false));\n            console.log(err)\n            // window.location.replace(\"/500-error\")\n        })\n}\n\nexport const updateSettings = (userData) => dispatch => {\n    axios.defaults.timeout = 6000;\n    axios\n        .put(\"http://172.19.162.53:3000/account\", userData)\n        .then(res => dispatch(setUserSettings(res.data.updated)))\n        .then(res => {\n            dispatch({\n                        type: GET_SUCCESS,\n                        payload: \"Saved successfully!\"\n            });\n            dispatch(setUserLoading(false))\n            }\n        )\n        .catch(err => {\n                dispatch(setUserLoading(false))\n                console.log(err);\n                // window.location.replace(\"/500-error\")\n            })\n};\n\nexport const setCurrentSemester = (currentAY, currentSemester, month) => {\n    return {\n        type: SET_CURRENT_SEMESTER,\n        currentAY,\n        currentSemester,\n        month\n    }\n}\n\nexport const setMatriculationYearOptions = (currentAY, currentSemester) => {\n    return {\n        type: SET_MATRICULATION_OPTIONS,\n        currentAY,\n        currentSemester\n    }\n}\n\nexport const setTargetGradYearOptions = (AY, Semester) => {\n    return {\n        type: SET_TARGET_GRAD_OPTIONS,\n        AY,\n        Semester\n    }\n}\n\nexport const cleanUpSettings = () => {\n    return { \n        type: CLEAN_UP_SETTINGS\n    }\n}\n//turn array of choices into options dropdown\n// export const generateOptions = (optionList, category,) {\n\n//     let facIndex = this.state.facIndex;\n//   if(choices === 'faculty'){\n//     return this.state.dummyfac.map((obj) => {\n//       return (\n//       <option value={Object.keys(obj)}>\n//         {Object.keys(obj)}\n//       </option>\n//       );\n//     });\n//   } else if(choices === 'major') {\n//       if(this.state.faculty) {\n//     return this.state.dummyfac\n//            [facIndex]\n//            [this.state.faculty].map((obj) => {\n//                   return (\n//                     <option value={Object.keys(obj)}>\n//                       {Object.keys(obj)}\n//                     </option>\n//                   )\n//               }\n//     )}\n//   } else if(choices === 'specialisation') {\n//       if(this.state.major && this.state.faculty) {\n//       return this.state.dummyfac\n//              [facIndex]\n//              [this.state.faculty][this.state.majorIndex][this.state.major].map((item) => {\n//                   return (\n//                     <option>\n//                       {item}\n//                     </option>\n//                   )\n//                 }    \n//       )}\n//   } else if(choices === 'residence') {\n//     return this.state.residenceOptions.map((obj) => {\n//       return (\n//       <option value={obj}>\n//         {obj}\n//       </option>\n//       );\n//     });\n//   } else {\n//       let options;\n\n//       if(choices === 'matriculationYear') {\n//         options = this.props.settings.matriculationOptions\n//       } else {\n//         options = this.props.settings.targetGradOptions\n//       }\n\n//     return options.map((option) => {\n//       return (\n//       <option value={option}>\n//         {option}\n//       </option>\n//       );\n//     });\n//   }\n// }\n\n\n"]},"metadata":{},"sourceType":"module"}