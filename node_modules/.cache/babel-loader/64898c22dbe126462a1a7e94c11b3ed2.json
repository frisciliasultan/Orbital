{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/ModulePlannerPage.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { Alert } from \"antd\";\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { handleSaveClick, generateObject } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty';\nimport LoadingDots from '../Loading Page/LoadingDots';\n\nconst ModulePlannerPageTemp = props => {\n  const module = props.modplan.modules;\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo.modPlan)) {\n      if (isEmpty(props.modplan.selectedModules)) {\n        props.setSelectedModules(null, props.settings.userInfo.modPlan);\n      } else if (isEmpty(props.modplan.rules)) {\n        const modplan = props.settings.userInfo.modPlan.map(obj => {\n          return obj.moduleCode;\n        });\n        props.callBackendAPI(\"Rules\", modplan);\n      }\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    if (isEmpty(props.modplan.rules) && !isEmpty(props.settings.userInfo.modPlan)) {\n      const modplan = props.modplan.selectedModules.map(obj => {\n        return obj.moduleCode;\n      });\n      props.callBackendAPI(\"Rules\", modplan);\n    }\n\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI('NUSMods');\n    }\n  }, []);\n\n  const handleEvalButtonClick = () => {\n    const modules = props.modplan.selectedModules;\n\n    if (isEmpty(modules)) {\n      return /*#__PURE__*/React.createElement(Alert, {\n        message: \"Please add modules before evaluating\",\n        type: \"warning\",\n        showIcon: true,\n        closable: true,\n        style: {\n          margin: \"15px 0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      });\n    } else {\n      props.setCallBackendNow(true);\n    }\n  };\n\n  return isEmpty(props.settings.userInfo) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(DndProvider, {\n    backend: Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-module-planner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"module-planner-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, \"Module Planner\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"year-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, !isEmpty(props.settings.userInfo.matriculationYear) && generateObject(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear, \"yearDisplay\", module)), /*#__PURE__*/React.createElement(TrashBox, {\n    module: module,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    id: \"eval-button\",\n    onClick: () => handleEvalButtonClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, \"Evaluate\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Save\"), !isEmpty(props.success) && /*#__PURE__*/React.createElement(Alert, {\n    message: props.success,\n    type: \"success\",\n    showIcon: true,\n    closable: true,\n    style: {\n      margin: \"15px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }), !isEmpty(props.success) && setTimeout(props.removeSuccess, 2000) && clearTimeout(setTimeout(props.removeSuccess, 2000)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Click on each requirement for further information\"), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Rules, {\n    rules: props.modplan.rules,\n    settings: props.settings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  })));\n};\n\nModulePlannerPageTemp.propTypes = {\n  callBackendAPI: PropTypes.func.isRequired,\n  setCallBackendNow: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  callBackendAPI,\n  setCallBackendNow,\n  updateSettings,\n  initialSettings,\n  setSelectedModules,\n  removeSuccess\n})(ModulePlannerPageTemp);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/ModulePlannerPage.jsx"],"names":["React","useEffect","useState","Board","Rules","TrashBox","Button","Card","Alert","HTML5Backend","Backend","DndProvider","connect","callBackendAPI","setCallBackendNow","setSelectedModules","updateSettings","initialSettings","removeSuccess","handleSaveClick","generateObject","PropTypes","isEmpty","LoadingDots","ModulePlannerPageTemp","props","module","modplan","modules","settings","userInfo","modPlan","selectedModules","rules","map","obj","moduleCode","handleEvalButtonClick","margin","matriculationYear","targetGradYear","success","setTimeout","clearTimeout","propTypes","func","isRequired","object","cap","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,mBAAP;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,iBAA7B;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,YAAY,IAAIC,OAAzB,QAAwC,yBAAxC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,EAA4CC,kBAA5C,QAAsE,8BAAtE;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,+BAAhD;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,6BAAhD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;;AAGA,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;AACrC,QAAMC,MAAM,GAAGD,KAAK,CAACE,OAAN,CAAcC,OAA7B;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACqB,OAAO,CAACG,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBC,OAAzB,CAAX,EAA8C;AAC1C,UAAGT,OAAO,CAACG,KAAK,CAACE,OAAN,CAAcK,eAAf,CAAV,EAA2C;AACvCP,QAAAA,KAAK,CAACV,kBAAN,CAAyB,IAAzB,EAA+BU,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBC,OAAvD;AACH,OAFD,MAEO,IAAIT,OAAO,CAACG,KAAK,CAACE,OAAN,CAAcM,KAAf,CAAX,EAAkC;AACrC,cAAMN,OAAO,GAAGF,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBC,OAAxB,CAAgCG,GAAhC,CAAqCC,GAAD,IAAS;AACzD,iBAAOA,GAAG,CAACC,UAAX;AACH,SAFe,CAAhB;AAGAX,QAAAA,KAAK,CAACZ,cAAN,CAAqB,OAArB,EAA8Bc,OAA9B;AACH;AAEJ;AACJ,GAZQ,EAYN,CAACF,KAAK,CAACI,QAAN,CAAeC,QAAhB,CAZM,CAAT;AAcA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGqB,OAAO,CAACG,KAAK,CAACE,OAAN,CAAcM,KAAf,CAAP,IAAgC,CAACX,OAAO,CAACG,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBC,OAAzB,CAA3C,EAA8E;AAC1E,YAAMJ,OAAO,GAAGF,KAAK,CAACE,OAAN,CAAcK,eAAd,CAA8BE,GAA9B,CAAmCC,GAAD,IAAS;AACvD,eAAOA,GAAG,CAACC,UAAX;AACH,OAFe,CAAhB;AAGAX,MAAAA,KAAK,CAACZ,cAAN,CAAqB,OAArB,EAA8Bc,OAA9B;AACH;;AAED,QAAGL,OAAO,CAACG,KAAK,CAACE,OAAN,CAAcC,OAAf,CAAV,EAAkC;AAC9BH,MAAAA,KAAK,CAACZ,cAAN,CAAqB,SAArB;AACH;AACJ,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMwB,qBAAqB,GAAG,MAAM;AAChC,UAAMT,OAAO,GAAGH,KAAK,CAACE,OAAN,CAAcK,eAA9B;;AACA,QAAIV,OAAO,CAACM,OAAD,CAAX,EAAsB;AAClB,0BACI,oBAAC,KAAD;AACI,QAAA,OAAO,EAAC,sCADZ;AAEI,QAAA,IAAI,EAAC,SAFT;AAGI,QAAA,QAAQ,MAHZ;AAII,QAAA,QAAQ,MAJZ;AAKI,QAAA,KAAK,EAAE;AAACU,UAAAA,MAAM,EAAE;AAAT,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQH,KATD,MASO;AACHb,MAAAA,KAAK,CAACX,iBAAN,CAAwB,IAAxB;AACH;AACJ,GAdD;;AAgBA,SACIQ,OAAO,CAACG,KAAK,CAACI,QAAN,CAAeC,QAAhB,CAAP,gBACM,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,gBAEO,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEpB,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,EAAE,EAAC,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,CAACY,OAAO,CAACG,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBS,iBAAzB,CAAR,IACMnB,cAAc,CAACK,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBS,iBAAzB,EACTd,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBU,cADf,EAET,aAFS,EAGTd,MAHS,CAFrB,CAFJ,eAWI,oBAAC,QAAD;AACQ,IAAA,MAAM,EAAEA,MADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,eAiBI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,EAAE,EAAC,aAA9B;AAA4C,IAAA,OAAO,EAAE,MAAMW,qBAAqB,EAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBJ,eAmBI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAE,MAAMlB,eAAe,CAACM,KAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ,EAqBK,CAACH,OAAO,CAACG,KAAK,CAACgB,OAAP,CAAR,iBACG,oBAAC,KAAD;AACI,IAAA,OAAO,EAAEhB,KAAK,CAACgB,OADnB;AAEI,IAAA,IAAI,EAAC,SAFT;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,QAAQ,MAJZ;AAKI,IAAA,KAAK,EAAE;AAACH,MAAAA,MAAM,EAAE;AAAT,KALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBR,EA8BK,CAAChB,OAAO,CAACG,KAAK,CAACgB,OAAP,CAAR,IACGC,UAAU,CAACjB,KAAK,CAACP,aAAP,EAAsB,IAAtB,CADb,IAEGyB,YAAY,CAACD,UAAU,CAACjB,KAAK,CAACP,aAAP,EAAsB,IAAtB,CAAX,CAhCpB,eAiCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjCJ,eAkCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,eAmCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAnCJ,eAoCI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAEO,KAAK,CAACE,OAAN,CAAcM,KADzB;AAEI,IAAA,QAAQ,EAAER,KAAK,CAACI,QAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CApCJ,eAyCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzCJ,CADD,CAHX;AAiDH,CA/FD;;AAiGAL,qBAAqB,CAACoB,SAAtB,GAAkC;AAC9B/B,EAAAA,cAAc,EAAEQ,SAAS,CAACwB,IAAV,CAAeC,UADD;AAE9BhC,EAAAA,iBAAiB,EAAEO,SAAS,CAACwB,IAAV,CAAeC,UAFJ;AAG9B9B,EAAAA,cAAc,EAAEK,SAAS,CAACwB,IAAV,CAAeC,UAHD;AAI9B5B,EAAAA,aAAa,EAAEG,SAAS,CAACwB,IAAV,CAAeC,UAJA;AAK9BnB,EAAAA,OAAO,EAAEN,SAAS,CAAC0B,MAAV,CAAiBD,UALI;AAM9BjB,EAAAA,QAAQ,EAAER,SAAS,CAAC0B,MAAV,CAAiBD,UANG;AAO9BE,EAAAA,GAAG,EAAE3B,SAAS,CAAC0B,MAAV,CAAiBD;AAPQ,CAAlC;;AAUA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAC9BrB,EAAAA,QAAQ,EAAEqB,KAAK,CAACrB,QADc;AAE9BmB,EAAAA,GAAG,EAAEE,KAAK,CAACF,GAFmB;AAG9BrB,EAAAA,OAAO,EAAEuB,KAAK,CAACvB,OAHe;AAI9Bc,EAAAA,OAAO,EAAES,KAAK,CAACT;AAJe,CAAL,CAA7B;;AAOA,eAAe7B,OAAO,CAACqC,eAAD,EACF;AAAEpC,EAAAA,cAAF;AAAkBC,EAAAA,iBAAlB;AAAqCE,EAAAA,cAArC;AAAqDC,EAAAA,eAArD;AAAsEF,EAAAA,kBAAtE;AAA0FG,EAAAA;AAA1F,CADE,CAAP,CAEMM,qBAFN,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { Alert } from \"antd\";\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { handleSaveClick, generateObject } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty'\nimport LoadingDots from '../Loading Page/LoadingDots';\n\n\nconst ModulePlannerPageTemp = (props) => {\n    const module = props.modplan.modules;\n\n    useEffect(() => {\n        if(!isEmpty(props.settings.userInfo.modPlan)) {\n            if(isEmpty(props.modplan.selectedModules)) {\n                props.setSelectedModules(null, props.settings.userInfo.modPlan);\n            } else if (isEmpty(props.modplan.rules)) {\n                const modplan = props.settings.userInfo.modPlan.map((obj) => {\n                    return obj.moduleCode;\n                });\n                props.callBackendAPI(\"Rules\", modplan);\n            }\n            \n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        if(isEmpty(props.modplan.rules) && !isEmpty(props.settings.userInfo.modPlan)) {\n            const modplan = props.modplan.selectedModules.map((obj) => {\n                return obj.moduleCode;\n            });\n            props.callBackendAPI(\"Rules\", modplan);\n        }\n        \n        if(isEmpty(props.modplan.modules)){\n            props.callBackendAPI('NUSMods');\n        } \n    }, [])\n\n    const handleEvalButtonClick = () => {\n        const modules = props.modplan.selectedModules;\n        if (isEmpty(modules)) {\n            return (\n                <Alert \n                    message='Please add modules before evaluating' \n                    type=\"warning\" \n                    showIcon \n                    closable\n                    style={{margin: \"15px 0px\"}} />\n            )\n        } else {\n            props.setCallBackendNow(true);\n        }\n    }\n\n    return (\n        isEmpty(props.settings.userInfo) \n            ? <LoadingDots/>\n            : (<DndProvider backend={Backend} >\n                <div className=\"container-module-planner\">\n                    <h3 id=\"module-planner-title\">Module Planner</h3>\n                    <div className=\"year-display\">\n                    {!isEmpty(props.settings.userInfo.matriculationYear) \n                        && generateObject(props.settings.userInfo.matriculationYear, \n                                props.settings.userInfo.targetGradYear, \n                                \"yearDisplay\",\n                                module\n                                )}\n                    </div>\n                    \n                    <TrashBox\n                            module={module}/>\n    \n    \n                    <br/>\n    \n                    <Button className=\"button\" id=\"eval-button\" onClick={() => handleEvalButtonClick()}>Evaluate</Button>\n    \n                    <Button className=\"button\" onClick={() => handleSaveClick(props)} >Save</Button>\n                    \n                    {!isEmpty(props.success) && \n                        <Alert \n                            message={props.success} \n                            type=\"success\" \n                            showIcon \n                            closable\n                            style={{margin: \"15px 0px\"}} />\n                    }\n                    \n                    {!isEmpty(props.success) && \n                        setTimeout(props.removeSuccess, 2000) &&\n                        clearTimeout(setTimeout(props.removeSuccess, 2000))}\n                    <br/>\n                    <br/>\n                    <p>Click on each requirement for further information</p>\n                    <Card>\n                        <Rules\n                            rules={props.modplan.rules}\n                            settings={props.settings}/>\n                    </Card>\n                    <br/>\n                </div>\n            </DndProvider>)\n    )\n}\n\nModulePlannerPageTemp.propTypes = {\n    callBackendAPI: PropTypes.func.isRequired,\n    setCallBackendNow: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    removeSuccess: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success,\n});\n\nexport default connect(mapStateToProps, \n                    { callBackendAPI, setCallBackendNow, updateSettings, initialSettings, setSelectedModules, removeSuccess }) \n                    (ModulePlannerPageTemp);\n"]},"metadata":{},"sourceType":"module"}