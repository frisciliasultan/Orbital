{"ast":null,"code":"import axios from 'axios';\nimport { SET_BOARD_FILLED, SET_MODULES, SET_RULES, SET_CALL_BACKEND_NOW, SET_SELECTED_MODULES, SET_MODULE_LOCATION, SET_CURRRENT_SEMESTER, CLEAN_UP_MODPLAN } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\nconst compile = require('../backend_utils/compile');\n\nconst toView = require('../backend_utils/toView');\n\nexport const setIsBoardFilled = () => {\n  return {\n    type: SET_BOARD_FILLED\n  };\n};\nexport const callBackendAPI = (backend, modplan) => dispatch => {\n  if (backend === 'NUSMods') {\n    setAuthToken(false);\n    axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json').then(res => dispatch(setModules(res.data))).then(setAuthToken(localStorage.jwtToken)).catch(err => {\n      console.log(err);\n    });\n  } else {\n    console.log('called');\n    axios.get('https://modtree-api.netlify.app/.netlify/functions/user/directory').then(res => {\n      return res.data.list.map(async ruleTag => {\n        const ruleData = await axios.get('https://modtree-api.netlify.app/.netlify/functions/rules/assemble/' + ruleTag).then(res => {\n          if (res.status !== 200) {\n            throw Error(res.message);\n          }\n\n          return res.data;\n        }).then(res => {\n          console.log(res);\n          res.map(obj => {\n            compile(obj).then(func => func({\n              modules: modplan\n            })).then(res => toView(res));\n          });\n        });\n      });\n    }) // .then(ruleData => {\n    //     console.log(ruleData)\n    // })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n};\nexport const setModules = modules => {\n  return {\n    type: SET_MODULES,\n    payload: modules\n  };\n};\nexport const setRules = rules => {\n  return {\n    type: SET_RULES,\n    payload: rules\n  };\n};\nexport const setCallBackendNow = status => {\n  return {\n    type: SET_CALL_BACKEND_NOW,\n    payload: status\n  };\n};\nexport const setSelectedModules = (object, selectedModules) => {\n  return {\n    type: SET_SELECTED_MODULES,\n    moduleAdded: object,\n    currentSelectedModules: selectedModules\n  };\n};\nexport const setModuleLocation = (item, location, AY, selectedModules) => {\n  return {\n    type: SET_MODULE_LOCATION,\n    item,\n    location,\n    AY,\n    modules: selectedModules\n  };\n};\nexport const setCurrentSemester = (AY, semester) => {\n  return {\n    type: SET_CURRRENT_SEMESTER,\n    AY,\n    semester\n  };\n};\nexport const cleanUpModPlan = () => {\n  return {\n    type: CLEAN_UP_MODPLAN\n  };\n};","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/actions/modplanActions.js"],"names":["axios","SET_BOARD_FILLED","SET_MODULES","SET_RULES","SET_CALL_BACKEND_NOW","SET_SELECTED_MODULES","SET_MODULE_LOCATION","SET_CURRRENT_SEMESTER","CLEAN_UP_MODPLAN","setAuthToken","compile","require","toView","setIsBoardFilled","type","callBackendAPI","backend","modplan","dispatch","get","then","res","setModules","data","localStorage","jwtToken","catch","err","console","log","list","map","ruleTag","ruleData","status","Error","message","obj","func","modules","payload","setRules","rules","setCallBackendNow","setSelectedModules","object","selectedModules","moduleAdded","currentSelectedModules","setModuleLocation","item","location","AY","setCurrentSemester","semester","cleanUpModPlan"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    SET_BOARD_FILLED,\n    SET_MODULES,\n    SET_RULES,\n    SET_CALL_BACKEND_NOW,\n    SET_SELECTED_MODULES,\n    SET_MODULE_LOCATION,\n    SET_CURRRENT_SEMESTER,\n    CLEAN_UP_MODPLAN\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\nconst compile = require('../backend_utils/compile');\nconst toView = require('../backend_utils/toView');\n\nexport const setIsBoardFilled = () => {\n    return {\n        type: SET_BOARD_FILLED,\n    }\n}\n\nexport const callBackendAPI = (backend, modplan) => dispatch => {\n\n    if(backend === 'NUSMods') {\n        setAuthToken(false);\n\n        axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json' )\n        .then(res => dispatch(setModules(res.data)))\n        .then(setAuthToken(localStorage.jwtToken))\n        .catch(err => {\n            console.log(err)\n        });\n        \n    } else {\n        console.log('called')\n        axios.get('https://modtree-api.netlify.app/.netlify/functions/user/directory')\n        .then(res => {\n            return res.data.list.map( async (ruleTag) => {\n                const ruleData = await axios\n                    .get('https://modtree-api.netlify.app/.netlify/functions/rules/assemble/' + ruleTag)\n                    .then(res => {\n                        if(res.status !== 200) {\n                            throw Error (res.message);\n                        }\n                        return res.data\n                    })\n                    .then(res => {\n                        console.log(res)\n                        res.map((obj) => {\n                            compile(obj)\n                            .then(func => func({modules: modplan}))\n                            .then(res => toView(res))\n                        })\n                    })\n        })})\n        // .then(ruleData => {\n        //     console.log(ruleData)\n        // })\n     \n        .catch(err => {\n            console.log(err)\n        });\n    }\n    \n}\n\nexport const setModules = (modules) => {\n    return {\n        type: SET_MODULES,\n        payload: modules\n    }\n}\n\nexport const setRules = (rules) => {\n    return {\n        type: SET_RULES,\n        payload: rules\n    }\n}\n\nexport const setCallBackendNow = (status) => {\n    return {\n        type: SET_CALL_BACKEND_NOW,\n        payload: status\n    }\n}\n\nexport const setSelectedModules = (object, selectedModules) => {\n    return { \n        type: SET_SELECTED_MODULES,\n        moduleAdded: object,\n        currentSelectedModules: selectedModules\n    }\n}\n\nexport const setModuleLocation = (item, location, AY, selectedModules) => {\n    return { \n        type: SET_MODULE_LOCATION,\n        item,\n        location,\n        AY,\n        modules: selectedModules\n    }\n}\n\nexport const setCurrentSemester = (AY, semester) => {\n    return {\n        type: SET_CURRRENT_SEMESTER,\n        AY,\n        semester\n    }\n}\n\nexport const cleanUpModPlan = () => {\n    return { \n        type: CLEAN_UP_MODPLAN\n    }\n}"]},"metadata":{},"sourceType":"module"}