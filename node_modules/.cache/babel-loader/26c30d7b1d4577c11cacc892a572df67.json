{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx\";\nimport { Form, Button, Select, message } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\"; // import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\n\nimport React, { useState, useEffect } from \"react\";\nimport isEmpty from 'is-empty';\nconst {\n  Option\n} = Select;\n\nconst DynamicFieldSet = props => {\n  const [options, setOptions] = useState([]);\n  const [keyList, setKeyList] = useState([1]);\n  const length = keyList.length;\n  useEffect(() => {\n    if (props.value.length > 0) {\n      //set options after first render\n      const tempOptions = [...props.optionList];\n      props.value.map(object => {\n        console.log(object);\n\n        for (let i = 0; i < props.optionList.length; i++) {\n          //remove selected option from options\n          if (props.optionList[i].fullName === object.name) {\n            console.log('removed');\n            tempOptions.splice(i, 1, null);\n          }\n        }\n      });\n      setOptions(tempOptions);\n      let userInputLength = props.value.length.valueOf();\n      console.log(props.value.length + \" and \" + userInputLength); //determine how many fields in the beginning\n\n      let temp = [];\n\n      while (userInputLength-- > 0) {\n        console.log('called');\n        temp.push(1);\n      }\n\n      setKeyList(temp);\n    }\n  }, []);\n\n  const renderIntial = () => {\n    return keyList.map((key, index) => {\n      return /*#__PURE__*/React.createElement(Form.Item, {\n        className: \"form-field\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Select, {\n        showSearch: true,\n        onChange: (e, object) => onChange(e, object, index),\n        defaultValue: \"None \",\n        value: props.value[index] ? props.value[index].name : \"None \",\n        style: {\n          width: 300\n        },\n        optionFilterProp: \"children\",\n        filterOption: (input, option) => {\n          return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Option, {\n        key: \"choose\" + props.label,\n        value: \"None \",\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }\n      }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name))), length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n        className: \"dynamic-delete-button\",\n        onClick: () => {\n          handleRemove(index);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }) : null);\n    });\n  };\n\n  const handleAdd = () => {\n    if (props.value[length - 1]) {\n      setKeyList([...keyList, 1]);\n    } else {\n      message.warning({\n        content: 'Please choose an option before adding'\n      });\n      message.config({\n        maxCount: 1,\n        duration: .7,\n        top: '70px'\n      });\n    }\n  };\n\n  const handleRemove = index => {\n    const updated = [...props.value];\n\n    if (updated[index]) {\n      const temp = [...options]; //add removed option to options in state\n\n      for (let i = 0; i < props.optionList.length; i++) {\n        if (props.optionList[i].fullName === updated[index].name) {\n          //remove null and add back option\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n\n      setOptions(temp); //remove option from userInput state in acad settings page\n\n      updated.splice(index, 1);\n      props.setUserInput({\n        [props.name]: updated\n      });\n    } //remove one member from keyList\n\n\n    const updatedKeyList = [...keyList];\n    updatedKeyList.pop();\n    setKeyList(updatedKeyList);\n  };\n\n  const onChange = (e, object, index) => {\n    const updated = [...props.value];\n    const temp = [...options];\n\n    for (let i = 0; i < props.optionList.length; i++) {\n      if (updated[index]) {\n        //add removed option back into options\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n        }\n      } //remove selected option from options\n\n\n      if (props.optionList[i].fullName === object.value) {\n        temp.splice(i, 1, null);\n      }\n    }\n\n    setOptions(temp); //replace selected option at that particular index \n    // in userInput in acad settings\n    //with new selected option\n\n    updated[index] = {\n      name: object.value,\n      tag: object.tag\n    };\n    props.setUserInput({\n      [object.name]: updated\n    });\n  }; //check whether options is all null or at least 1 filled\n\n\n  const checkIsOptionsEmpty = () => {\n    for (let i = 0; i < options.length; i++) {\n      if (options && options[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  console.log(props.value.length);\n  console.log(props.name);\n  return (\n    /*#__PURE__*/\n    // <Form \n    // name=\"dynamic_form_item\" \n    // // form={form}\n    // // fields={fields}\n    // // {...formItemLayoutWithOutLabel}\n    // >\n    // <Form.List \n    //   name={props.name}>\n    //   {(fields, { add, remove }) => {\n    //     console.log(fields)\n    //     return (\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, renderIntial(), !checkIsOptionsEmpty() && /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: () => // if(props.value[index] || (index + 1)=== 0) {\n      handleAdd() // }\n      ,\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 24\n      }\n    }), \" Add \", props.name === \"secondMajors\" ? \"Major\" : props.name)))\n    /* <Form.Item>\n      <Button type=\"primary\" htmlType=\"submit\">\n        Submit\n      </Button>\n    </Form.Item> */\n    //   </Form>\n\n  );\n};\n\nexport default DynamicFieldSet;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx"],"names":["Form","Button","Select","message","MinusCircleOutlined","PlusOutlined","generateOptions","React","useState","useEffect","isEmpty","Option","DynamicFieldSet","props","options","setOptions","keyList","setKeyList","length","value","tempOptions","optionList","map","object","console","log","i","fullName","name","splice","userInputLength","valueOf","temp","push","renderIntial","key","index","e","onChange","width","input","option","children","toLowerCase","indexOf","label","handleRemove","handleAdd","warning","content","config","maxCount","duration","top","updated","setUserInput","updatedKeyList","pop","tag","checkIsOptionsEmpty"],"mappings":"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","sourcesContent":["import { Form, Button, Select, message } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\";\n// import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport React, { useState, useEffect} from \"react\";\nimport isEmpty from 'is-empty';\n\nconst { Option } = Select;\n  \n  const DynamicFieldSet = (props) => {\n    const [options, setOptions] = useState([]);\n    const [keyList, setKeyList] = useState([1]);\n    const length = keyList.length;\n\n    useEffect(() => {\n      if(props.value.length > 0) {\n        //set options after first render\n        const tempOptions = [...props.optionList];\n        props.value.map((object) => {\n          console.log(object)\n          for(let i = 0; i < props.optionList.length; i++) {\n            //remove selected option from options\n              if(props.optionList[i].fullName === object.name) {\n                console.log('removed')\n                tempOptions.splice(i, 1, null);\n              } \n          }\n        })\n        setOptions(tempOptions);\n\n   \n        let userInputLength = props.value.length.valueOf();\n        console.log(props.value.length + \" and \" + userInputLength)\n        //determine how many fields in the beginning\n        let temp = [];\n        while(userInputLength-- > 0) {\n          console.log('called')\n          temp.push(1);\n        }\n        setKeyList(temp);          \n      }\n    }, []);\n\n    const renderIntial = () => {\n        return keyList.map((key, index) => {\n          return (\n            <Form.Item className=\"form-field\">\n               <Form.Item>\n                <Select\n                  showSearch\n                  onChange={(e, object) => onChange(e, object, index)}\n                  defaultValue=\"None \"\n                  value={props.value[index] ? props.value[index].name : \"None \"}\n                  style={{ width: 300 }}\n                  optionFilterProp=\"children\"\n                  filterOption={(input, option) => {\n                      return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                  }}>\n                  <Option \n                      key={\"choose\" + props.label}\n                      value=\"None \" \n                        disabled>\n                      {\"Choose \" + props.label}\n                  </Option>\n                  {generateOptions((options ? options : props.optionList), props.name)}\n                </Select>\n            </Form.Item>\n\n              {(length > 1) ? (\n                <MinusCircleOutlined\n                  className=\"dynamic-delete-button\"\n                  onClick={() => {\n                    handleRemove(index);\n                  }}\n                />\n              ): null}\n            </Form.Item>\n          )\n        })\n  }\n    const handleAdd = () => {\n      if(props.value[length - 1]) {\n        setKeyList([...keyList, 1]);\n      } else {\n        message.warning({\n          content: 'Please choose an option before adding',\n        })\n\n        message.config({\n          maxCount: 1,\n          duration: .7,\n          top: '70px',\n        })\n\n      }\n    }\n\n    const handleRemove = (index) => {\n      const updated = [...props.value];\n      if(updated[index]) {\n         \n      const temp = [...options];\n      //add removed option to options in state\n      for(let i = 0; i < props.optionList.length; i++) {\n        if(props.optionList[i].fullName === updated[index].name) {\n          //remove null and add back option\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n      setOptions(temp);\n\n      //remove option from userInput state in acad settings page\n      updated.splice(index, 1);\n      props.setUserInput({[props.name]: updated});\n      }\n\n      //remove one member from keyList\n      const updatedKeyList = [...keyList];\n      updatedKeyList.pop();\n      setKeyList(updatedKeyList);\n    }\n\n    const onChange = (e, object, index) => {\n      const updated = [...props.value];\n     \n      const temp = [...options];\n        for(let i = 0; i < props.optionList.length; i++) {\n          if(updated[index]) {\n             //add removed option back into options\n            if(props.optionList[i].fullName === updated[index].name) {\n              temp.splice(i, 1, props.optionList[i]);\n            }\n          }\n          \n          //remove selected option from options\n          if(props.optionList[i].fullName === object.value) {\n            temp.splice(i, 1, null);\n          } \n        }\n       setOptions(temp);\n\n      //replace selected option at that particular index \n      // in userInput in acad settings\n      //with new selected option\n      updated[index] = {\n                        name: object.value,\n                        tag: object.tag\n                      };\n      props.setUserInput({[object.name]: updated});\n  }\n\n  //check whether options is all null or at least 1 filled\n  const checkIsOptionsEmpty = () => {\n    for(let i = 0; i < options.length; i++ ) {\n\n      if(options && options[i]) {\n        return false;\n      } \n    }\n    return true;\n  }\n\n    console.log(props.value.length) \n    console.log(props.name)\n    return (\n      // <Form \n        // name=\"dynamic_form_item\" \n        // // form={form}\n        // // fields={fields}\n        // // {...formItemLayoutWithOutLabel}\n        // >\n          \n        // <Form.List \n        //   name={props.name}>\n        //   {(fields, { add, remove }) => {\n        //     console.log(fields)\n        //     return (\n              <div>\n                {renderIntial()}\n                {/* {fields.map((field, index) => (\n                  \n                  <Form.Item\n                    // {...(formItemLayoutWithOutLabel)}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item */}\n                      {/* // {...field}\n                      // validateTrigger={['onChange', 'onBlur']}\n                      // rules={[ */}\n                      {/* //   { */}\n                      {/* //     required: true,\n                      //     whitespace: true,\n                      //     message: `Please input ${props.name} or delete this field.`,\n                      //   },\n                      // ]}\n                      noStyle\n                    >\n                      <Select\n                        showSearch\n                        onChange={(e, object) => onChange(e, object, (index + props.value.length))}\n                        defaultValue=\"None \"\n                        value={props.value[index + props.value.length] ? props.value[index + props.value.length].name : \"None \"}\n                        style={{ width: 250 }}\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => {\n                            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }}>\n                        <Option \n                            key={\"choose\" + props.label}\n                            value=\"None \" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </Option>\n                        {generateOptions((options ? options : props.optionList), props.name)}\n                      </Select>\n                    </Form.Item>\n\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n\n                        onClick={() => {\n                          remove(field.name);\n                          handleRemove(index + props.value.length);\n                        }}\n                      />\n                    ) : null}\n                  </Form.Item>\n                ))} */}\n                \n                \n                {!checkIsOptionsEmpty() && \n                <Form.Item>\n                  <Button\n                      type=\"dashed\"\n                      onClick={() =>\n                          // if(props.value[index] || (index + 1)=== 0) {\n                            handleAdd()\n                          // }\n                        }\n                      style={{ width: '100%' }}>\n                       <PlusOutlined /> Add {props.name === \"secondMajors\" ? \"Major\" : props.name}\n                    </Button>\n                  </Form.Item>}\n              </div>\n\n  \n        /* <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item> */\n    //   </Form>\n    );\n  };\n  \n\nexport default DynamicFieldSet;"]},"metadata":{},"sourceType":"module"}