{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, setTranscript } from '../../actions/capActions';\nimport { updateSettings, initialSettings, setTargetGradYearOptions } from \"../../actions/settingsActions\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\nimport { generateOptions } from \"../../utils/optionGenerator\";\nimport isEmpty from 'is-empty';\n\nconst CAPCalculatorPage = props => {\n  const gradeList = [{\n    grade: \"A+\",\n    gradePoint: 5\n  }, {\n    grade: \"A\",\n    gradePoint: 5\n  }, {\n    grade: \"A-\",\n    gradePoint: 4.5\n  }, {\n    grade: \"B+\",\n    gradePoint: 4\n  }, {\n    grade: \"B\",\n    gradePoint: 3.5\n  }, {\n    grade: \"B-\",\n    gradePoint: 3\n  }, {\n    grade: \"C+\",\n    gradePoint: 2.5\n  }, {\n    grade: \"C\",\n    gradePoint: 2\n  }, {\n    grade: \"D+\",\n    gradePoint: 1.5\n  }, {\n    grade: \"D\",\n    gradePoint: 1\n  }, {\n    grade: \"F\",\n    gradePoint: 0\n  }];\n  const [semester, setSemester] = useState(\"Year 1 Semester 1\");\n  const [target, setTarget] = useState([]);\n  const [isPast, setIsPast] = useState(); //to count what semester the user is in currently\n\n  const year = props.settings.currentAY.substr(5, 4);\n  const matYear = !isEmpty(props.settings.userInfo) ? props.settings.userInfo.matriculationYear.substr(0, 4) : 0;\n  const statusYear = year - matYear;\n  const userSemester = props.settings.currentSemester === \"Semester 1\" ? statusYear * 2 - 1 : statusYear * 2;\n  useEffect(() => {\n    if (isEmpty(props.cap.semesterOptions) && !isEmpty(props.settings.userInfo)) {\n      const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n      const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n      const diff = end - start;\n      props.setSemesterOptions(diff);\n    }\n\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.selectedModules)) {\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    }\n\n    if (!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n      props.setTranscript(null, props.settings.userInfo.transcript);\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    const convertSemToNumber = sem => {\n      if (sem.substr(7) === \"Semester 1\") {\n        return sem.substr(5, 1) * 2 - 1;\n      } else {\n        return sem.substr(5, 1) * 2;\n      }\n    };\n\n    const currSem = convertSemToNumber(semester); //check if the semester chosen is in the past or future\n\n    if (userSemester > currSem) {\n      setIsPast(true);\n    } else if (userSemester === currSem) {\n      if (props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12 || props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6) {\n        setIsPast(true);\n      }\n    } else {\n      setIsPast(false);\n    }\n  }, [semester]);\n\n  const handleGradeClick = (e, object) => {\n    const module = {\n      moduleCode: object.moduleCode,\n      title: object.title,\n      moduleCredit: object.moduleCredit,\n      grade: e.target.value,\n      SU: object.SU\n    };\n    return isPast ? props.setTranscript(module, props.cap.transcript) : setTarget();\n  };\n\n  const handleCheckboxChange = (e, object) => {\n    let module;\n    let indexOfDuplicate;\n    let unique = true;\n    const transcript = props.cap.transcript; //default module\n\n    module = {\n      moduleCode: object.moduleCode,\n      title: object.title,\n      moduleCredit: object.moduleCredit,\n      SU: true\n    }; //to obtain module object from transcript for modification\n\n    if (!isEmpty(transcript)) {\n      for (let i = 0; i < transcript.length; i++) {\n        if (transcript[i].moduleCode === object.moduleCode) {\n          indexOfDuplicate = i;\n          unique = false;\n        }\n      } //if moduleAdded exists in transcript, create a module \n\n\n      if (!unique) {\n        module = {\n          moduleCode: transcript[indexOfDuplicate].moduleCode,\n          title: transcript[indexOfDuplicate].title,\n          moduleCredit: transcript[indexOfDuplicate].moduleCredit,\n          grade: transcript[indexOfDuplicate].grade,\n          SU: transcript[indexOfDuplicate].SU\n        };\n        module.SU = module.SU ? false : true;\n      }\n    }\n\n    return isPast ? props.setTranscript(module, props.cap.transcript, unique, indexOfDuplicate) : setTarget();\n  };\n\n  const generateTable = () => {\n    return props.selectedModules.filter(object => object.location === semester).map(object => {\n      const {\n        moduleCode,\n        title,\n        moduleCredit\n      } = object;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: moduleCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }\n      }, title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }\n      }, moduleCode), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }, moduleCredit), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        name: object,\n        onChange: e => handleGradeClick(e, object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        selected: true,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 37\n        }\n      }, \"Grade\"), generateOptions(gradeList, \"grade\"))), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        onChange: e => handleCheckboxChange(e, object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 33\n        }\n      })));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"CAP Calculator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, \"CAP at the beginning of the semester: \", props.settings.userInfo.cap, \" \"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"Semester: \"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"time\",\n    onChange: e => setSemester(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, isEmpty(props.cap.semesterOptions) && /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 56\n    }\n  }, \"Year 1 Semester 1\"), generateOptions(props.cap.semesterOptions)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Courses taken this semester\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, \"Module Title\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, \"Module Code\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, \"Modular Credits\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, \"Grade\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, \"S/U\"), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, !isEmpty(props.settings.userInfo) && generateTable())), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, isPast ? \"Save Transcript\" : \"Save Target Grade\"));\n};\n\nCAPCalculatorPage.propType = {\n  setSemesterOptions: PropTypes.func.isRequired,\n  setTranscript: PropTypes.func.isRequired,\n  setSelectedModules: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  initialSettings: PropTypes.func.isRequired,\n  generateOptions: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired,\n  selectedModules: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  selectedModules: state.modplan.selectedModules\n});\n\nexport default connect(mapStateToProps, {\n  setSemesterOptions,\n  setTranscript,\n  setSelectedModules,\n  updateSettings,\n  initialSettings\n})(CAPCalculatorPage);\n{\n  /* <label>CAP: </label>\n            <input type=\"text\" name=\"prevCAP\" />\n            <label>Credits Earned: </label>\n            <input type=\"text\" name=\"prevCreditsEarned\" />\n            <br/>\n            <br/> */\n}\n{\n  /* <label>Module</label>\n            <label>Grade</label>\n            <br/>\n            <input type=\"text\" placeholder=\"Credits\"/>\n            <input type=\"text\" placeholder=\"MCs\" /> */\n}","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx"],"names":["React","useState","useEffect","connect","PropTypes","setSemesterOptions","setTranscript","updateSettings","initialSettings","setTargetGradYearOptions","setSelectedModules","generateOptions","isEmpty","CAPCalculatorPage","props","gradeList","grade","gradePoint","semester","setSemester","target","setTarget","isPast","setIsPast","year","settings","currentAY","substr","matYear","userInfo","matriculationYear","statusYear","userSemester","currentSemester","cap","semesterOptions","start","end","targetGradYear","diff","modPlan","selectedModules","transcript","convertSemToNumber","sem","currSem","month","handleGradeClick","e","object","module","moduleCode","title","moduleCredit","value","SU","handleCheckboxChange","indexOfDuplicate","unique","i","length","generateTable","filter","location","map","propType","func","isRequired","mapStateToProps","state","modplan"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, setTranscript } from '../../actions/capActions';\nimport { updateSettings, initialSettings, setTargetGradYearOptions } from \"../../actions/settingsActions\";\nimport { setSelectedModules } from \"../../actions/modplanActions\";\nimport { generateOptions } from \"../../utils/optionGenerator\";\nimport isEmpty from 'is-empty';\n\n\nconst CAPCalculatorPage = (props) => {\n    const gradeList = [\n                        {grade: \"A+\", gradePoint: 5},\n                        {grade: \"A\", gradePoint: 5},\n                        {grade: \"A-\", gradePoint: 4.5},\n                        {grade: \"B+\", gradePoint: 4},\n                        {grade: \"B\", gradePoint: 3.5},\n                        {grade: \"B-\", gradePoint: 3},\n                        {grade: \"C+\", gradePoint: 2.5},\n                        {grade: \"C\", gradePoint: 2},\n                        {grade: \"D+\", gradePoint: 1.5},\n                        {grade: \"D\", gradePoint: 1},\n                        {grade: \"F\", gradePoint: 0}\n    ]       \n\n    const [semester, setSemester] = useState(\"Year 1 Semester 1\");\n    const [target, setTarget] = useState([]);\n    const [isPast, setIsPast] = useState();\n\n    //to count what semester the user is in currently\n    const year = props.settings.currentAY.substr(5,4);\n    const matYear = !isEmpty(props.settings.userInfo) ? props.settings.userInfo.matriculationYear.substr(0,4) : 0;\n    const statusYear = year - matYear \n    const userSemester = props.settings.currentSemester === \"Semester 1\" \n                            ? statusYear * 2 - 1 \n                            : statusYear * 2;\n    \n    useEffect(() => {\n        if(isEmpty(props.cap.semesterOptions) && !isEmpty(props.settings.userInfo)){\n            const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n            const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n            const diff = end - start;\n            props.setSemesterOptions(diff);\n        }\n        if(!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.selectedModules)) {\n            props.setSelectedModules(null, props.settings.userInfo.modPlan)\n        } \n\n        if(!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n            props.setTranscript(null, props.settings.userInfo.transcript)\n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        const convertSemToNumber = (sem) => {\n            if(sem.substr(7) === \"Semester 1\") {\n                return sem.substr(5,1) * 2 - 1;\n            } else {\n                return sem.substr(5,1) * 2;\n            }\n        }\n\n        const currSem = convertSemToNumber(semester);\n\n        //check if the semester chosen is in the past or future\n        if (userSemester > currSem) {\n            setIsPast(true);\n        } else if (userSemester === currSem) {\n            if ((props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12) \n                || (props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6)) {\n                    setIsPast(true);\n            }\n        } else {\n            setIsPast(false);\n        }\n    }, [semester])\n\n    \n    const handleGradeClick = (e, object) => {\n        const module = {\n                        moduleCode: object.moduleCode,\n                        title: object.title,\n                        moduleCredit: object.moduleCredit,\n                        grade: e.target.value,\n                        SU: object.SU\n        };\n\n        return isPast ? props.setTranscript(module, props.cap.transcript) : setTarget()\n    }\n\n    const handleCheckboxChange = (e, object) => {\n        let module;\n        let indexOfDuplicate;\n        let unique = true;\n        const transcript = (props.cap.transcript);\n\n        //default module\n        module = {\n            moduleCode: object.moduleCode,\n            title: object.title,\n            moduleCredit: object.moduleCredit,\n            SU: true\n        }\n\n        //to obtain module object from transcript for modification\n        if(!isEmpty(transcript)) {\n            for(let i = 0; i < transcript.length; i++) {\n                if(transcript[i].moduleCode === object.moduleCode) {\n                     indexOfDuplicate = i;\n                     unique = false;\n                }\n            }\n\n            //if moduleAdded exists in transcript, create a module \n            if(!unique) {\n                module = {\n                    moduleCode: transcript[indexOfDuplicate].moduleCode,\n                    title: transcript[indexOfDuplicate].title,\n                    moduleCredit: transcript[indexOfDuplicate].moduleCredit,\n                    grade: transcript[indexOfDuplicate].grade,\n                    SU: transcript[indexOfDuplicate].SU\n                }\n                module.SU = module.SU ? false : true;\n            }\n        } \n        \n        return isPast ? props.setTranscript(module, props.cap.transcript, unique, indexOfDuplicate) : setTarget()\n       \n    }\n\n    const generateTable = () => {\n            return props.selectedModules\n                .filter((object) => object.location === semester)\n                .map((object) => {\n                    const { moduleCode, title, moduleCredit } = object;\n                    return (\n                        <tr key={moduleCode}>\n                            <td>{title}</td>\n                            <td>{moduleCode}</td>\n                            <td>{moduleCredit}</td>\n                            <td>\n                                <select \n                                    name={object}\n                                    onChange={(e) => handleGradeClick(e, object)}>\n                                    <option selected disabled>Grade</option>\n                                    {generateOptions(gradeList, \"grade\")}\n                                </select>\n                            </td>\n                            <td>\n                                <input\n                                    type=\"checkbox\"\n                                    onChange={(e) => handleCheckboxChange(e, object)}/>\n                            </td>\n                        </tr>\n                    )\n                })   \n    }\n\n    \n    return(\n        <div className=\"ml-4\">\n            <h1 className=\"display-3\">CAP Calculator</h1>\n            <h3>CAP at the beginning of the semester: {props.settings.userInfo.cap} </h3>\n            {/* <h5 onClick={() => {this.setState({open: true})}}>Or click here to manually input CAP</h5> */}\n            {/* {this.state.open && (<input type=\"text\"/>)} */}\n            <label>Semester: </label>\n            <select \n                id=\"time\"\n                onChange={(e) => setSemester(e.target.value)}>\n\n                {/* buffer to display to wait for userInfo */}\n                {isEmpty(props.cap.semesterOptions) && <option>Year 1 Semester 1</option>}\n                {generateOptions(props.cap.semesterOptions)}\n            </select>\n            <br/>\n            \n            <h3>Courses taken this semester</h3>\n            <table className=\"table table-hover\">\n                <th>Module Title</th>\n                <th>Module Code</th>\n                <th>Modular Credits</th>\n                <th>Grade</th>\n                <th>S/U</th>\n                <tbody>\n                    {!isEmpty(props.settings.userInfo) && generateTable()}\n                </tbody>\n            </table>\n            <button>{isPast ? \"Save Transcript\" : \"Save Target Grade\" }</button>\n        \n        </div>\n    );\n}\n\n\nCAPCalculatorPage.propType = {\n    setSemesterOptions: PropTypes.func.isRequired,\n    setTranscript: PropTypes.func.isRequired,\n    setSelectedModules: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    initialSettings: PropTypes.func.isRequired,\n    generateOptions: PropTypes.func.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired,\n    selectedModules: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    selectedModules: state.modplan.selectedModules\n});\n\nexport default connect(mapStateToProps,\n                        { setSemesterOptions, setTranscript, setSelectedModules, updateSettings, initialSettings })\n                        (CAPCalculatorPage);\n\n\n\n {/* <label>CAP: </label>\n            <input type=\"text\" name=\"prevCAP\" />\n            <label>Credits Earned: </label>\n            <input type=\"text\" name=\"prevCreditsEarned\" />\n            <br/>\n            <br/> */}\n\n\n\n {/* <label>Module</label>\n            <label>Grade</label>\n            <br/>\n            <input type=\"text\" placeholder=\"Credits\"/>\n            <input type=\"text\" placeholder=\"MCs\" /> */}"]},"metadata":{},"sourceType":"module"}