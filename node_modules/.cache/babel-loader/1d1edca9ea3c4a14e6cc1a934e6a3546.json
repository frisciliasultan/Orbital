{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteText.jsx\";\nimport React from 'react';\nimport \"./AutocompleteText.css\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('https://api.nusmods.com/v2/2019-2020/moduleInfo.json', {\n        'accept': 'application/json'\n      });\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      console.log(body);\n      return body;\n    };\n\n    this.items = ['Fris', 'Dani', 'Hey', 'Ho'];\n    this.state = {\n      suggestions: [],\n      text: '',\n      moduleCode: [],\n      moduleCredit: [],\n      moduleTitle: []\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderSuggestions = this.renderSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.callBackendAPI = this.callBackendAPI.bind(this);\n    this.parseData = this.parseData.bind(this);\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      module: res\n    })).then(res => this.parseData()).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  parseData() {\n    let moduleCodeArray = [];\n    let moduleTitleArray = [];\n    let moduleCreditArray = [];\n    this.state.module.map(object => {\n      const moduleCode = object.moduleCode;\n      const title = object.title;\n      const moduleCredit = object.moduleCredit; // this.setState({ moduleCode: moduleCodeArray,\n      //moduleTitle: this.state.moduleTitle.push(title),\n      //moduleCredit: this.state.moduleCredit.push(moduleCredit)\n      // });\n    });\n  }\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    let suggestions = [];\n    const {\n      module\n    } = this.state;\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n\n      for (let i = 0; i < module.length; i++) {\n        const moduleCode = module[i].moduleCode;\n\n        if (regex.test(moduleCode)) {\n          suggestions.push(`${moduleCode}: ${module[i].title}`);\n        } else if (value < moduleCode.toLowerCase()) {\n          break;\n        }\n      }\n    }\n\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.suggestionsSelected(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 44\n      }\n    }, item)));\n  }\n\n  suggestionsSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: text,\n      onChange: this.handleTextChange,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }), this.renderSuggestions()), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, this.state.moduleCode));\n  }\n\n}\n\nexport default AutoCompleteText;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteText.jsx"],"names":["React","AutoCompleteText","Component","constructor","props","callBackendAPI","response","fetch","body","json","status","Error","message","console","log","items","state","suggestions","text","moduleCode","moduleCredit","moduleTitle","handleTextChange","bind","renderSuggestions","suggestionsSelected","parseData","componentDidMount","then","res","setState","module","catch","err","moduleCodeArray","moduleTitleArray","moduleCreditArray","map","object","title","e","value","target","length","regex","RegExp","i","test","push","toLowerCase","item","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;;AAEA,MAAMC,gBAAN,SAA+BD,KAAK,CAACE,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;;AADgB,SA0BpBC,cA1BoB,GA0BH,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAD,EAAyD;AAAC,kBAAU;AAAX,OAAzD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,aAAOA,IAAP;AACD,KAnCmB;;AAEhB,SAAKO,KAAL,GAAa,CAAC,MAAD,EAAQ,MAAR,EAAe,KAAf,EAAqB,IAArB,CAAb;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,WAAW,EAAE,EAAf;AACEC,MAAAA,IAAI,EAAE,EADR;AAEEC,MAAAA,UAAU,EAAE,EAFd;AAGEC,MAAAA,YAAY,EAAE,EAHhB;AAIEC,MAAAA,WAAW,EAAE;AAJf,KAAb;AAMA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBF,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKlB,cAAL,GAAsB,KAAKA,cAAL,CAAoBkB,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;AACH;;AAEDI,EAAAA,iBAAiB,GAAG;AAChB;AACF,SAAKtB,cAAL,GACGuB,IADH,CACQC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAEF;AAAV,KAAd,CADf,EAEGD,IAFH,CAEQC,GAAG,IAAI,KAAKH,SAAL,EAFf,EAGGM,KAHH,CAGSC,GAAG,IAAIpB,OAAO,CAACC,GAAR,CAAYmB,GAAZ,CAHhB;AAMD,GAzB0C,CA0BzC;;;AAYFP,EAAAA,SAAS,GAAI;AACT,QAAIQ,eAAe,GAAG,EAAtB;AACA,QAAIC,gBAAgB,GAAG,EAAvB;AACA,QAAIC,iBAAiB,GAAG,EAAxB;AAEA,SAAKpB,KAAL,CAAWe,MAAX,CAAkBM,GAAlB,CAAuBC,MAAD,IAAY;AAC9B,YAAMnB,UAAU,GAAGmB,MAAM,CAACnB,UAA1B;AACA,YAAMoB,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,YAAMnB,YAAY,GAAGkB,MAAM,CAAClB,YAA5B,CAH8B,CAO/B;AACiB;AACA;AACL;AACd,KAXD;AAYH;;AAEDE,EAAAA,gBAAgB,CAAEkB,CAAF,EAAK;AACjB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,QAAIxB,WAAW,GAAG,EAAlB;AACA,UAAM;AAAEc,MAAAA;AAAF,QAAa,KAAKf,KAAxB;;AAEA,QAAIyB,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClB,YAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGJ,KAAM,EAArB,EAAwB,GAAxB,CAAd;;AAEA,WAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGf,MAAM,CAACY,MAA1B,EAAkCG,CAAC,EAAnC,EAAuC;AACnC,cAAM3B,UAAU,GAAGY,MAAM,CAACe,CAAD,CAAN,CAAU3B,UAA7B;;AACA,YAAGyB,KAAK,CAACG,IAAN,CAAW5B,UAAX,CAAH,EAA2B;AACvBF,UAAAA,WAAW,CAAC+B,IAAZ,CAAkB,GAAE7B,UAAW,KAAIY,MAAM,CAACe,CAAD,CAAN,CAAUP,KAAM,EAAnD;AAEH,SAHD,MAGO,IAAGE,KAAK,GAAGtB,UAAU,CAAC8B,WAAX,EAAX,EAAqC;AACxC;AACH;AACJ;AAEJ;;AACD,SAAKnB,QAAL,CAAc,OAAO;AAAEb,MAAAA,WAAF;AAAeC,MAAAA,IAAI,EAAEuB;AAArB,KAAP,CAAd;AACH;;AAEDjB,EAAAA,iBAAiB,GAAI;AACjB,UAAM;AAAEP,MAAAA;AAAF,QAAkB,KAAKD,KAA7B;;AACA,QAAIC,WAAW,CAAC0B,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,aAAO,IAAP;AACH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK1B,WAAW,CAACoB,GAAZ,CAAiBa,IAAD,iBAAU;AAAI,MAAA,OAAO,EAAE,MAAM,KAAKzB,mBAAL,CAAyByB,IAAzB,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoDA,IAApD,CAA1B,CADL,CADJ;AAMH;;AAEDzB,EAAAA,mBAAmB,CAAEgB,KAAF,EAAS;AACxB,SAAKX,QAAL,CAAc,OAAO;AACjBZ,MAAAA,IAAI,EAAEuB,KADW;AAEjBxB,MAAAA,WAAW,EAAE;AAFI,KAAP,CAAd;AAIH;;AAEDkC,EAAAA,MAAM,GAAI;AACN,UAAM;AAAEjC,MAAAA;AAAF,QAAW,KAAKF,KAAtB;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AACO,MAAA,KAAK,EAAEE,IADd;AAEO,MAAA,QAAQ,EAAE,KAAKI,gBAFtB;AAGO,MAAA,IAAI,EAAC,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAKC,KAAKE,iBAAL,EALD,CADJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKR,KAAL,CAAWG,UAAhB,CAVJ,CADJ;AAcH;;AApH0C;;AAuH/C,eAAelB,gBAAf","sourcesContent":["import React from 'react';\nimport \"./AutocompleteText.css\";\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        this.items = ['Fris','Dani','Hey','Ho'];\n        this.state = { suggestions: [],\n                       text: '',\n                       moduleCode: [],\n                       moduleCredit: [],\n                       moduleTitle: []\n                     };\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.renderSuggestions = this.renderSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.callBackendAPI = this.callBackendAPI.bind(this);\n        this.parseData = this.parseData.bind(this);\n    }\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n      this.callBackendAPI()\n        .then(res => this.setState({ module: res }))\n        .then(res => this.parseData())\n        .catch(err => console.log(err));\n      \n\n    }\n      // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n      const response = await fetch('https://api.nusmods.com/v2/2019-2020/moduleInfo.json', {'accept': 'application/json'});\n      const body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      console.log(body);\n      return body;\n    };\n\n    parseData () {\n        let moduleCodeArray = [];\n        let moduleTitleArray = [];\n        let moduleCreditArray = [];\n\n        this.state.module.map((object) => {\n            const moduleCode = object.moduleCode;\n            const title = object.title;\n            const moduleCredit = object.moduleCredit;\n\n\n\n           // this.setState({ moduleCode: moduleCodeArray,\n                            //moduleTitle: this.state.moduleTitle.push(title),\n                            //moduleCredit: this.state.moduleCredit.push(moduleCredit)\n                       // });\n        });\n    }\n\n    handleTextChange (e) {\n        const value = e.target.value;\n        let suggestions = [];\n        const { module } = this.state;\n        \n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n\n            for(let i = 0; i < module.length; i++) {\n                const moduleCode = module[i].moduleCode\n                if(regex.test(moduleCode)) {\n                    suggestions.push(`${moduleCode}: ${module[i].title}`);\n\n                } else if(value < moduleCode.toLowerCase()) {\n                    break;\n                }\n            }\n\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n\n        return (\n            <ul>\n                {suggestions.map((item) => <li onClick={() => this.suggestionsSelected(item)}>{item}</li>)}\n            </ul>\n        );\n\n    }\n\n    suggestionsSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    render () {\n        const { text } = this.state;\n        return (\n            <div>\n                <div className=\"AutoCompleteText\">\n                <input \n                       value={text}\n                       onChange={this.handleTextChange}\n                       type=\"text\" />\n                {this.renderSuggestions()}\n                \n                </div>\n\n                <h1>{this.state.moduleCode}</h1>    \n                </div>\n        )\n    }\n}\n\nexport default AutoCompleteText;"]},"metadata":{},"sourceType":"module"}