{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n  const [displayCard, setDisplayCard] = useState(null);\n  useEffect(() => {\n    return /*#__PURE__*/React.createElement(ModuleCard, {\n      id: \"card_\" + i,\n      className: \"card\",\n      title: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    });\n  });\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => item.id,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(true);\n  }\n\n  function updateModuleCards(item) {\n    console.log(moduleCodeTitle + 'beginning');\n    let newModuleCodeTitle = moduleCodeTitle;\n\n    if (!newModuleCodeTitle.includes(item)) {\n      newModuleCodeTitle.push(item);\n      setModuleCodeTitle(newModuleCodeTitle);\n    }\n\n    console.log(moduleCodeTitle);\n  }\n\n  function generateModuleCards() {\n    console.log(moduleCodeTitle);\n    return moduleCodeTitle.map((item, i) => {\n      return /*#__PURE__*/React.createElement(ModuleCard, {\n        id: \"card_\" + i,\n        className: \"card\",\n        title: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, props.year + ' ' + props.semester), generateModuleCards(), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    updateModuleCards: updateModuleCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Add Module\"));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","DropdownButton","Dropdown","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","moduleCodeTitle","setModuleCodeTitle","displayCard","setDisplayCard","i","item","isOver","drop","accept","CARD","monitor","id","collect","handleButtonClick","updateModuleCards","console","log","newModuleCodeTitle","includes","push","generateModuleCards","map","year","semester"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { DropdownButton, Dropdown, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n    const [displayCard, setDisplayCard] = useState(null);\n\n    useEffect( () => {\n        return (\n            <ModuleCard\n                id={\"card_\" + i}\n                className=\"card\"\n                title={item}>\n            </ModuleCard>\n        )\n        })\n    \n    \n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => (item.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n\n    \n\n    function handleButtonClick() {\n        setIsTextBoxOpen(true);\n     }\n\n    function updateModuleCards(item) {\n        console.log(moduleCodeTitle + 'beginning');\n        let newModuleCodeTitle = moduleCodeTitle;\n        if (!newModuleCodeTitle.includes(item)) {\n            newModuleCodeTitle.push(item);\n            setModuleCodeTitle(newModuleCodeTitle);\n            \n        }\n        console.log(moduleCodeTitle);\n    }\n\n    function generateModuleCards() {\n        console.log(moduleCodeTitle);\n\n        return(\n                moduleCodeTitle.map((item, i) => {\n                    return (\n                        <ModuleCard\n                            id={\"card_\" + i}\n                            className=\"card\"\n                            title={item}>\n                        </ModuleCard>\n                    )\n                })\n            \n        )\n        \n    }\n\n\n\n        return (\n            <div   \n                ref={drop}\n                id={props.id}\n            >\n                \n                <h3>{props.year + ' ' + props.semester}</h3>\n                {generateModuleCards()}\n                {isTextBoxOpen && <AutoCompleteText updateModuleCards={updateModuleCards}/>}\n                \n                <Button onClick={handleButtonClick}>Add Module</Button>\n            </div>\n        )\n        \n    \n    \n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}