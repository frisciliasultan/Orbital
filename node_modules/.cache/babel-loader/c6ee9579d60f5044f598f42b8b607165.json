{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [isBoardFilled, setIsBoardFilled] = useState(false);\n  const [selectedModules, setSelectedModules] = useState(); // const selectedModules = props.selectedModules;\n\n  useEffect(() => {\n    const updateIsBoardFilled = () => {\n      if (selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n        setIsBoardFilled(true);\n      } else {\n        setIsBoardFilled(false);\n      }\n    };\n\n    updateIsBoardFilled();\n    setSelectedModules(props.selectedModules);\n  });\n\n  const generateCards = () => selectedModules.filter((object, i) => object.location === props.id).map((object, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: object.moduleCode,\n    location: props.id,\n    className: \"card\",\n    title: `${object.moduleCode}: ${object.title}`,\n    MCs: object.moduleCredit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 18\n    }\n  }));\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n  } // function updateIsBoardFilled() {\n  //     if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n  //         setIsBoardFilled(true);\n  //     } else {\n  //         setIsBoardFilled(false);\n  //     }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    style: {\n      width: '20rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '165px',\n      height: !isBoardFilled && '59px',\n      outline: isBoardFilled ? 'none' : '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, isBoardFilled ? generateCards() : 'Drop module here'), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    location: props.id,\n    updateSelectedModules: props.updateSelectedModules,\n    module: props.module,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Add Module\")));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","isBoardFilled","setIsBoardFilled","selectedModules","setSelectedModules","updateIsBoardFilled","filter","object","i","location","id","length","generateCards","map","moduleCode","title","moduleCredit","isOver","drop","accept","CARD","item","monitor","updateModuleLocation","collect","handleButtonClick","semester","width","height","outline","updateSelectedModules","module"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [isBoardFilled, setIsBoardFilled] = useState(false);\n    const [selectedModules, setSelectedModules] = useState();\n    // const selectedModules = props.selectedModules;\n    \n    useEffect(() => { \n        const updateIsBoardFilled = () => {\n            if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n                setIsBoardFilled(true);\n            } else {\n                setIsBoardFilled(false);\n            }\n        }\n        updateIsBoardFilled();\n        setSelectedModules(props.selectedModules);\n    })\n        \n    const generateCards = () => selectedModules\n        .filter((object, i) => object.location === props.id)\n        .map((object, i) => \n                (<ModuleCard\n                    id={object.moduleCode}\n                    location={props.id}\n                    className=\"card\"\n                    title={`${object.moduleCode}: ${object.title}`}\n                    MCs={object.moduleCredit}/>));\n\n        \n\n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n     }\n\n    // function updateIsBoardFilled() {\n    //     if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n    //         setIsBoardFilled(true);\n    //     } else {\n    //         setIsBoardFilled(false);\n    //     }\n    // }\n \n\n        \n        return (\n            \n            <div>\n                <h3>{props.semester}</h3>\n            <div   \n                ref={drop}\n                id={props.id}\n                style={{width: '20rem'}}\n            >\n\n            <div style={{width: '165px', \n                        height: (!isBoardFilled) && '59px', \n                        outline: isBoardFilled ? 'none' : '1px dotted'}}>\n                            {isBoardFilled ? generateCards() : 'Drop module here'}\n            </div>\n            {isTextBoxOpen && <AutoCompleteText \n                                            location={props.id}\n                                            updateSelectedModules={props.updateSelectedModules}\n                                            module={props.module}/>}\n                <Button onClick={handleButtonClick}>Add Module</Button>\n                \n                </div>\n            </div>\n        )\n   \n}\n\nexport default Board;\n\n"]},"metadata":{},"sourceType":"module"}