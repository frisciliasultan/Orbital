{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteSearch.jsx\";\nimport React from 'react';\nimport \"./AutocompleteSearch.css\";\n\nclass AutoCompleteText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('https://api.nusmods.com/v2/2019-2020/moduleInfo.json', {\n        'accept': 'application/json'\n      });\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      } //console.log(body);\n\n\n      return body;\n    };\n\n    this.items = ['Fris', 'Dani', 'Hey', 'Ho'];\n    this.state = {\n      suggestions: [],\n      text: ''\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderSuggestions = this.renderSuggestions.bind(this);\n    this.suggestionsSelected = this.suggestionsSelected.bind(this);\n    this.callBackendAPI = this.callBackendAPI.bind(this);\n    this.parseData = this.parseData.bind(this);\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      module: res\n    })).catch(err => console.log(err));\n    this.parseData();\n    console.log(this.state.moduleCode);\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  parseData() {\n    this.state.module.map(object => {\n      const {\n        moduleCode,\n        title,\n        moduleCredit\n      } = object;\n      this.setState({\n        moduleCode: moduleCode,\n        moduleTitle: title,\n        moduleCredit: moduleCredit\n      });\n    });\n  }\n\n  handleTextChange(e) {\n    const value = e.target.value;\n    let suggestions = [];\n\n    if (value.length > 0) {\n      const regex = new RegExp(`^${value}`, 'i');\n      suggestions = this.state.moduleCode.sort().filter(v => regex.test(v));\n    }\n\n    this.setState(() => ({\n      suggestions,\n      text: value\n    }));\n  }\n\n  renderSuggestions() {\n    const {\n      suggestions\n    } = this.state;\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, suggestions.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      onClick: () => this.suggestionsSelected(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 44\n      }\n    }, item)));\n  }\n\n  suggestionsSelected(value) {\n    this.setState(() => ({\n      text: value,\n      suggestions: []\n    }));\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: text,\n      onChange: this.handleTextChange,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }), this.renderSuggestions());\n  }\n\n}\n\nexport default AutoCompleteText;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/AutocompleteSearch.jsx"],"names":["React","AutoCompleteText","Component","constructor","props","callBackendAPI","response","fetch","body","json","status","Error","message","items","state","suggestions","text","handleTextChange","bind","renderSuggestions","suggestionsSelected","parseData","componentDidMount","then","res","setState","module","catch","err","console","log","moduleCode","map","object","title","moduleCredit","moduleTitle","e","value","target","length","regex","RegExp","sort","filter","v","test","item","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"./AutocompleteSearch.css\";\n\nclass AutoCompleteText extends React.Component {\n    constructor (props) {\n        super(props);\n        this.items = ['Fris','Dani','Hey','Ho'];\n        this.state = { suggestions: [],\n                       text: ''\n                     };\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.renderSuggestions = this.renderSuggestions.bind(this);\n        this.suggestionsSelected = this.suggestionsSelected.bind(this);\n        this.callBackendAPI = this.callBackendAPI.bind(this);\n        this.parseData = this.parseData.bind(this);\n    }\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n      this.callBackendAPI()\n        .then(res => this.setState({ module: res }))\n        .catch(err => console.log(err));\n\n      this.parseData();\n      \n      console.log(this.state.moduleCode);\n    }\n      // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n      const response = await fetch('https://api.nusmods.com/v2/2019-2020/moduleInfo.json', {'accept': 'application/json'});\n      const body = await response.json();\n    \n      if (response.status !== 200) {\n        throw Error(body.message) \n      }\n      //console.log(body);\n      return body;\n    };\n\n    parseData () {\n        this.state.module.map((object) => {\n            const { moduleCode, title, moduleCredit} = object;\n            this.setState({ moduleCode: moduleCode,\n                            moduleTitle: title,\n                            moduleCredit: moduleCredit});\n        })\n    }\n\n    handleTextChange (e) {\n        const value = e.target.value;\n        let suggestions = [];\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`, 'i');\n            suggestions = this.state.moduleCode.sort().filter(v => regex.test(v));\n        }\n        this.setState(() => ({ suggestions, text: value }));\n    }\n\n    renderSuggestions () {\n        const { suggestions } = this.state;\n        if (suggestions.length === 0) {\n            return null;\n        }\n\n        return (\n            <ul>\n                {suggestions.map((item) => <li onClick={() => this.suggestionsSelected(item)}>{item}</li>)}\n            </ul>\n        );\n\n    }\n\n    suggestionsSelected (value) {\n        this.setState(() => ({\n            text: value,\n            suggestions: [],\n        }))\n    }\n\n    render () {\n        const { text } = this.state;\n        return (\n                <div className=\"AutoCompleteText\">\n                <input \n                       value={text}\n                       onChange={this.handleTextChange}\n                       type=\"text\" />\n                {this.renderSuggestions()}\n                </div>\n        )\n    }\n}\n\nexport default AutoCompleteText;"]},"metadata":{},"sourceType":"module"}