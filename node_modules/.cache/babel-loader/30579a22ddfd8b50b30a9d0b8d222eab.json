{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Subrules.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Spinner } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setCallBackendNow } from \"../../actions/modplanActions\";\n\nfunction Subrules(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRuleFulfilled, setIsRuleFulfilled] = useState();\n  const [isBackendCalled, setIsBackendCalled] = useState(false);\n  const modules = props.modplan.selectedModules ? props.modplan.selectedModules.map(object => object.moduleCode) : null;\n  useEffect(() => {\n    const callBackendFunc = async ruleTag => {\n      try {\n        const link = \"http://172.19.162.53:3000/eval/\";\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'accept': 'application/json'\n          },\n          body: JSON.stringify({\n            plan: {\n              modules: modules\n            },\n            tag: props.ruleTag\n          })\n        };\n        setIsLoading(true);\n        const response = await fetch(link, requestOptions);\n        const status = await response.json();\n\n        if (!response.ok) {\n          throw new Error(\"An error has occurred\");\n        } else {\n          setIsRuleFulfilled(status);\n          setIsLoading(false);\n          setIsBackendCalled(true);\n        }\n      } catch (error) {\n        setIsLoading(false);\n        console.error('There was an error!', error);\n      }\n\n      ;\n    };\n\n    if (props.modplan.callBackendNow) {\n      callBackendFunc(props.ruleTag);\n      props.setCallBackendNow(false);\n    } // props.updateCallBackendNow();\n\n  }, [props.modplan.callBackendNow]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    style: {\n      color: isBackendCalled ? isRuleFulfilled ? 'green' : 'red' : 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, props.ruleName), isLoading && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    variant: \"success\",\n    role: \"status\",\n    as: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"Loading...\")));\n}\n\nSubrules.propTypes = {\n  setCallBackendNow: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  setCallBackendNow\n})(Subrules);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Subrules.jsx"],"names":["React","useState","useEffect","Card","Spinner","PropTypes","connect","setCallBackendNow","Subrules","props","isLoading","setIsLoading","isRuleFulfilled","setIsRuleFulfilled","isBackendCalled","setIsBackendCalled","modules","modplan","selectedModules","map","object","moduleCode","callBackendFunc","ruleTag","link","requestOptions","method","headers","body","JSON","stringify","plan","tag","response","fetch","status","json","ok","Error","error","console","callBackendNow","color","ruleName","propTypes","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card, Spinner } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setCallBackendNow } from \"../../actions/modplanActions\";\n\nfunction Subrules(props) {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isRuleFulfilled, setIsRuleFulfilled] = useState();\n    const [isBackendCalled, setIsBackendCalled] = useState(false);\n    const modules = props.modplan.selectedModules ? props.modplan.selectedModules.map((object) => object.moduleCode) : null;\n\n    useEffect(() => {\n        const callBackendFunc = async (ruleTag) => {\n            try{\n                const link = \"http://172.19.162.53:3000/eval/\";\n                const requestOptions = {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json',\n                                'accept': 'application/json'            \n                    },\n                    body: JSON.stringify({ plan: {modules: modules},\n                                           tag: props.ruleTag\n                                        })\n                };\n                setIsLoading(true);\n                \n                \n                const response = await fetch(link, requestOptions);\n                const status = await response.json();\n\n                if(!response.ok) {\n                    throw new Error(\"An error has occurred\")\n                } else {\n                    setIsRuleFulfilled(status);\n                    setIsLoading(false);\n                    setIsBackendCalled(true);\n                }\n\n            } catch(error) {\n                          setIsLoading(false);\n                          console.error('There was an error!', error);\n                        };\n        };\n\n        if(props.modplan.callBackendNow) {\n                callBackendFunc(props.ruleTag);\n                props.setCallBackendNow(false);\n        } \n        // props.updateCallBackendNow();\n        \n    }, [props.modplan.callBackendNow]);\n\n    return (    \n        <div>\n            <Card.Title \n                        style={{color: isBackendCalled ? (isRuleFulfilled ? 'green' : 'red') : 'black'}}>{props.ruleName}</Card.Title>\n            {isLoading && <Spinner animation=\"border\" variant=\"success\" role=\"status\" as=\"span\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>}\n        </div>\n    )\n\n}\n\nSubrules.propTypes = {\n    setCallBackendNow: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, { setCallBackendNow }) (Subrules);"]},"metadata":{},"sourceType":"module"}