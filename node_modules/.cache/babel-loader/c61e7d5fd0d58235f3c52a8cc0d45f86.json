{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/ModulePlannerPage.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { handleSaveClick, generateObject } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty';\n\nconst ModulePlannerPageTemp = props => {\n  const module = props.modplan.modules;\n  const [noOfYear, setNoOfYear] = useState(4);\n  useEffect(() => {\n    if (isEmpty(props.modplan.rules)) {\n      props.callBackendAPI('Rules', \"r_ulr\", \"r_cs_degree\");\n    }\n\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI('NUSMods');\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n      console.log(props.modplan.selectedModules);\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    }\n  }, [props.settings.userInfo]); // useEffect(() => {\n  //     if(!isEmpty(props.settings.userInfo)) {\n  //         const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n  //         const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n  //         const noOfYear = end - start;\n  //         setNoOfYear(noOfYear);\n  //     }\n  // }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear])\n\n  const handleEvalButtonClick = () => {\n    const modules = props.modplan.selectedModules;\n\n    if (isEmpty(modules)) {\n      alert('Please add modules before evaluating');\n    } else {\n      props.setCallBackendNow(true);\n    }\n  }; // const generateYearObject = (noOfYear) => {\n  //     const year = Number(props.settings.userInfo.matriculationYear.substr(0,4));\n  //     let display = [];\n  //     for(let i = 1; i <= noOfYear; i ++) {\n  //         const start = year + i - 1;\n  //         display.push({\n  //             year: `Year ${i}`,\n  //             AY: `${start}/${start + 1}`\n  //         })\n  //     }\n  //     return display.map((object) => {\n  //         return (\n  //             <YearDisplay\n  //                 year={object.year}\n  //                 AY={object.AY}\n  //                 module={module} />\n  //         )\n  //     })\n  // }\n  // const generateYearDisplay = (yearObject) => {\n  //     return yearObject.map((object) => {\n  //         return (\n  //             <YearDisplay\n  //                 year={object.year}\n  //                 AY={object.AY}\n  //                 module={module} />\n  //         )\n  //     })\n  // }\n\n\n  return /*#__PURE__*/React.createElement(DndProvider, {\n    backend: Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-module-planner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, !isEmpty(props.settings.userInfo.matriculationYear) && generateObject(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear, \"yearDisplay\"), /*#__PURE__*/React.createElement(TrashBox, {\n    module: props.modplan.selectedModules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    id: \"eval-button\",\n    onClick: () => handleEvalButtonClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"Evaluate\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, \"Save\"), !isEmpty(props.success) && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, props.success), !isEmpty(props.success) && setTimeout(props.removeSuccess, 500) && clearTimeout(setTimeout(props.removeSuccess, 2000)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, \"Click on each requirement for further information\"), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Rules, {\n    rules: props.modplan.rules,\n    settings: props.settings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })));\n};\n\nModulePlannerPageTemp.propTypes = {\n  callBackendAPI: PropTypes.func.isRequired,\n  setCallBackendNow: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  callBackendAPI,\n  setCallBackendNow,\n  updateSettings,\n  initialSettings,\n  setSelectedModules,\n  removeSuccess\n})(ModulePlannerPageTemp);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/ModulePlannerPage.jsx"],"names":["React","useEffect","useState","Board","Rules","TrashBox","YearDisplay","Button","Card","HTML5Backend","Backend","DndProvider","connect","callBackendAPI","setCallBackendNow","setSelectedModules","updateSettings","initialSettings","removeSuccess","handleSaveClick","generateObject","PropTypes","isEmpty","ModulePlannerPageTemp","props","module","modplan","modules","noOfYear","setNoOfYear","rules","settings","userInfo","modPlan","selectedModules","console","log","handleEvalButtonClick","alert","matriculationYear","targetGradYear","success","color","setTimeout","clearTimeout","propTypes","func","isRequired","object","cap","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport YearDisplay from './YearDisplay';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { handleSaveClick, generateObject } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty'\n\n\nconst ModulePlannerPageTemp = (props) => {\n\n    const module = props.modplan.modules;\n    const [noOfYear, setNoOfYear] = useState(4);\n\n    useEffect(() => {\n        if(isEmpty(props.modplan.rules)) {\n            props.callBackendAPI('Rules', \"r_ulr\", \"r_cs_degree\");\n        }\n        \n        if(isEmpty(props.modplan.modules)){\n            props.callBackendAPI('NUSMods');\n        } \n    }, [])\n\n    useEffect(() => {\n            if(!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n                console.log(props.modplan.selectedModules)\n                props.setSelectedModules(null, props.settings.userInfo.modPlan)\n            }\n    }, [props.settings.userInfo])\n\n    // useEffect(() => {\n    //     if(!isEmpty(props.settings.userInfo)) {\n    //         const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n    //         const end = props.settings.userInfo.targetGradYear.substr(5, 4);\n    //         const noOfYear = end - start;\n    //         setNoOfYear(noOfYear);\n    //     }\n\n    // }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear])\n\n    const handleEvalButtonClick = () => {\n        const modules = props.modplan.selectedModules;\n        if (isEmpty(modules)) {\n            alert('Please add modules before evaluating');\n        } else {\n            props.setCallBackendNow(true);\n        }\n    }\n\n    // const generateYearObject = (noOfYear) => {\n    //     const year = Number(props.settings.userInfo.matriculationYear.substr(0,4));\n    //     let display = [];\n    //     for(let i = 1; i <= noOfYear; i ++) {\n    //         const start = year + i - 1;\n    //         display.push({\n    //             year: `Year ${i}`,\n    //             AY: `${start}/${start + 1}`\n    //         })\n    //     }\n    //     return display.map((object) => {\n    //         return (\n    //             <YearDisplay\n    //                 year={object.year}\n    //                 AY={object.AY}\n    //                 module={module} />\n    //         )\n    //     })\n    // }\n\n    // const generateYearDisplay = (yearObject) => {\n    //     return yearObject.map((object) => {\n    //         return (\n    //             <YearDisplay\n    //                 year={object.year}\n    //                 AY={object.AY}\n    //                 module={module} />\n    //         )\n    //     })\n    // }\n\n\n    return (\n        <DndProvider backend={Backend} >\n            <div className=\"container-module-planner\">\n                {!isEmpty(props.settings.userInfo.matriculationYear) \n                    && generateObject(props.settings.userInfo.matriculationYear, \n                            props.settings.userInfo.targetGradYear,\n                            \"yearDisplay\")}\n                \n                <TrashBox\n                        module={props.modplan.selectedModules}/>\n\n\n                <br/>\n\n                <Button className=\"button\" id=\"eval-button\" onClick={() => handleEvalButtonClick()}>Evaluate</Button>\n                <br/>\n\n                <Button className=\"button\" onClick={() => handleSaveClick(props)} >Save</Button>\n                {!isEmpty(props.success) && \n                <p style={{color: \"green\"}}>\n                    {props.success}\n                </p>\n                \n                }\n                \n                {!isEmpty(props.success) && \n                    setTimeout(props.removeSuccess, 500) &&\n                    clearTimeout(setTimeout(props.removeSuccess, 2000))}\n\n                <br/>\n                <br/>\n                <p>Click on each requirement for further information</p>\n                <Card>\n                    <Rules\n                        rules={props.modplan.rules}\n                        settings={props.settings}/>\n                </Card>\n                <br/>\n            </div>\n        </DndProvider>\n    )\n}\n\nModulePlannerPageTemp.propTypes = {\n    callBackendAPI: PropTypes.func.isRequired,\n    setCallBackendNow: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    removeSuccess: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success\n});\n\nexport default connect(mapStateToProps, \n                    { callBackendAPI, setCallBackendNow, updateSettings, initialSettings, setSelectedModules, removeSuccess }) \n                    (ModulePlannerPageTemp);\n"]},"metadata":{},"sourceType":"module"}