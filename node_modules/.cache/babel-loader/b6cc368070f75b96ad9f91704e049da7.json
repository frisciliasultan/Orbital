{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/Subrules.jsx\";\nimport React, { useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setCallBackendNow } from \"../../actions/modplanActions\";\n\nfunction Subrules(props) {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [isRuleFulfilled, setIsRuleFulfilled] = useState();\n  // const [isBackendCalled, setIsBackendCalled] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const rule = props.rule;\n  console.log(rule.evaluation + rule.name); // useEffect(() => {\n  //     const callBackendFunc = async (ruleTag) => {\n  //         try{\n  //             const link = \"https://modtree-api.netlify.app/.netlify/functions/eval/\";\n  //             const requestOptions = {\n  //                 method: 'POST',\n  //                 headers: { 'Content-Type': 'application/json',\n  //                             'accept': 'application/json'            \n  //                 },\n  //                 body: JSON.stringify({ plan: {modules: modules},\n  //                                        tag: props.ruleTag\n  //                                     })\n  //             };\n  //             setIsLoading(true);\n  //             const response = await fetch(link, requestOptions);\n  //             const status = await response.json();\n  //             if(!response.ok) {\n  //                 throw new Error(\"An error has occurred\")\n  //             } else {\n  //                 setIsRuleFulfilled(status);\n  //                 setIsLoading(false);\n  //                 setIsBackendCalled(true);\n  //             }\n  //         } catch(error) {\n  //                       setIsLoading(false);\n  //                       console.error('There was an error!', error);\n  //                     };\n  //     };\n  //     if(props.modplan.callBackendNow) {\n  //             callBackendFunc(props.ruleTag);\n  //             props.setCallBackendNow(false);\n  //     } \n  // }, [props.modplan.callBackendNow]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    onClick: () => setIsOpen(!isOpen),\n    style: {\n      color: rule.eval ? 'green' : 'red',\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, rule.name), isOpen && /*#__PURE__*/React.createElement(Card.Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 24\n    }\n  }, rule.desc));\n}\n\nSubrules.propTypes = {\n  setCallBackendNow: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, {\n  setCallBackendNow\n})(Subrules);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/Subrules.jsx"],"names":["React","useState","Card","PropTypes","connect","setCallBackendNow","Subrules","props","isOpen","setIsOpen","rule","console","log","evaluation","name","color","eval","cursor","desc","propTypes","func","isRequired","modplan","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMS,IAAI,GAAGH,KAAK,CAACG,IAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,UAAL,GAAkBH,IAAI,CAACI,IAAnC,EANqB,CAOrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,OAAO,EAAE,MAAML,SAAS,CAAC,CAACD,MAAF,CAApC;AACY,IAAA,KAAK,EAAE;AAACO,MAAAA,KAAK,EAAEL,IAAI,CAACM,IAAL,GAAY,OAAZ,GAAsB,KAA9B;AAAqCC,MAAAA,MAAM,EAAE;AAA7C,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAC6EP,IAAI,CAACI,IADlF,CADJ,EAGKN,MAAM,iBAAI,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBE,IAAI,CAACQ,IAArB,CAHf,CADJ;AASH;;AAEDZ,QAAQ,CAACa,SAAT,GAAqB;AACjBd,EAAAA,iBAAiB,EAAEF,SAAS,CAACiB,IAAV,CAAeC,UADjB;AAEjBC,EAAAA,OAAO,EAAEnB,SAAS,CAACoB,MAAV,CAAiBF;AAFT,CAArB;;AAKA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAC9BH,EAAAA,OAAO,EAAEG,KAAK,CAACH;AADe,CAAL,CAA7B;;AAIA,eAAelB,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAAiDC,QAAjD,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Card} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setCallBackendNow } from \"../../actions/modplanActions\";\n\nfunction Subrules(props) {\n    // const [isLoading, setIsLoading] = useState(false);\n    // const [isRuleFulfilled, setIsRuleFulfilled] = useState();\n    // const [isBackendCalled, setIsBackendCalled] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const rule = props.rule;\n    console.log(rule.evaluation + rule.name)\n    // useEffect(() => {\n    //     const callBackendFunc = async (ruleTag) => {\n    //         try{\n    //             const link = \"https://modtree-api.netlify.app/.netlify/functions/eval/\";\n    //             const requestOptions = {\n    //                 method: 'POST',\n    //                 headers: { 'Content-Type': 'application/json',\n    //                             'accept': 'application/json'            \n    //                 },\n    //                 body: JSON.stringify({ plan: {modules: modules},\n    //                                        tag: props.ruleTag\n    //                                     })\n    //             };\n    //             setIsLoading(true);\n                \n                \n    //             const response = await fetch(link, requestOptions);\n    //             const status = await response.json();\n\n    //             if(!response.ok) {\n    //                 throw new Error(\"An error has occurred\")\n    //             } else {\n    //                 setIsRuleFulfilled(status);\n    //                 setIsLoading(false);\n    //                 setIsBackendCalled(true);\n    //             }\n\n    //         } catch(error) {\n    //                       setIsLoading(false);\n    //                       console.error('There was an error!', error);\n    //                     };\n    //     };\n\n    //     if(props.modplan.callBackendNow) {\n    //             callBackendFunc(props.ruleTag);\n    //             props.setCallBackendNow(false);\n    //     } \n        \n    // }, [props.modplan.callBackendNow]);\n\n    return (    \n        <div>\n            <Card.Title onClick={() => setIsOpen(!isOpen)}\n                        style={{color: rule.eval ? 'green' : 'red', cursor: 'pointer'}}>{rule.name}</Card.Title>\n            {isOpen && <Card.Subtitle>{rule.desc}</Card.Subtitle>}\n            \n        </div>\n    )\n\n}\n\nSubrules.propTypes = {\n    setCallBackendNow: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    modplan: state.modplan\n});\n\nexport default connect(mapStateToProps, { setCallBackendNow }) (Subrules);"]},"metadata":{},"sourceType":"module"}