{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/ModulePlannerPage.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { Alert, Spin } from \"antd\";\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect, dispatch } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules, evalRules, setRules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { handleSaveClick, generateObject } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty';\nimport LoadingDots from '../Loading Page/LoadingDots';\nimport { LoadingOutlined } from '@ant-design/icons';\nconst antIcon = /*#__PURE__*/React.createElement(LoadingOutlined, {\n  style: {\n    fontSize: 24\n  },\n  spin: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 17\n  }\n});\n\nconst ModulePlannerPageTemp = props => {\n  const module = props.modplan.modules;\n  const [ruleFunction, setRuleFunction] = useState();\n  useEffect(() => {\n    const fetchRules = async () => {\n      const evalfunc = await props.callBackendAPI(\"Rules\", props.settings.userInfo.modPlan);\n      setRuleFunction(evalfunc);\n    };\n\n    if (!isEmpty(props.settings.userInfo)) {\n      if (isEmpty(props.modplan.rules)) {\n        fetchRules();\n      }\n\n      if (!isEmpty(props.settings.userInfo.modPlan)) {\n        if (isEmpty(props.modplan.selectedModules)) {\n          props.setSelectedModules(null, props.settings.userInfo.modPlan);\n        }\n      }\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI('NUSMods');\n    }\n  }, []);\n\n  const handleEvalButtonClick = async () => {\n    const modules = props.modplan.selectedModules;\n\n    if (isEmpty(modules)) {\n      return /*#__PURE__*/React.createElement(Alert, {\n        message: \"Please add modules before evaluating\",\n        type: \"warning\",\n        showIcon: true,\n        closable: true,\n        style: {\n          margin: \"15px 0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      });\n    } else {\n      props.setCallBackendNow(true);\n      const newEvaluatedRules = await props.evalRules(ruleFunction, props.modplan.selectedModules);\n      dispatch(props.setRules(newEvaluatedRules));\n    }\n  };\n\n  return isEmpty(props.settings.userInfo) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(DndProvider, {\n    backend: Backend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-module-planner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"module-planner-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, \"Module Planner\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"year-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, !isEmpty(props.settings.userInfo.matriculationYear) && generateObject(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear, \"yearDisplay\", module)), /*#__PURE__*/React.createElement(TrashBox, {\n    module: module,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    id: \"eval-button\",\n    onClick: () => handleEvalButtonClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Evaluate\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Save\"), !isEmpty(props.success) && /*#__PURE__*/React.createElement(Alert, {\n    message: props.success,\n    type: \"success\",\n    showIcon: true,\n    closable: true,\n    style: {\n      margin: \"15px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }), !isEmpty(props.success) && setTimeout(props.removeSuccess, 2000) && clearTimeout(setTimeout(props.removeSuccess, 2000)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, \"Click on each requirement for further information\"), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    spinning: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }), !isEmpty(props.modplan.rules) && /*#__PURE__*/React.createElement(Rules, {\n    rules: props.modplan.rules,\n    settings: props.settings,\n    ruleFunction: ruleFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  })));\n};\n\nModulePlannerPageTemp.propTypes = {\n  callBackendAPI: PropTypes.func.isRequired,\n  setCallBackendNow: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  modplan: PropTypes.object.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  callBackendAPI,\n  setCallBackendNow,\n  updateSettings,\n  initialSettings,\n  setSelectedModules,\n  removeSuccess,\n  evalRules,\n  setRules\n})(ModulePlannerPageTemp);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/Module Planner Page/ModulePlannerPage.jsx"],"names":["React","useEffect","useState","Board","Rules","TrashBox","Button","Card","Alert","Spin","HTML5Backend","Backend","DndProvider","connect","dispatch","callBackendAPI","setCallBackendNow","setSelectedModules","evalRules","setRules","updateSettings","initialSettings","removeSuccess","handleSaveClick","generateObject","PropTypes","isEmpty","LoadingDots","LoadingOutlined","antIcon","fontSize","ModulePlannerPageTemp","props","module","modplan","modules","ruleFunction","setRuleFunction","fetchRules","evalfunc","settings","userInfo","modPlan","rules","selectedModules","handleEvalButtonClick","margin","newEvaluatedRules","matriculationYear","targetGradYear","success","setTimeout","clearTimeout","propTypes","func","isRequired","object","cap","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from './Board';\nimport Rules from './Rules';\nimport TrashBox from './TrashBox';\nimport './plannertemp.css';\nimport { Button, Card } from 'react-bootstrap';\nimport { Alert, Spin } from \"antd\";\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport { connect, dispatch } from 'react-redux';\nimport { callBackendAPI, setCallBackendNow, setSelectedModules, evalRules, setRules } from '../../actions/modplanActions';\nimport { updateSettings, initialSettings } from \"../../actions/settingsActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { handleSaveClick, generateObject } from \"../../utils/commonFunctions\";\nimport PropTypes from 'prop-types';\nimport isEmpty from 'is-empty'\nimport LoadingDots from '../Loading Page/LoadingDots';\nimport { LoadingOutlined } from '@ant-design/icons';\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n\nconst ModulePlannerPageTemp = (props) => {\n    const module = props.modplan.modules;\n    const [ruleFunction, setRuleFunction] = useState();\n\n    useEffect(() => {\n        const fetchRules = async () => {\n            const evalfunc = await props.callBackendAPI(\"Rules\", props.settings.userInfo.modPlan);\n            setRuleFunction(evalfunc);\n        } \n        if(!isEmpty(props.settings.userInfo)) {\n            if(isEmpty(props.modplan.rules)) {\n                fetchRules();\n            }\n\n            if(!isEmpty(props.settings.userInfo.modPlan)) {\n                if(isEmpty(props.modplan.selectedModules)) {\n                    props.setSelectedModules(null, props.settings.userInfo.modPlan);\n                } \n            }\n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        if(isEmpty(props.modplan.modules)){\n            props.callBackendAPI('NUSMods');\n        } \n    }, [])\n\n    const handleEvalButtonClick = async () => {\n        const modules = props.modplan.selectedModules;\n        if (isEmpty(modules)) {\n            return (\n                <Alert \n                    message='Please add modules before evaluating' \n                    type=\"warning\" \n                    showIcon \n                    closable\n                    style={{margin: \"15px 0px\"}} />\n            )\n        } else {\n            props.setCallBackendNow(true);\n            const newEvaluatedRules = await props.evalRules(ruleFunction, props.modplan.selectedModules);\n            dispatch(props.setRules(newEvaluatedRules))\n        }\n    }\n\n    return (\n        isEmpty(props.settings.userInfo) \n            ? <LoadingDots/>\n            : (<DndProvider backend={Backend} >\n                <div className=\"container-module-planner\">\n                    <h3 id=\"module-planner-title\">Module Planner</h3>\n                    <div className=\"year-display\">\n                    {!isEmpty(props.settings.userInfo.matriculationYear) \n                        && generateObject(props.settings.userInfo.matriculationYear, \n                                props.settings.userInfo.targetGradYear, \n                                \"yearDisplay\",\n                                module\n                                )}\n                    </div>\n                    \n                    <TrashBox\n                            module={module}/>\n    \n    \n                    <br/>\n    \n                    <Button className=\"button\" id=\"eval-button\" onClick={() => handleEvalButtonClick()}>Evaluate</Button>\n    \n                    <Button className=\"button\" onClick={() => handleSaveClick(props)} >Save</Button>\n                    \n                    {!isEmpty(props.success) && \n                        <Alert \n                            message={props.success} \n                            type=\"success\" \n                            showIcon \n                            closable\n                            style={{margin: \"15px 0px\"}} />\n                    }\n                    \n                    {!isEmpty(props.success) && \n                        setTimeout(props.removeSuccess, 2000) &&\n                        clearTimeout(setTimeout(props.removeSuccess, 2000))}\n                    <br/>\n                    <br/>\n                    <p>Click on each requirement for further information</p>\n                    <Card>\n                        <Spin indicator={antIcon} spinning={true}/>\n                        {!isEmpty(props.modplan.rules) && \n                            (\n                                <Rules\n                                    rules={props.modplan.rules}\n                                    settings={props.settings}\n                                    ruleFunction={ruleFunction}/>\n                            )\n                        }\n                    </Card>\n                    <br/>\n                </div>\n            </DndProvider>)\n    )\n}\n\nModulePlannerPageTemp.propTypes = {\n    callBackendAPI: PropTypes.func.isRequired,\n    setCallBackendNow: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    removeSuccess: PropTypes.func.isRequired,\n    modplan: PropTypes.object.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success,\n});\n\nexport default connect(mapStateToProps, \n                    { callBackendAPI, setCallBackendNow, updateSettings, initialSettings, \n                        setSelectedModules, removeSuccess, evalRules, setRules  }) \n                    (ModulePlannerPageTemp);\n"]},"metadata":{},"sourceType":"module"}