{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoCompleteText from \"../Module Planner Page/AutocompleteText\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, calculateCAP, setCAP } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules, callBackendAPI, setModuleLocation } from \"../../actions/modplanActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { generateOptions, handleSaveClick } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\n\nconst CAPCalculatorPage = props => {\n  const gradeList = [{\n    grade: \"A+\",\n    gradePoint: 5\n  }, {\n    grade: \"A\",\n    gradePoint: 5\n  }, {\n    grade: \"A-\",\n    gradePoint: 4.5\n  }, {\n    grade: \"B+\",\n    gradePoint: 4\n  }, {\n    grade: \"B\",\n    gradePoint: 3.5\n  }, {\n    grade: \"B-\",\n    gradePoint: 3\n  }, {\n    grade: \"C+\",\n    gradePoint: 2.5\n  }, {\n    grade: \"C\",\n    gradePoint: 2\n  }, {\n    grade: \"D+\",\n    gradePoint: 1.5\n  }, {\n    grade: \"D\",\n    gradePoint: 1\n  }, {\n    grade: \"F\",\n    gradePoint: 0\n  }]; //to count what semester the user is in currently\n\n  const [isPast, setIsPast] = useState();\n  const [userSemester, setUserSemester] = useState();\n  const [semester, setSemester] = useState(\"Year 1 Semester 1\");\n  const [AY, setAY] = useState();\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  useEffect(() => {\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI(\"NUSMods\");\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    }\n\n    if (!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n      props.setTranscript(null, props.settings.userInfo.transcript);\n    }\n\n    if (props.settings.userInfo.cap) {\n      if (!props.settings.userInfo.targetCap) {\n        props.setCAP(props.settings.userInfo.cap, 5);\n      } else {\n        props.setCAP(props.settings.userInfo.cap, props.settings.userInfo.targetCap);\n      }\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo)) {\n      //set semester options according to how many years the user will spend in NUS\n      const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n      props.setSemesterOptions(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear);\n      const year = props.settings.currentAY.substr(5, 4);\n      const statusYear = year - start;\n      const updatedUserSemester = props.settings.currentSemester === \"Semester 1\" ? statusYear * 2 - 1 : statusYear * 2;\n      const updatedUserAY = `Year ${Math.ceil(updatedUserSemester / 2)} ${props.settings.currentSemester}`;\n      setUserSemester(updatedUserSemester);\n      setSemester(updatedUserAY);\n    }\n  }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear]);\n  useEffect(() => {\n    const convertSemToNumber = sem => {\n      if (sem.substr(7) === \"Semester 1\") {\n        return sem.substr(5, 1) * 2 - 1;\n      } else {\n        return sem.substr(5, 1) * 2;\n      }\n    };\n\n    const currSem = convertSemToNumber(semester); //check if the semester chosen is in the past or future\n\n    if (userSemester > currSem) {\n      setIsPast(true);\n    } else if (userSemester === currSem) {\n      if (props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12 || props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6) {\n        setIsPast(true);\n      }\n    } else {\n      setIsPast(false);\n    } //convert semester chosen to AY\n\n\n    const year = Number(semester.substr(5, 1));\n    const matYear = !isEmpty(props.settings.userInfo) ? Number(props.settings.userInfo.matriculationYear.substr(0, 4)) : 0;\n    const end = matYear + year;\n    setAY(`${end - 1}/${end}`);\n  }, [semester]);\n  useEffect(() => {\n    if (!isEmpty(props.modplan.selectedModules)) {\n      props.calculateCAP(props.modplan.selectedModules);\n    }\n  }, [props.modplan.selectedModules]); // const checkDuplicate = (moduleAdded, transcript) => {\n  //     let indexOfDuplicate;\n  //     let unique = true;\n  //     let newModule;\n  //     for(let i = 0; i < transcript.length; i++) {\n  //         if(transcript[i].moduleCode === moduleAdded.moduleCode) {\n  //              indexOfDuplicate = i;\n  //              unique = false;\n  //         }\n  //     }\n  //     //if moduleAdded exists in transcript, create a module \n  //     if(!unique) {\n  //         newModule = {\n  //             moduleCode: transcript[indexOfDuplicate].moduleCode,\n  //             title: transcript[indexOfDuplicate].title,\n  //             moduleCredit: transcript[indexOfDuplicate].moduleCredit,\n  //             grade: transcript[indexOfDuplicate].grade,\n  //             SU: transcript[indexOfDuplicate].SU\n  //         }\n  //     }\n  //     const result = {\n  //         unique: unique,\n  //         indexOfDuplicate: indexOfDuplicate,\n  //         newModule: newModule\n  //     }\n  //     console.log(result);\n  //     return result;\n  // }\n\n  const handleGradeClick = (e, object) => {\n    // let module;\n    // let isUnique;\n    // let index;\n    // const transcript = isPast ? props.cap.transcript : props.cap.targetGrade;\n    // //default module\n    // module = {\n    //             moduleCode: object.moduleCode,\n    //             title: object.title,\n    //             moduleCredit: object.moduleCredit,\n    //             grade: e.target.value,\n    // };\n    // //to obtain module object from transcript for modification\n    // if(!isEmpty(transcript)) {\n    //     const { unique, indexOfDuplicate, newModule} = checkDuplicate(object, transcript);\n    //     if(!unique) {\n    //         newModule.grade = e.target.value;\n    //         module = newModule;\n    //     }\n    //     isUnique = unique;\n    //     index = indexOfDuplicate;\n    // } \n    // const cat = isPast ? \"transcript\": \"targetGrade\"\n    // return props.setTranscript(module, transcript, isUnique, index, cat); \n    let gradePoint;\n\n    for (let i = 0; i < gradeList.length; i++) {\n      if (gradeList[i].grade === e.target.value) {\n        gradePoint = gradeList[i].gradePoint;\n        break;\n      }\n    }\n\n    const module = { ...object\n    };\n\n    if (isPast) {\n      module.grade = e.target.value;\n      module.gradePoint = gradePoint;\n      module.targetGrade = undefined;\n    } else {\n      module.targetGrade = e.target.value;\n      module.gradePoint = gradePoint;\n    }\n\n    props.setSelectedModules(module, props.modplan.selectedModules);\n  };\n\n  const handleCheckboxChange = (e, object) => {\n    // let module;\n    // let isUnique;\n    // let index;\n    // const transcript = props.cap.transcript;\n    // //default module\n    // module = {\n    //     moduleCode: object.moduleCode,\n    //     title: object.title,\n    //     moduleCredit: object.moduleCredit,\n    //     SU: true\n    // };\n    // //to obtain module object from transcript for modification\n    // if(!isEmpty(transcript)) {\n    //     const { unique, indexOfDuplicate, newModule} = checkDuplicate(object, transcript);\n    //     if(!unique) {\n    //         newModule.SU = newModule.SU ? false : true;\n    //         module = newModule; \n    //     }\n    //     isUnique = unique;\n    //     index = indexOfDuplicate;\n    // } \n    // return props.setTranscript(module, transcript, isUnique, index);\n    const module = { ...object\n    };\n    module.SU = object.SU ? false : true;\n    props.setSelectedModules(module, props.modplan.selectedModules);\n  };\n\n  const generateTable = () => {\n    return props.modplan.selectedModules.filter(object => object.location === semester).map(object => {\n      const {\n        moduleCode,\n        title,\n        moduleCredit\n      } = object;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: moduleCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }\n      }, title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 29\n        }\n      }, moduleCode), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 29\n        }\n      }, moduleCredit), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        name: object,\n        value: object.grade || object.targetGrade,\n        onChange: e => handleGradeClick(e, object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        selected: true,\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 37\n        }\n      }, \"Grade\"), generateOptions(gradeList, \"grade\"))), isPast && /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: object.SU,\n        onChange: e => handleCheckboxChange(e, object),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-trash-alt fa-border\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => props.setModuleLocation({\n          id: object.moduleCode\n        }, null, null, props.modplan.selectedModules),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 33\n        }\n      })));\n    });\n  };\n\n  return isEmpty(props.settings.userInfo) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, \"CAP Calculator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, \"Current CAP: \", props.cap.cap), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, \"Target Future CAP: \", props.cap.targetCap), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, \"Semester: \"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"time\",\n    value: semester,\n    onChange: e => setSemester(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, isEmpty(props.cap.semesterOptions) && /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 56\n    }\n  }, \"Year 1 Semester 1\"), generateOptions(props.cap.semesterOptions)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, \"Courses taken this semester\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, \"Module Title\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  }, \"Module Code\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, \"Modular Credits\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 17\n    }\n  }, isPast ? \"Grade\" : \"Target Grade\"), isPast && /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 28\n    }\n  }, \"S/U\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, !isEmpty(props.settings.userInfo) && generateTable())), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    AY: AY,\n    location: semester,\n    module: props.modplan.modules,\n    category: \"module\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => setIsTextBoxOpen(!isTextBoxOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, \"Add Module\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }\n  }, isPast ? \"Save Transcript\" : \"Save Target Grade\"), !isEmpty(props.success) && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 17\n    }\n  }, props.success), !isEmpty(props.success) && setTimeout(props.removeSuccess, 500) && clearTimeout(setTimeout(props.removeSuccess, 2000)));\n};\n\nCAPCalculatorPage.propType = {\n  setSemesterOptions: PropTypes.func.isRequired,\n  setSelectedModules: PropTypes.func.isRequired,\n  callBackendAPI: PropTypes.func.isRequired,\n  setModuleLocation: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  generateOptions: PropTypes.func.isRequired,\n  calculateCAP: PropTypes.func.isRequired,\n  setCAP: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired,\n  selectedModules: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  setSemesterOptions,\n  setSelectedModules,\n  callBackendAPI,\n  setModuleLocation,\n  updateSettings,\n  calculateCAP,\n  setCAP,\n  removeSuccess\n})(CAPCalculatorPage);\n{\n  /* <label>CAP: </label>\n            <input type=\"text\" name=\"prevCAP\" />\n            <label>Credits Earned: </label>\n            <input type=\"text\" name=\"prevCreditsEarned\" />\n            <br/>\n            <br/> */\n}\n{\n  /* <label>Module</label>\n            <label>Grade</label>\n            <br/>\n            <input type=\"text\" placeholder=\"Credits\"/>\n            <input type=\"text\" placeholder=\"MCs\" /> */\n}","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx"],"names":["React","useState","useEffect","connect","AutoCompleteText","LoadingDots","Button","PropTypes","setSemesterOptions","calculateCAP","setCAP","updateSettings","setSelectedModules","callBackendAPI","setModuleLocation","removeSuccess","generateOptions","handleSaveClick","isEmpty","CAPCalculatorPage","props","gradeList","grade","gradePoint","isPast","setIsPast","userSemester","setUserSemester","semester","setSemester","AY","setAY","isTextBoxOpen","setIsTextBoxOpen","modplan","modules","settings","userInfo","modPlan","selectedModules","transcript","cap","setTranscript","targetCap","start","matriculationYear","substr","targetGradYear","year","currentAY","statusYear","updatedUserSemester","currentSemester","updatedUserAY","Math","ceil","convertSemToNumber","sem","currSem","month","Number","matYear","end","handleGradeClick","e","object","i","length","target","value","module","targetGrade","undefined","handleCheckboxChange","SU","generateTable","filter","location","map","moduleCode","title","moduleCredit","cursor","id","semesterOptions","success","color","setTimeout","clearTimeout","propType","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoCompleteText from \"../Module Planner Page/AutocompleteText\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, calculateCAP, setCAP } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules, callBackendAPI, setModuleLocation } from \"../../actions/modplanActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { generateOptions, handleSaveClick } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\n\n\nconst CAPCalculatorPage = (props) => {\n    const gradeList = [\n                        {grade: \"A+\", gradePoint: 5},\n                        {grade: \"A\", gradePoint: 5},\n                        {grade: \"A-\", gradePoint: 4.5},\n                        {grade: \"B+\", gradePoint: 4},\n                        {grade: \"B\", gradePoint: 3.5},\n                        {grade: \"B-\", gradePoint: 3},\n                        {grade: \"C+\", gradePoint: 2.5},\n                        {grade: \"C\", gradePoint: 2},\n                        {grade: \"D+\", gradePoint: 1.5},\n                        {grade: \"D\", gradePoint: 1},\n                        {grade: \"F\", gradePoint: 0}\n    ]       \n\n    //to count what semester the user is in currently\n    const [isPast, setIsPast] = useState();\n    const [userSemester, setUserSemester] = useState();\n    const [semester, setSemester] = useState(\"Year 1 Semester 1\");\n    const [AY, setAY] = useState();\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n\n    useEffect(() => {\n        if(isEmpty(props.modplan.modules)) {\n            props.callBackendAPI(\"NUSMods\");\n        }\n    }, [])\n\n    useEffect(() => {\n        if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n            props.setSelectedModules(null, props.settings.userInfo.modPlan)\n        } \n\n        if(!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n            props.setTranscript(null, props.settings.userInfo.transcript)\n        }\n\n        if(props.settings.userInfo.cap) {\n            if (!props.settings.userInfo.targetCap) {\n                props.setCAP(props.settings.userInfo.cap, 5);\n            } else {\n                props.setCAP(props.settings.userInfo.cap, props.settings.userInfo.targetCap);\n            }\n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        if(!isEmpty(props.settings.userInfo)) {\n            //set semester options according to how many years the user will spend in NUS\n            const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n            props.setSemesterOptions(props.settings.userInfo.matriculationYear, \n                props.settings.userInfo.targetGradYear);\n\n            const year = props.settings.currentAY.substr(5,4);\n            const statusYear = year - start; \n            const updatedUserSemester = props.settings.currentSemester === \"Semester 1\" \n                ? statusYear * 2 - 1 \n                : statusYear * 2;\n            const updatedUserAY = `Year ${Math.ceil(updatedUserSemester / 2)} ${props.settings.currentSemester}`;\n            setUserSemester(updatedUserSemester);\n            setSemester(updatedUserAY);\n        }\n    }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear])\n\n    useEffect(() => {\n        const convertSemToNumber = (sem) => {\n            if(sem.substr(7) === \"Semester 1\") {\n                return sem.substr(5,1) * 2 - 1;\n            } else {\n                return sem.substr(5,1) * 2;\n            }\n        }\n\n        const currSem = convertSemToNumber(semester);\n\n        //check if the semester chosen is in the past or future\n        if (userSemester > currSem) {\n            setIsPast(true);\n        } else if (userSemester === currSem) {\n            if ((props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12) \n                || (props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6)) {\n                    setIsPast(true);\n            }\n        } else {\n            setIsPast(false);\n        }\n\n        //convert semester chosen to AY\n        const year = Number(semester.substr(5, 1));\n        const matYear = !isEmpty(props.settings.userInfo) ? Number(props.settings.userInfo.matriculationYear.substr(0,4)) : 0;\n        const end =  matYear + year;\n        setAY(`${end - 1}/${end}`);\n    }, [semester])\n\n    useEffect(() => {\n        if(!isEmpty(props.modplan.selectedModules)) {\n            props.calculateCAP(props.modplan.selectedModules);\n        }\n    }, [props.modplan.selectedModules])\n\n    // const checkDuplicate = (moduleAdded, transcript) => {\n    //     let indexOfDuplicate;\n    //     let unique = true;\n    //     let newModule;\n\n    //     for(let i = 0; i < transcript.length; i++) {\n    //         if(transcript[i].moduleCode === moduleAdded.moduleCode) {\n    //              indexOfDuplicate = i;\n    //              unique = false;\n    //         }\n    //     }\n\n    //     //if moduleAdded exists in transcript, create a module \n    //     if(!unique) {\n    //         newModule = {\n    //             moduleCode: transcript[indexOfDuplicate].moduleCode,\n    //             title: transcript[indexOfDuplicate].title,\n    //             moduleCredit: transcript[indexOfDuplicate].moduleCredit,\n    //             grade: transcript[indexOfDuplicate].grade,\n    //             SU: transcript[indexOfDuplicate].SU\n    //         }\n    //     }\n\n    //     const result = {\n    //         unique: unique,\n    //         indexOfDuplicate: indexOfDuplicate,\n    //         newModule: newModule\n    //     }\n    //     console.log(result);\n    //     return result;\n    // }\n\n    const handleGradeClick = (e, object) => {\n        // let module;\n        // let isUnique;\n        // let index;\n        // const transcript = isPast ? props.cap.transcript : props.cap.targetGrade;\n\n        // //default module\n        // module = {\n        //             moduleCode: object.moduleCode,\n        //             title: object.title,\n        //             moduleCredit: object.moduleCredit,\n        //             grade: e.target.value,\n        // };\n\n        // //to obtain module object from transcript for modification\n        // if(!isEmpty(transcript)) {\n        //     const { unique, indexOfDuplicate, newModule} = checkDuplicate(object, transcript);\n        //     if(!unique) {\n        //         newModule.grade = e.target.value;\n        //         module = newModule;\n        //     }\n        //     isUnique = unique;\n        //     index = indexOfDuplicate;\n        // } \n\n        // const cat = isPast ? \"transcript\": \"targetGrade\"\n        // return props.setTranscript(module, transcript, isUnique, index, cat); \n\n        let gradePoint;\n        for (let i = 0; i < gradeList.length; i++) {\n            if(gradeList[i].grade === e.target.value) {\n                gradePoint = gradeList[i].gradePoint;\n                break;\n            }\n        }\n        \n        const module = {...object}\n        if(isPast) {\n            module.grade = e.target.value;\n            module.gradePoint = gradePoint;\n            module.targetGrade = undefined;\n        } else {\n            module.targetGrade = e.target.value;\n            module.gradePoint = gradePoint;\n        }\n        \n        props.setSelectedModules(module, props.modplan.selectedModules);\n    }\n\n    const handleCheckboxChange = (e, object) => {\n        // let module;\n        // let isUnique;\n        // let index;\n        // const transcript = props.cap.transcript;\n\n        // //default module\n        // module = {\n        //     moduleCode: object.moduleCode,\n        //     title: object.title,\n        //     moduleCredit: object.moduleCredit,\n        //     SU: true\n        // };\n\n        // //to obtain module object from transcript for modification\n        // if(!isEmpty(transcript)) {\n        //     const { unique, indexOfDuplicate, newModule} = checkDuplicate(object, transcript);\n        //     if(!unique) {\n        //         newModule.SU = newModule.SU ? false : true;\n        //         module = newModule; \n        //     }\n        //     isUnique = unique;\n        //     index = indexOfDuplicate;\n        // } \n\n        // return props.setTranscript(module, transcript, isUnique, index);\n        const module = {...object};\n        module.SU = object.SU ? false : true;\n        props.setSelectedModules(module, props.modplan.selectedModules);\n    }\n\n    const generateTable = () => {\n            return props.modplan.selectedModules\n                .filter((object) => object.location === semester)\n                .map((object) => {\n                    const { moduleCode, title, moduleCredit } = object;\n                    return (\n                        <tr key={moduleCode}>\n                            <td>{title}</td>\n                            <td>{moduleCode}</td>\n                            <td>{moduleCredit}</td>\n                            <td>\n                                <select \n                                    name={object}\n                                    value={object.grade || object.targetGrade} \n                                    onChange={(e) => handleGradeClick(e, object)}>\n                                    <option selected disabled>Grade</option>\n                                    {generateOptions(gradeList, \"grade\")}\n                                </select>\n                            </td>\n                            {isPast && \n                            <td>\n                                <input\n                                    type=\"checkbox\"\n                                    checked={object.SU}\n                                    onChange={(e) => handleCheckboxChange(e, object)}/>\n                            </td>}\n                            <td>\n                                <i  \n                                    className=\"fa fa-trash-alt fa-border\"\n                                    style={{cursor: \"pointer\"}}\n                                    onClick={() => props.setModuleLocation({id: object.moduleCode}, null, null, props.modplan.selectedModules)} />\n                            </td>\n                        </tr>\n                    )\n                })   \n    }\n    \n    return(\n        isEmpty(props.settings.userInfo) \n            ? <LoadingDots/>\n            : (<div className=\"ml-4\">\n            <h1 className=\"display-3\">CAP Calculator</h1>\n            <h3>Current CAP: {props.cap.cap}</h3>\n            <h3>Target Future CAP: {props.cap.targetCap}</h3>\n            {/* <h5 onClick={() => {this.setState({open: true})}}>Or click here to manually input CAP</h5> */}\n            {/* {this.state.open && (<input type=\"text\"/>)} */}\n            <label>Semester: </label>\n            <select \n                id=\"time\"\n                value={semester}\n                onChange={(e) => setSemester(e.target.value)}>\n\n                {/* buffer to display to wait for userInfo */}\n                {isEmpty(props.cap.semesterOptions) && <option>Year 1 Semester 1</option>}\n                {generateOptions(props.cap.semesterOptions)}\n            </select>\n\n            {/* <span className=\"fa-layers fa-fw \" */}\n            {/* <i className=\"fas fa-arrow-left fa-lg fa-border\"/>\n            <i className=\"fas fa-arrow-right fa-lg fa-border\"/> */}\n            <br/>\n            \n            {/* Table to display modules taken according to modulePlanner */}\n            <h3>Courses taken this semester</h3>\n            <table className=\"table table-hover\">\n                <th>Module Title</th>\n                <th>Module Code</th>\n                <th>Modular Credits</th>\n                <th>{isPast ? \"Grade\" : \"Target Grade\"}</th>\n                {isPast && <th>S/U</th>}\n                <th></th>\n                <tbody>\n                    {!isEmpty(props.settings.userInfo) && generateTable()}\n                </tbody>\n            </table>\n\n            {/* For users to add modules directly from CAP Calculator */}\n            {isTextBoxOpen && <AutoCompleteText \n                                            AY={AY}\n                                            location={semester}\n                                            module={props.modplan.modules}\n                                            category=\"module\"/>}\n            <Button className=\"button\" onClick={() => setIsTextBoxOpen(!isTextBoxOpen)}>Add Module</Button>\n            \n            <br/>\n            <br/>\n\n            <Button className=\"button\" onClick={() => handleSaveClick(props)}>{isPast ? \"Save Transcript\" : \"Save Target Grade\" }</Button>\n            {!isEmpty(props.success) && \n                <p style={{color: \"green\"}}>\n                    {props.success}\n                </p>\n                \n                }\n                \n                {!isEmpty(props.success) && \n                    setTimeout(props.removeSuccess, 500) &&\n                    clearTimeout(setTimeout(props.removeSuccess, 2000))}\n        </div>)\n    );\n}\n\n\nCAPCalculatorPage.propType = {\n    setSemesterOptions: PropTypes.func.isRequired,\n    setSelectedModules: PropTypes.func.isRequired,\n    callBackendAPI: PropTypes.func.isRequired,\n    setModuleLocation: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    generateOptions: PropTypes.func.isRequired,\n    calculateCAP: PropTypes.func.isRequired,\n    setCAP: PropTypes.func.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired,\n    selectedModules: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success\n});\n\nexport default connect(mapStateToProps,\n                        { setSemesterOptions, setSelectedModules, callBackendAPI, setModuleLocation, updateSettings, calculateCAP, setCAP, removeSuccess })\n                        (CAPCalculatorPage);\n\n\n\n {/* <label>CAP: </label>\n            <input type=\"text\" name=\"prevCAP\" />\n            <label>Credits Earned: </label>\n            <input type=\"text\" name=\"prevCreditsEarned\" />\n            <br/>\n            <br/> */}\n\n\n\n {/* <label>Module</label>\n            <label>Grade</label>\n            <br/>\n            <input type=\"text\" placeholder=\"Credits\"/>\n            <input type=\"text\" placeholder=\"MCs\" /> */}"]},"metadata":{},"sourceType":"module"}