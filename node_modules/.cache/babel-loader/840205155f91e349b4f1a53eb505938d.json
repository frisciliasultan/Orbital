{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios.post(\"http://172.19.162.53:3000/user/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => {\n    if (err.response) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    } else {\n      window.location.replace(\"/500-error\");\n    }\n  });\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios.post(\"http://172.19.162.53:3000/user/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => {\n    if (err.response) {\n      console.log('res called');\n      console.log(err.response.status);\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    } else if (err.request) {\n      window.location.replace(\"/500-error\");\n    } else {}\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","defaults","timeout","post","then","res","push","catch","err","response","type","payload","data","window","location","replace","loginUser","token","localStorage","setItem","decoded","setCurrentUser","console","log","status","request","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,YAHF,QAIO,SAJP,C,CAOA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DT,EAAAA,KAAK,CAACU,QAAN,CAAeC,OAAf,GAAyB,IAAzB;AACAX,EAAAA,KAAK,CACFY,IADH,CACQ,yCADR,EACmDL,QADnD,EAEGM,IAFH,CAEQC,GAAG,IAAIN,OAAO,CAACO,IAAR,CAAa,QAAb,CAFf,EAEuC;AAFvC,GAGGC,KAHH,CAGSC,GAAG,IAAI;AACZ,QAAGA,GAAG,CAACC,QAAP,EAAiB;AACfT,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEhB,UADC;AAEPiB,QAAAA,OAAO,EAAEH,GAAG,CAACC,QAAJ,CAAaG;AAFf,OAAD,CAAR;AAID,KALD,MAOK;AACHC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,YAAxB;AACD;AACF,GAdH;AAgBD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMC,SAAS,GAAGlB,QAAQ,IAAIE,QAAQ,IAAI;AAC/CT,EAAAA,KAAK,CAACU,QAAN,CAAeC,OAAf,GAAyB,IAAzB;AACAX,EAAAA,KAAK,CACFY,IADH,CACQ,sCADR,EACgDL,QADhD,EAEGM,IAFH,CAEQC,GAAG,IAAI;AACX;AACN;AACM,UAAM;AAAEY,MAAAA;AAAF,QAAYZ,GAAG,CAACO,IAAtB;AACAM,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAzB,IAAAA,YAAY,CAACyB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAG3B,UAAU,CAACwB,KAAD,CAA1B,CARW,CASX;;AACAjB,IAAAA,QAAQ,CAACqB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGb,KAdH,CAcSC,GAAG,IAAI;AACZ,QAAGA,GAAG,CAACC,QAAP,EAAiB;AACfa,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACC,QAAJ,CAAae,MAAzB;AACAxB,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEhB,UADC;AAEPiB,QAAAA,OAAO,EAAEH,GAAG,CAACC,QAAJ,CAAaG;AAFf,OAAD,CAAR;AAID,KAPD,MAOO,IAAIJ,GAAG,CAACiB,OAAR,EAAiB;AACtBZ,MAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,YAAxB;AACD,KAFM,MAGF,CAEJ;AACF,GA5BH;AA8BD,CAhCM,C,CAkCP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLV,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMM,cAAc,GAAG,MAAM;AAClC,SAAO;AACLhB,IAAAA,IAAI,EAAEd;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAM+B,UAAU,GAAG,MAAM3B,QAAQ,IAAI;AAC1C;AACAkB,EAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACApC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAQ,EAAAA,QAAQ,CAACqB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios\n    .post(\"http://172.19.162.53:3000/user/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err => {\n      if(err.response) {\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      }\n\n      else {\n        window.location.replace(\"/500-error\")\n      }\n    }\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios.defaults.timeout = 2000;\n  axios\n    .post(\"http://172.19.162.53:3000/user/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err => {\n      if(err.response) {\n        console.log('res called')\n        console.log(err.response.status)\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        })\n      } else if (err.request) {\n        window.location.replace(\"/500-error\")\n      } \n      else {\n        \n      }\n    }\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}