{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\nfunction Board(props) {\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n  const [isBoardFilled, setIsBoardFilled] = useState(false);\n  const selectedModules = props.selectedModules;\n  useEffect(() => {\n    generateCards();\n    updateIsBoardFilled();\n  });\n\n  const generateCards = () => selectedModules.filter((object, i) => object.location === props.id).map((object, i) => /*#__PURE__*/React.createElement(ModuleCard, {\n    id: object.moduleCode,\n    location: props.id,\n    className: \"card\",\n    title: `${object.moduleCode}: ${object.title}`,\n    MCs: object.moduleCredit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 18\n    }\n  }));\n\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n\n  function handleButtonClick() {\n    setIsTextBoxOpen(!isTextBoxOpen);\n    console.log(selectedModules);\n  }\n\n  function updateIsBoardFilled() {\n    if (selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n      setIsBoardFilled(true);\n    } else {\n      setIsBoardFilled(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, props.semester), /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    id: props.id,\n    style: {\n      width: '20rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '165px',\n      height: !isBoardFilled && '59px',\n      outline: isBoardFilled ? 'none' : '1px dotted'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, selectedModules ? generateCards() : 'Drop module here'), isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    location: props.id,\n    updateSelectedModules: props.updateSelectedModules,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Add Module\")));\n}\n\nexport default Board; // import React, { useState, useEffect } from \"react\";\n// // import AutoCompleteText from './AutocompleteText';\n// // import { Card, Button } from 'react-bootstrap';\n// // import ModuleCard from './Card';\n// // import { ItemTypes } from './itemType';\n// // import { useDrop } from 'react-dnd';\n// function Board (props) {\n//     const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n//     //const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n//     // const [displayCard, setDisplayCard] = useState();\n//     const generateCards = () => selectedModules\n//         .filter((object, i) => object.location === props.id)\n//         .map((object, i) => \n//                 (<ModuleCard\n//                     id={object.moduleCode}\n//                     location={props.id}\n//                     className=\"card\"\n//                     title={`${object.moduleCode}: ${object.title}`}\n//                     MCs={object.moduleCredit}/>));\n//     const [{ isOver }, drop] = useDrop({\n//             accept: ItemTypes.CARD,\n//             drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n//             collect: monitor => ({\n//                 isOver: !!monitor.isOver(),\n//             }),\n//     })\n//     function handleButtonClick() {\n//         setIsTextBoxOpen(!isTextBoxOpen);\n//         console.log(selectedModules);\n//      }\n//         const selectedModules = props.selectedModules;\n//         return (\n//             <div>\n//                 <h3>{props.semester}</h3>\n//             <div   \n//                 ref={drop}\n//                 id={props.id}\n//                 style={{width: '20rem'}}\n//             >\n//             <div style={{width: '165px', \n//                         height: (!selectedModules) && '59px', \n//                         outline: selectedModules ? 'none' : '1px dotted'}}>\n//                             {selectedModules ? generateCards() : 'Drop module here'}\n//             </div>\n//             {isTextBoxOpen && <AutoCompleteText \n//                                             location={props.id}\n//                                             updateSelectedModules={props.updateSelectedModules}/>}\n//                 <Button onClick={handleButtonClick}>Add Module</Button>\n//                 </div>\n//             </div>\n//         )\n// }\n// export default Board;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbital/client/src/Pages/Module Planner Page/Board.jsx"],"names":["React","useState","useEffect","AutoCompleteText","Card","Button","ModuleCard","ItemTypes","useDrop","Board","props","isTextBoxOpen","setIsTextBoxOpen","isBoardFilled","setIsBoardFilled","selectedModules","generateCards","updateIsBoardFilled","filter","object","i","location","id","map","moduleCode","title","moduleCredit","isOver","drop","accept","CARD","item","monitor","updateModuleLocation","collect","handleButtonClick","console","log","length","semester","width","height","outline","updateSelectedModules"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AutoCompleteText from './AutocompleteText';\nimport { Card, Button } from 'react-bootstrap';\nimport ModuleCard from './Card';\nimport { ItemTypes } from './itemType';\nimport { useDrop } from 'react-dnd';\n\n\n\n\n\nfunction Board (props) {\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n    const [isBoardFilled, setIsBoardFilled] = useState(false);\n    const selectedModules = props.selectedModules;\n    \n    useEffect(() => { \n        generateCards();\n        updateIsBoardFilled();\n    })\n        \n    const generateCards = () => selectedModules\n        .filter((object, i) => object.location === props.id)\n        .map((object, i) => \n                (<ModuleCard\n                    id={object.moduleCode}\n                    location={props.id}\n                    className=\"card\"\n                    title={`${object.moduleCode}: ${object.title}`}\n                    MCs={object.moduleCredit}/>));\n\n        \n\n    const [{ isOver }, drop] = useDrop({\n            accept: ItemTypes.CARD,\n            drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n            collect: monitor => ({\n                isOver: !!monitor.isOver(),\n            }),\n    })\n\n    function handleButtonClick() {\n        setIsTextBoxOpen(!isTextBoxOpen);\n        console.log(selectedModules);\n     }\n\n    function updateIsBoardFilled() {\n        if(selectedModules && selectedModules.filter((object, i) => object.location === props.id).length > 0) {\n            setIsBoardFilled(true);\n        } else {\n            setIsBoardFilled(false);\n        }\n    }\n \n\n        \n        return (\n            \n            <div>\n                <h3>{props.semester}</h3>\n            <div   \n                ref={drop}\n                id={props.id}\n                style={{width: '20rem'}}\n            >\n\n            <div style={{width: '165px', \n                        height: (!isBoardFilled) && '59px', \n                        outline: isBoardFilled ? 'none' : '1px dotted'}}>\n                            {selectedModules ? generateCards() : 'Drop module here'}\n            </div>\n            {isTextBoxOpen && <AutoCompleteText \n                                            location={props.id}\n                                            updateSelectedModules={props.updateSelectedModules}/>}\n                <Button onClick={handleButtonClick}>Add Module</Button>\n                \n                </div>\n            </div>\n        )\n   \n}\n\nexport default Board;\n\n// import React, { useState, useEffect } from \"react\";\n// // import AutoCompleteText from './AutocompleteText';\n// // import { Card, Button } from 'react-bootstrap';\n// // import ModuleCard from './Card';\n// // import { ItemTypes } from './itemType';\n// // import { useDrop } from 'react-dnd';\n\n\n\n\n\n// function Board (props) {\n//     const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n//     //const [moduleCodeTitle, setModuleCodeTitle] = useState([]);\n//     // const [displayCard, setDisplayCard] = useState();\n//     const generateCards = () => selectedModules\n//         .filter((object, i) => object.location === props.id)\n//         .map((object, i) => \n//                 (<ModuleCard\n//                     id={object.moduleCode}\n//                     location={props.id}\n//                     className=\"card\"\n//                     title={`${object.moduleCode}: ${object.title}`}\n//                     MCs={object.moduleCredit}/>));\n\n//     const [{ isOver }, drop] = useDrop({\n//             accept: ItemTypes.CARD,\n//             drop: (item, monitor) => props.updateModuleLocation(item, props.id),\n//             collect: monitor => ({\n//                 isOver: !!monitor.isOver(),\n//             }),\n//     })\n\n//     function handleButtonClick() {\n//         setIsTextBoxOpen(!isTextBoxOpen);\n//         console.log(selectedModules);\n//      }\n\n \n\n//         const selectedModules = props.selectedModules;\n\n//         return (\n            \n//             <div>\n//                 <h3>{props.semester}</h3>\n//             <div   \n//                 ref={drop}\n//                 id={props.id}\n//                 style={{width: '20rem'}}\n//             >\n\n//             <div style={{width: '165px', \n//                         height: (!selectedModules) && '59px', \n//                         outline: selectedModules ? 'none' : '1px dotted'}}>\n//                             {selectedModules ? generateCards() : 'Drop module here'}\n//             </div>\n//             {isTextBoxOpen && <AutoCompleteText \n//                                             location={props.id}\n//                                             updateSelectedModules={props.updateSelectedModules}/>}\n//                 <Button onClick={handleButtonClick}>Add Module</Button>\n                \n//                 </div>\n//             </div>\n//         )\n   \n// }\n\n// export default Board;\n"]},"metadata":{},"sourceType":"module"}