{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoCompleteText from \"../Module Planner Page/AutocompleteText\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nimport { Table } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, calculateCAP, setCAP } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules, callBackendAPI, setModuleLocation } from \"../../actions/modplanActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { generateOptions, generateObject, handleSaveClick, checkIsPast } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\nimport { Select, Alert } from \"antd\";\nimport { TableContent } from \"../Module Selection Page/Table Content\";\n\nconst CAPCalculatorPage = props => {\n  const {\n    Option\n  } = Select;\n  const gradeList = [{\n    grade: \"A+\",\n    gradePoint: 5\n  }, {\n    grade: \"A\",\n    gradePoint: 5\n  }, {\n    grade: \"A-\",\n    gradePoint: 4.5\n  }, {\n    grade: \"B+\",\n    gradePoint: 4\n  }, {\n    grade: \"B\",\n    gradePoint: 3.5\n  }, {\n    grade: \"B-\",\n    gradePoint: 3\n  }, {\n    grade: \"C+\",\n    gradePoint: 2.5\n  }, {\n    grade: \"C\",\n    gradePoint: 2\n  }, {\n    grade: \"D+\",\n    gradePoint: 1.5\n  }, {\n    grade: \"D\",\n    gradePoint: 1\n  }, {\n    grade: \"F\",\n    gradePoint: 0\n  }]; //whether the semester selected has been completed by user\n\n  const [isPast, setIsPast] = useState(); //to count what semester the user is in currently\n\n  const [userSemester, setUserSemester] = useState(); //semester that user selects\n\n  const [semester, setSemester] = useState(\"Overview\"); //semester index that user selects \n\n  const [semIndex, setSemIndex] = useState(); //AY that user selects\n\n  const [AY, setAY] = useState(); //whether autocomplete is open\n\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false); //call NUS MODS if it is not called already \n  // to provide pool of modules for user to select\n\n  useEffect(() => {\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI(\"NUSMods\");\n    }\n  }, []);\n  useEffect(() => {\n    //if user has previously saved modPlan, \n    // transfer the information to selectedModules in modPlan Redux state\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    } //if user has previously saved transcript, \n    // transfer the information to transcript in cap Redux state\n\n\n    if (!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n      props.setTranscript(null, props.settings.userInfo.transcript);\n    } //default CAP is 5 but\n    //if user has previously saved CAP, transfer info to CAP in cap Redux State\n\n\n    if (props.settings.userInfo.cap) {\n      //if there is no targetCAP in userInfo, set targetCAP as 5\n      if (!props.settings.userInfo.targetCap) {\n        props.setCAP(props.settings.userInfo.cap, 5);\n      } else {\n        props.setCAP(props.settings.userInfo.cap, props.settings.userInfo.targetCap);\n      }\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo)) {\n      //set semester options according to how many years the user will spend in NUS\n      const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n      props.setSemesterOptions(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear);\n      const year = props.settings.currentAY.substr(5, 4);\n      const statusYear = year - start;\n      const updatedUserSemester = props.settings.currentSemester === \"Semester 1\" ? statusYear * 2 - 1 : statusYear * 2; // const updatedUserAY = `Year ${Math.ceil(updatedUserSemester / 2)} ${props.settings.currentSemester}`;\n\n      setUserSemester(updatedUserSemester); // setSemester(updatedUserAY);\n    }\n  }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear]);\n  useEffect(() => {\n    if (!semIndex && !isEmpty(props.cap.semesterOptions)) {\n      setSemIndex(props.cap.semesterOptions.indexOf(semester));\n    }\n  }, [props.cap.semesterOptions]);\n  useEffect(() => {\n    if (semester !== \"Overview\") {\n      setIsPast(checkIsPast(semester, userSemester, props.settings.currentSemester, props.settings.month));\n    } //convert semester chosen to AY\n\n\n    const year = Number(semester.substr(5, 1));\n    const matYear = !isEmpty(props.settings.userInfo) ? Number(props.settings.userInfo.matriculationYear.substr(0, 4)) : 0;\n    const end = matYear + year;\n    setAY(`${end - 1}/${end}`);\n  }, [semester]);\n  useEffect(() => {\n    if (!isEmpty(props.modplan.selectedModules)) {\n      props.calculateCAP(props.modplan.selectedModules);\n    }\n  }, [props.modplan.selectedModules]);\n\n  const handleGradeClick = (value, object, past) => {\n    let gradePoint;\n    const pastSem = past ? past : isPast;\n\n    for (let i = 0; i < gradeList.length; i++) {\n      if (gradeList[i].grade === value) {\n        gradePoint = gradeList[i].gradePoint;\n        break;\n      }\n    }\n\n    const module = { ...object.object\n    };\n\n    if (pastSem) {\n      module.grade = value;\n      module.gradePoint = gradePoint;\n      module.targetGrade = undefined;\n    } else {\n      module.targetGrade = value;\n      module.gradePoint = gradePoint;\n    }\n\n    props.setSelectedModules(module, props.modplan.selectedModules);\n  };\n\n  const handleCheckboxChange = (e, object) => {\n    const module = { ...object\n    };\n    module.SU = object.SU ? false : true;\n    props.setSelectedModules(module, props.modplan.selectedModules);\n  };\n\n  const handleArrowClick = direction => {\n    if (direction === \"right\") {\n      setSemIndex(semIndex + 1);\n      setSemester(props.cap.semesterOptions[semIndex + 1]);\n    } else {\n      if (semIndex === 0) {\n        setSemester(\"Overview\");\n      } else {\n        setSemester(props.cap.semesterOptions[semIndex - 1]);\n      }\n\n      setSemIndex(semIndex - 1);\n    }\n  };\n\n  console.log(semester);\n  console.log(semIndex);\n  console.log(props.cap.semesterOptions);\n  return isEmpty(props.settings.userInfo) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"module-planner-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"CAP Calculator\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-cap-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cap-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cap-status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"current-cap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, \"Current CAP: \", props.cap.cap), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"target-future-cap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  }, \"Target Future CAP: \", props.cap.targetCap)), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }, \"Semester :\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"time\",\n    defaultValue: \"Overview\",\n    value: semester,\n    onChange: (e, props) => {\n      setSemester(e);\n      setSemIndex(props.index);\n    },\n    style: {\n      width: \"250px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, isEmpty(props.cap.semesterOptions) && /*#__PURE__*/React.createElement(Option, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 68\n    }\n  }, \"Overview\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"Overview\",\n    index: -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }, \"Overview\"), generateOptions(props.cap.semesterOptions)), semIndex !== -1 && /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrow-left fa-lg fa-border\",\n    onClick: () => {\n      handleArrowClick(\"left\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 29\n    }\n  }), semIndex !== props.cap.semesterOptions.length - 1 && /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrow-right fa-lg fa-border\",\n    onClick: () => {\n      handleArrowClick(\"right\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cap-table-section container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: semester === \"Overview\" ? \"overview\" : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 21\n    }\n  }, semester === \"Overview\" ? \"Overview\" : \"Courses taken this semester\"), /*#__PURE__*/React.createElement(Table, {\n    className: \"table table-hover cap-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }\n  }, semester === \"Overview\" && props.modplan.selectedModules ? generateObject(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear, \"tables\", props.modplan.selectedModules, {\n    handleGradeClick: handleGradeClick,\n    handleCheckboxChange: handleCheckboxChange,\n    setModuleLocation: props.setModuleLocation,\n    userSemester: userSemester,\n    currentSemester: props.settings.currentSemester,\n    month: props.settings.month,\n    gradeList: gradeList\n  }) : /*#__PURE__*/React.createElement(TableContent, {\n    handleGradeClick: handleGradeClick,\n    handleCheckboxChange: handleCheckboxChange,\n    setModuleLocation: props.setModuleLocation,\n    module: props.modplan.selectedModules,\n    title: semester,\n    isPast: isPast,\n    gradeList: gradeList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }\n  }, semester !== \"Overview\" && isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    id: \"cap-autocomplete\",\n    AY: AY,\n    location: semester,\n    module: props.modplan.modules,\n    category: \"module\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 21\n    }\n  }), semester !== \"Overview\" && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"cap-add-module-button\",\n    onClick: () => setIsTextBoxOpen(!isTextBoxOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 45\n    }\n  }, \"Add Module\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"cap-save-cap-button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, isPast || semester === \"Overview\" ? \"Save Transcript\" : \"Save Target Grade\")), !isEmpty(props.success) && /*#__PURE__*/React.createElement(Alert, {\n    message: props.success,\n    type: \"success\",\n    showIcon: true,\n    closable: true,\n    style: {\n      margin: \"15px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 29\n    }\n  }), !isEmpty(props.success) && setTimeout(props.removeSuccess, 2000) && clearTimeout(setTimeout(props.removeSuccess, 2000))));\n};\n\nCAPCalculatorPage.propType = {\n  setSemesterOptions: PropTypes.func.isRequired,\n  setSelectedModules: PropTypes.func.isRequired,\n  callBackendAPI: PropTypes.func.isRequired,\n  setModuleLocation: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  generateOptions: PropTypes.func.isRequired,\n  calculateCAP: PropTypes.func.isRequired,\n  setCAP: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired,\n  selectedModules: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  setSemesterOptions,\n  setSelectedModules,\n  callBackendAPI,\n  setModuleLocation,\n  updateSettings,\n  calculateCAP,\n  setCAP,\n  removeSuccess\n})(CAPCalculatorPage);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx"],"names":["React","useState","useEffect","connect","AutoCompleteText","LoadingDots","Table","PropTypes","setSemesterOptions","calculateCAP","setCAP","updateSettings","setSelectedModules","callBackendAPI","setModuleLocation","removeSuccess","generateOptions","generateObject","handleSaveClick","checkIsPast","isEmpty","Select","Alert","TableContent","CAPCalculatorPage","props","Option","gradeList","grade","gradePoint","isPast","setIsPast","userSemester","setUserSemester","semester","setSemester","semIndex","setSemIndex","AY","setAY","isTextBoxOpen","setIsTextBoxOpen","modplan","modules","settings","userInfo","modPlan","selectedModules","transcript","cap","setTranscript","targetCap","start","matriculationYear","substr","targetGradYear","year","currentAY","statusYear","updatedUserSemester","currentSemester","semesterOptions","indexOf","month","Number","matYear","end","handleGradeClick","value","object","past","pastSem","i","length","module","targetGrade","undefined","handleCheckboxChange","e","SU","handleArrowClick","direction","console","log","index","width","success","margin","setTimeout","clearTimeout","propType","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoCompleteText from \"../Module Planner Page/AutocompleteText\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nimport { Table } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, calculateCAP, setCAP } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules, callBackendAPI, setModuleLocation } from \"../../actions/modplanActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { generateOptions, generateObject, handleSaveClick, checkIsPast } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\nimport { Select, Alert } from \"antd\";\nimport { TableContent } from \"../Module Selection Page/Table Content\";\n\n\nconst CAPCalculatorPage = (props) => {\n    const { Option } = Select;\n\n    const gradeList = [\n        {grade: \"A+\", gradePoint: 5},\n        {grade: \"A\", gradePoint: 5},\n        {grade: \"A-\", gradePoint: 4.5},\n        {grade: \"B+\", gradePoint: 4},\n        {grade: \"B\", gradePoint: 3.5},\n        {grade: \"B-\", gradePoint: 3},\n        {grade: \"C+\", gradePoint: 2.5},\n        {grade: \"C\", gradePoint: 2},\n        {grade: \"D+\", gradePoint: 1.5},\n        {grade: \"D\", gradePoint: 1},\n        {grade: \"F\", gradePoint: 0}\n    ];\n\n    //whether the semester selected has been completed by user\n    const [isPast, setIsPast] = useState();\n    //to count what semester the user is in currently\n    const [userSemester, setUserSemester] = useState();\n    //semester that user selects\n    const [semester, setSemester] = useState(\"Overview\");\n    //semester index that user selects \n    const [semIndex, setSemIndex] = useState();\n    //AY that user selects\n    const [AY, setAY] = useState();\n    //whether autocomplete is open\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n\n    //call NUS MODS if it is not called already \n    // to provide pool of modules for user to select\n    useEffect(() => {\n        if(isEmpty(props.modplan.modules)) {\n            props.callBackendAPI(\"NUSMods\");\n        }\n    }, [])\n\n    useEffect(() => {\n        //if user has previously saved modPlan, \n        // transfer the information to selectedModules in modPlan Redux state\n        if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n            props.setSelectedModules(null, props.settings.userInfo.modPlan)\n        } \n\n        //if user has previously saved transcript, \n        // transfer the information to transcript in cap Redux state\n        if(!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n            props.setTranscript(null, props.settings.userInfo.transcript)\n        }\n\n        //default CAP is 5 but\n        //if user has previously saved CAP, transfer info to CAP in cap Redux State\n        if(props.settings.userInfo.cap) {\n            //if there is no targetCAP in userInfo, set targetCAP as 5\n            if (!props.settings.userInfo.targetCap) {\n                props.setCAP(props.settings.userInfo.cap, 5);\n            } else {\n                props.setCAP(props.settings.userInfo.cap, props.settings.userInfo.targetCap);\n            }\n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        if(!isEmpty(props.settings.userInfo)) {\n            //set semester options according to how many years the user will spend in NUS\n            const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n            props.setSemesterOptions(props.settings.userInfo.matriculationYear, \n                props.settings.userInfo.targetGradYear);\n\n            const year = props.settings.currentAY.substr(5,4);\n            const statusYear = year - start; \n            const updatedUserSemester = props.settings.currentSemester === \"Semester 1\" \n                ? statusYear * 2 - 1 \n                : statusYear * 2;\n            // const updatedUserAY = `Year ${Math.ceil(updatedUserSemester / 2)} ${props.settings.currentSemester}`;\n            setUserSemester(updatedUserSemester);\n            // setSemester(updatedUserAY);\n            \n        }\n        \n    }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear])\n\n    useEffect(() => {\n        if(!semIndex && !isEmpty(props.cap.semesterOptions)) {\n            setSemIndex(props.cap.semesterOptions.indexOf(semester));\n        }\n    }, [props.cap.semesterOptions])\n\n    useEffect(() => {\n        if(semester !== \"Overview\") {\n            setIsPast(\n                checkIsPast(semester, userSemester, props.settings.currentSemester, props.settings.month)\n                );\n        }\n       \n\n        //convert semester chosen to AY\n        const year = Number(semester.substr(5, 1));\n        const matYear = !isEmpty(props.settings.userInfo) ? Number(props.settings.userInfo.matriculationYear.substr(0,4)) : 0;\n        const end =  matYear + year;\n        setAY(`${end - 1}/${end}`);\n    }, [semester])\n\n    useEffect(() => {\n        if(!isEmpty(props.modplan.selectedModules)) {\n            props.calculateCAP(props.modplan.selectedModules);\n        }\n    }, [props.modplan.selectedModules])\n\n    const handleGradeClick = (value, object, past) => {\n        let gradePoint;\n        const pastSem = past ? past : isPast;\n        \n        for (let i = 0; i < gradeList.length; i++) {\n            if(gradeList[i].grade === value) {\n                gradePoint = gradeList[i].gradePoint;\n                break;\n            }\n        }\n        \n        const module = {...object.object}\n        if(pastSem) {\n            module.grade = value;\n            module.gradePoint = gradePoint;\n            module.targetGrade = undefined;\n        } else {\n            module.targetGrade = value;\n            module.gradePoint = gradePoint;\n        }\n        \n        props.setSelectedModules(module, props.modplan.selectedModules);\n    }\n\n    const handleCheckboxChange = (e, object) => {\n        const module = {...object};\n        module.SU = object.SU ? false : true;\n        props.setSelectedModules(module, props.modplan.selectedModules);\n    }\n\n    const handleArrowClick = (direction) => {\n        \n        if(direction === \"right\") {\n            setSemIndex(semIndex + 1);\n            setSemester(props.cap.semesterOptions[semIndex + 1]);\n            \n        } else {\n            if(semIndex === 0) {\n                setSemester(\"Overview\");\n            } else {\n                setSemester(props.cap.semesterOptions[semIndex -1]);\n            }\n            setSemIndex(semIndex - 1);\n            \n        }\n        \n    }\n    console.log(semester)\n    console.log(semIndex)\n    console.log(props.cap.semesterOptions)\n    return(\n        isEmpty(props.settings.userInfo)\n            ? <LoadingDots/>\n            : ( \n                <div>\n                    <div className=\"page-title\">\n                        <h3 id=\"module-planner-title\">CAP Calculator</h3>\n                    </div>\n                <div className=\"main-cap-div\">\n                    <div className=\"cap-description\">\n                        <div className=\"cap-status\">\n                            <h3 className=\"current-cap\">Current CAP: {props.cap.cap}</h3>\n                            <h3 className=\"target-future-cap\">Target Future CAP: {props.cap.targetCap}</h3>\n                        </div>\n                       \n                        <label>Semester :</label>\n                        <Select \n                            id=\"time\"\n                            defaultValue=\"Overview\"\n                            value={semester}\n                            onChange={(e, props) => {setSemester(e); setSemIndex(props.index);}}\n                            style={{width: \"250px\"}}>\n                            {/* buffer to display to wait for userInfo */}\n                            {isEmpty(props.cap.semesterOptions) && <Option>Overview</Option>}\n                            <Option value=\"Overview\" index={-1}>Overview</Option>\n                            {generateOptions(props.cap.semesterOptions)}\n                        </Select>\n\n                {/* <span className=\"fa-layers fa-fw \"/> */}\n                    {semIndex !== -1 &&\n                        (\n                            <i className=\"fas fa-arrow-left fa-lg fa-border\"\n                                onClick={() => { handleArrowClick(\"left\") }}/>\n                        )\n                    } \n                    {semIndex !== (props.cap.semesterOptions.length - 1) && \n                        (\n                            <i className=\"fas fa-arrow-right fa-lg fa-border\"\n                                onClick={() => { handleArrowClick(\"right\") }}/> \n                        )}\n                    </div>\n                \n                {/* Table to display modules taken according to modulePlanner */}\n\n                <div className=\"cap-table-section container\">\n                    <h3 id={semester === \"Overview\" ? \"overview\" : undefined}>{semester === \"Overview\" ? \"Overview\" : \"Courses taken this semester\"}</h3>\n                    <Table className=\"table table-hover cap-table\">\n                            {semester === \"Overview\" && props.modplan.selectedModules \n                                ? generateObject(\n                                    props.settings.userInfo.matriculationYear, \n                                    props.settings.userInfo.targetGradYear,\n                                    \"tables\", \n                                    props.modplan.selectedModules, \n                                    { \n                                        handleGradeClick: handleGradeClick,\n                                        handleCheckboxChange: handleCheckboxChange,\n                                        setModuleLocation: props.setModuleLocation,\n                                        userSemester: userSemester,\n                                        currentSemester: props.settings.currentSemester,\n                                        month: props.settings.month,\n                                        gradeList: gradeList\n                                    } \n                                    )\n                                : (\n                                    <TableContent \n                                        handleGradeClick={handleGradeClick}\n                                        handleCheckboxChange={handleCheckboxChange}\n                                        setModuleLocation={props.setModuleLocation}\n                                        module={props.modplan.selectedModules}\n                                        title={semester}\n                                        isPast={isPast}\n                                        gradeList={gradeList}/>\n                            )}\n                    </Table>\n                </div>\n                \n                \n                <div className=\"button-group\">\n                {/* For users to add modules directly from CAP Calculator */}\n                {semester !== \"Overview\" && isTextBoxOpen && \n                    <AutoCompleteText\n                        id=\"cap-autocomplete\"\n                        AY={AY}\n                        location={semester}\n                        module={props.modplan.modules}\n                        category=\"module\"/>}\n                \n                {semester !== \"Overview\" && <button className=\"button settings-button\" id=\"cap-add-module-button\" onClick={() => setIsTextBoxOpen(!isTextBoxOpen)}>Add Module</button>}\n\n                <button className=\"button settings-button\" id=\"cap-save-cap-button\" onClick={() => handleSaveClick(props)}>{isPast || semester === \"Overview\" ? \"Save Transcript\" : \"Save Target Grade\" }</button>\n                </div>\n\n                {!isEmpty(props.success) && \n                            <Alert \n                                message={props.success} \n                                type=\"success\" \n                                showIcon \n                                closable\n                                style={{margin: \"15px 0px\"}} />\n                        }\n                        \n                        {!isEmpty(props.success) && \n                            setTimeout(props.removeSuccess, 2000) &&\n                            clearTimeout(setTimeout(props.removeSuccess, 2000))}\n            </div>\n            </div>)\n    );\n}\n\n\nCAPCalculatorPage.propType = {\n    setSemesterOptions: PropTypes.func.isRequired,\n    setSelectedModules: PropTypes.func.isRequired,\n    callBackendAPI: PropTypes.func.isRequired,\n    setModuleLocation: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    generateOptions: PropTypes.func.isRequired,\n    calculateCAP: PropTypes.func.isRequired,\n    setCAP: PropTypes.func.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired,\n    selectedModules: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success\n});\n\nexport default connect(mapStateToProps,\n                        { setSemesterOptions, setSelectedModules, callBackendAPI, setModuleLocation, updateSettings, calculateCAP, setCAP, removeSuccess })\n                        (CAPCalculatorPage);"]},"metadata":{},"sourceType":"module"}