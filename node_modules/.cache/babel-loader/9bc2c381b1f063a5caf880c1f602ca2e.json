{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/AcadSettings.jsx\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport SideNav from \"./SideNav\";\nimport Options from './Options';\nimport DegreeSettings from \"./DegreeSettings\";\nimport LoadingDots from \"../Pages/Loading Page/LoadingDots\";\nimport { Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { updateSettings, setMatriculationYearOptions, setTargetGradYearOptions, setDegreeOptions, setEditAll } from \"../actions/settingsActions\";\nimport { deleteUser } from \"../actions/authActions\";\nimport { removeSuccess } from \"../actions/successActions\";\nimport isEmpty from \"is-empty\";\nimport { generateOptions } from '../utils/commonFunctions';\nimport { Spin, notification } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst AcadSettings = props => {\n  const antIcon = /*#__PURE__*/React.createElement(LoadingOutlined, {\n    style: {\n      fontSize: 24\n    },\n    spin: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }\n  });\n  const [userInput, setUserInput] = useReducer((state, newState) => ({ ...state,\n    ...newState\n  }), {\n    major: null,\n    majorIndex: null,\n    specialisation: null,\n    secondMajors: [],\n    minors: [],\n    residence: null,\n    matriculationYear: null,\n    targetGradYear: null\n  });\n  useEffect(() => {\n    if (isEmpty(props.settings.bachelorOptions)) {\n      props.setDegreeOptions();\n    }\n  }, []);\n  useEffect(() => {\n    if (props.settings.currentAY && isEmpty(props.settings.matriculationOptions)) {\n      props.setMatriculationYearOptions(props.settings.currentAY, props.settings.currentSemester);\n      props.setTargetGradYearOptions(props.settings.currentAY, props.settings.currentSemester);\n    }\n  }, [props.settings.currentAY]);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo)) {\n      if (props.settings.userInfo.major) {\n        setUserInput({\n          major: props.userInfo.major,\n          majorIndex: props.userInfo.majorIndex,\n          specialisation: props.userInfo.specialisation,\n          secondMajors: props.userInfo.secondMajors,\n          minors: props.userInfo.minors,\n          residence: props.userInfo.residential,\n          matriculationYear: props.userInfo.matriculationYear,\n          targetGradYear: props.userInfo.targetGradYear\n        });\n      } else {\n        props.setEditAll(true, props.settings.isEditing, \"editAll\");\n      }\n    }\n  }, [props.userInfo]);\n  useEffect(() => {\n    feedback();\n  }, [props.success]);\n\n  const openNotification = (type, placement) => {\n    notification[type]({\n      message: type === \"success\" ? \"Success!\" : \"Whoops!\",\n      description: type === \"success\" ? props.success : \"Please fill in your particulars before saving!\",\n      placement\n    });\n  };\n\n  const handleChange = (unusedParam, object) => {\n    console.log(object.name);\n    console.log(object);\n    const {\n      name,\n      value,\n      selectedindex,\n      tag,\n      honours,\n      specialisation\n    } = object;\n\n    if (name === \"major\") {\n      if (honours || specialisation) {\n        setUserInput({\n          [name]: {\n            name: value,\n            tag: tag,\n            honours: honours,\n            specialisation: specialisation\n          },\n          majorIndex: selectedindex\n        });\n      } else {\n        setUserInput({\n          [name]: {\n            name: value,\n            tag: tag\n          },\n          majorIndex: selectedindex\n        });\n      }\n    } else if (name === \"matriculationYear\" || name === \"targetGradYear\" || name === \"specialisation\") {\n      console.log(name);\n      setUserInput({\n        [name]: value\n      });\n    } else {\n      // if(isEmpty(options)) {\n      //   setUserInput(\n      //     {[name]: {\n      //       name: value,\n      //       tag: tag,\n      //       options: options\n      //     }}\n      //   );\n      // } else {\n      console.log('called');\n      setUserInput({\n        [name]: {\n          name: value,\n          tag: tag\n        }\n      }); // }\n    }\n  }; //Check if there is any part of userData that is undefined/falsy\n\n\n  const checkSubmission = userData => {\n    const keys = Object.keys(userData);\n    let status;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      status = userData[key] || userData[key] === 0 ? true : false;\n\n      if (!status) {\n        return status = false;\n      }\n    }\n\n    return status;\n  };\n\n  const handleSubmit = category => {\n    const userData = {\n      major: userInput.major,\n      majorIndex: userInput.majorIndex,\n      specialisation: userInput.specialisation,\n      secondMajors: userInput.secondMajors,\n      minors: userInput.minors,\n      residential: userInput.residence,\n      matriculationYear: userInput.matriculationYear,\n      targetGradYear: userInput.targetGradYear,\n      modPlan: props.modplan,\n      cap: props.cap.cap,\n      targetCap: props.cap.targetCap\n    }; //if all props of userData is filled, allow user to save\n    //else alert popup to redirect user back to filling in their data (TEMPORARY)\n\n    if (checkSubmission(userData)) {\n      props.updateSettings(userData, props.history, props.settings.isEditing, category);\n    } else {\n      openNotification('warning', 'bottomRight'); // props.setEditAll(true, props.settings.isEditing, category);\n    }\n  };\n\n  const presentButton = () => {\n    if (!props.settings.isEditing.editAll) {\n      if (!props.settings.isEditing[0]) {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"button settings-button\",\n          onClick: () => props.setEditAll(true, props.settings.isEditing, 0),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 16\n          }\n        }, \"Edit Settings\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          className: \"button settings-button\",\n          onClick: () => {\n            handleSubmit(0);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }\n        }, \"Save Settings\"), /*#__PURE__*/React.createElement(Spin, {\n          indicator: antIcon,\n          spinning: props.settings.isLoading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }\n        }));\n      }\n    }\n  };\n\n  const feedback = () => {\n    if (!isEmpty(props.success)) {\n      openNotification('success', \"bottomRight\");\n      setTimeout(props.removeSuccess, 500) && clearTimeout(setTimeout(props.removeSuccess, 2000));\n    }\n  };\n\n  return props.auth.loading ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(SideNav, {\n    active: \"academics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"acad-settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, \"Academic Settings\"), /*#__PURE__*/React.createElement(Card, {\n    className: \"container\",\n    id: \"general-acad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }, \"General Academic Settings\"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table settings-table table-hover\",\n    id: \"general-acad-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Options, {\n    label: \"Matriculation Year \",\n    handleChange: handleChange,\n    name: \"matriculationYear\",\n    value: userInput.matriculationYear,\n    editing: props.settings.isEditing[0] || props.settings.isEditing.editAll,\n    optionList: props.settings.matriculationOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Options, {\n    label: \"Graduation Year\",\n    handleChange: handleChange,\n    name: \"targetGradYear\",\n    value: userInput.targetGradYear,\n    editing: props.settings.isEditing[0] || props.settings.isEditing.editAll,\n    optionList: props.settings.targetGradOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Options, {\n    label: \"Residential College \",\n    handleChange: handleChange,\n    name: \"residence\",\n    value: userInput.residence,\n    editing: props.settings.isEditing[0] || props.settings.isEditing.editAll,\n    optionList: props.settings.residenceOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 19\n    }\n  }))), presentButton()), /*#__PURE__*/React.createElement(DegreeSettings, {\n    userInput: userInput,\n    setUserInput: setUserInput,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }), !props.settings.isEditing.editAll ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"all-settings\",\n    onClick: () => props.setEditAll(true, props.settings.isEditing, \"editAll\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, \"Edit All Settings\") : /*#__PURE__*/React.createElement(Spin, {\n    indicator: antIcon,\n    spinning: props.settings.isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button settings-button\",\n    id: \"all-settings\",\n    onClick: () => {\n      handleSubmit(\"editAll\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, \"Save All Settings\"))));\n};\n\nAcadSettings.propTypes = {\n  updateSettings: PropTypes.func.isRequired,\n  setMatriculationYearOptions: PropTypes.func.isRequired,\n  setTargetGradYearOptions: PropTypes.func.isRequired,\n  setDegreeOptions: PropTypes.func.isRequired,\n  setEditAll: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  deleteUser: PropTypes.func.isRequired,\n  modplan: PropTypes.array.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  modplan: state.modplan.selectedModules,\n  settings: state.settings,\n  userInfo: state.settings.userInfo,\n  cap: state.cap,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  updateSettings,\n  setMatriculationYearOptions,\n  setTargetGradYearOptions,\n  setDegreeOptions,\n  setEditAll,\n  removeSuccess,\n  deleteUser\n})(AcadSettings);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/AcadSettings.jsx"],"names":["React","useState","useEffect","useReducer","SideNav","Options","DegreeSettings","LoadingDots","Card","connect","PropTypes","updateSettings","setMatriculationYearOptions","setTargetGradYearOptions","setDegreeOptions","setEditAll","deleteUser","removeSuccess","isEmpty","generateOptions","Spin","notification","LoadingOutlined","AcadSettings","props","antIcon","fontSize","userInput","setUserInput","state","newState","major","majorIndex","specialisation","secondMajors","minors","residence","matriculationYear","targetGradYear","settings","bachelorOptions","currentAY","matriculationOptions","currentSemester","userInfo","residential","isEditing","feedback","success","openNotification","type","placement","message","description","handleChange","unusedParam","object","console","log","name","value","selectedindex","tag","honours","checkSubmission","userData","keys","Object","status","i","length","key","handleSubmit","category","modPlan","modplan","cap","targetCap","history","presentButton","editAll","isLoading","setTimeout","clearTimeout","auth","loading","targetGradOptions","residenceOptions","propTypes","func","isRequired","array","mapStateToProps","selectedModules"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useReducer} from 'react';\nimport SideNav from \"./SideNav\";\nimport Options from './Options';\nimport DegreeSettings from \"./DegreeSettings\";\nimport LoadingDots from \"../Pages/Loading Page/LoadingDots\"\nimport { Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport { updateSettings, setMatriculationYearOptions,\n  setTargetGradYearOptions, setDegreeOptions,\n  setEditAll } from \"../actions/settingsActions\";\nimport { deleteUser } from \"../actions/authActions\";\nimport { removeSuccess } from \"../actions/successActions\";\nimport isEmpty from \"is-empty\";\nimport { generateOptions } from '../utils/commonFunctions';\nimport { Spin, notification } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\n\nconst AcadSettings = (props) => {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n  const [userInput, setUserInput] = useReducer(\n    (state, newState) => ({...state, ...newState}), \n    {\n      major: null,\n      majorIndex: null,\n      specialisation: null,\n      secondMajors: [],\n      minors: [],\n      residence: null,\n      matriculationYear: null,\n      targetGradYear: null\n    }\n  );\n\n  useEffect(() => {\n    if(isEmpty(props.settings.bachelorOptions)) {\n        props.setDegreeOptions();\n    } \n  }, []);\n\n  useEffect(() => {\n    if(props.settings.currentAY && isEmpty(props.settings.matriculationOptions)) {\n        props.setMatriculationYearOptions(props.settings.currentAY, props.settings.currentSemester);\n        props.setTargetGradYearOptions(props.settings.currentAY, props.settings.currentSemester);\n    }\n  }, [props.settings.currentAY]);\n\n  useEffect(() => {\n    if(!isEmpty(props.settings.userInfo)) {\n      if(props.settings.userInfo.major) {\n        setUserInput({\n          major: props.userInfo.major,\n          majorIndex: props.userInfo.majorIndex,\n          specialisation: props.userInfo.specialisation,\n          secondMajors: props.userInfo.secondMajors,\n          minors: props.userInfo.minors,\n          residence: props.userInfo.residential,\n          matriculationYear: props.userInfo.matriculationYear,\n          targetGradYear: props.userInfo.targetGradYear\n        });\n      } else {\n        props.setEditAll(true, props.settings.isEditing, \"editAll\");\n      }\n    }\n  }, [props.userInfo]);\n\n  useEffect(() => {\n    feedback();\n  }, [props.success])\n\n  const openNotification = (type, placement) => {\n    notification[type]({\n      message: type === \"success\" ? \"Success!\" : \"Whoops!\",\n      description:\n        type === \"success\" ? props.success : \"Please fill in your particulars before saving!\",\n      placement,\n    });\n  };\n\n  const handleChange = (unusedParam, object) => {\n    console.log(object.name)\n    console.log(object)\n    const {name, value, selectedindex, tag, honours, specialisation} = object;\n\n    if(name === \"major\") {\n      if(honours || specialisation) {\n        setUserInput(\n          {[name]: {\n            name: value,\n            tag: tag,\n            honours: honours,\n            specialisation: specialisation\n          },\n          majorIndex: (selectedindex)}\n        );\n      } else {\n        setUserInput(\n          {[name]: {\n            name: value,\n            tag: tag\n          },\n          majorIndex: (selectedindex)}\n        );\n      }\n    } else if(name === \"matriculationYear\" || name === \"targetGradYear\" || name === \"specialisation\") {\n      console.log(name)\n      setUserInput({[name]: value});\n   \n    } else {\n      // if(isEmpty(options)) {\n      //   setUserInput(\n      //     {[name]: {\n      //       name: value,\n      //       tag: tag,\n      //       options: options\n      //     }}\n      //   );\n      // } else {\n        console.log('called')\n        setUserInput(\n          {[name]: {\n            name: value,\n            tag: tag\n          }}\n        );\n      // }\n    } \n  };\n\n\n  //Check if there is any part of userData that is undefined/falsy\n  const checkSubmission = (userData) => {\n    const keys = Object.keys(userData);\n    let status;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      status = (userData[key] || userData[key] === 0) ? true : false;\n     \n      if(!status) {\n        return status = false;\n      }\n    }\n\n    return status;\n  }\n\n  const handleSubmit = (category) => {\n    const userData = {\n      major: userInput.major,\n      majorIndex: userInput.majorIndex,\n      specialisation: userInput.specialisation,\n      secondMajors: userInput.secondMajors,\n      minors: userInput.minors,\n      residential: userInput.residence,\n      matriculationYear: userInput.matriculationYear,\n      targetGradYear: userInput.targetGradYear,\n      modPlan: props.modplan,\n      cap: props.cap.cap,\n      targetCap: props.cap.targetCap\n    }\n\n    //if all props of userData is filled, allow user to save\n    //else alert popup to redirect user back to filling in their data (TEMPORARY)\n    if(checkSubmission(userData)) {\n      props.updateSettings(userData, props.history, props.settings.isEditing, category);\n\n    } else {\n      openNotification('warning', 'bottomRight');\n      // props.setEditAll(true, props.settings.isEditing, category);\n    }\n  } \n\n  const presentButton = () => {\n    if(!props.settings.isEditing.editAll) {\n      if(!props.settings.isEditing[0]) {\n        return <button \n          className=\"button settings-button\" \n          onClick={() => props.setEditAll(true, props.settings.isEditing, 0)}>\n              Edit Settings\n        </button>\n\n      } else {\n        return (\n          <div>\n            <button \n              className=\"button settings-button\" \n              onClick={() => {\n                handleSubmit(0);\n                }}>\n                Save Settings\n            </button>\n            <Spin indicator={antIcon} spinning={props.settings.isLoading}/>\n          </div>\n        )\n      }\n    }\n  }\n\n  const feedback = () => {\n     if(!isEmpty(props.success)) {\n      openNotification('success', \"bottomRight\" );\n        setTimeout(props.removeSuccess, 500) &&\n        clearTimeout(setTimeout(props.removeSuccess, 2000))\n     } \n  }\n\n  return (\n    props.auth.loading \n      ? <LoadingDots/>\n      : (<div className=\"settings\">\n          <SideNav active=\"academics\"/>\n          \n          <div className=\"acad-settings\">\n            <h1>Academic Settings</h1>\n\n            <Card className=\"container\" id=\"general-acad\">\n              <Card.Header className=\"card-header\">General Academic Settings</Card.Header>\n              <table className=\"table settings-table table-hover\" id=\"general-acad-table\">\n                <tbody>\n                  <Options\n                    label=\"Matriculation Year \"\n                    handleChange={handleChange}\n                    name=\"matriculationYear\"\n                    value={userInput.matriculationYear}\n                    editing={props.settings.isEditing[0] || props.settings.isEditing.editAll}\n                    optionList={props.settings.matriculationOptions}/>\n\n                  <Options\n                    label=\"Graduation Year\"\n                    handleChange={handleChange}\n                    name=\"targetGradYear\"\n                    value={userInput.targetGradYear}\n                    editing={props.settings.isEditing[0] || props.settings.isEditing.editAll}\n                    optionList={props.settings.targetGradOptions}/>\n\n                  <Options\n                    label=\"Residential College \"\n                    handleChange={handleChange}\n                    name=\"residence\"\n                    value={userInput.residence}\n                    editing={props.settings.isEditing[0] || props.settings.isEditing.editAll}\n                    optionList={props.settings.residenceOptions}/>\n                </tbody>\n              </table>\n\n              {presentButton()}\n            </Card> \n\n            <DegreeSettings\n              userInput={userInput}\n              setUserInput={setUserInput}\n              handleChange={handleChange}\n              handleSubmit={handleSubmit}\n            />\n\n          {!props.settings.isEditing.editAll \n            ? <button \n                className=\"button settings-button\" id=\"all-settings\"\n                onClick={() => props.setEditAll(true, props.settings.isEditing, \"editAll\")}>\n                    Edit All Settings\n              </button>\n            : (\n              <Spin indicator={antIcon} spinning={props.settings.isLoading}>\n                <button \n                  className=\"button settings-button\" id=\"all-settings\"\n                  onClick={() => {\n                      handleSubmit(\"editAll\");}}>\n                    Save All Settings\n                  \n                </button>\n              </Spin>\n              )\n          }\n          </div>\n        </div>)\n  );\n}\n\n\nAcadSettings.propTypes = {\n  updateSettings: PropTypes.func.isRequired,\n  setMatriculationYearOptions: PropTypes.func.isRequired,\n  setTargetGradYearOptions: PropTypes.func.isRequired,\n  setDegreeOptions: PropTypes.func.isRequired,\n  setEditAll: PropTypes.func.isRequired,\n  removeSuccess: PropTypes.func.isRequired,\n  deleteUser: PropTypes.func.isRequired,\n  modplan: PropTypes.array.isRequired,\n  settings: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  modplan: state.modplan.selectedModules,\n  settings: state.settings,\n  userInfo: state.settings.userInfo,\n  cap: state.cap,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, \n  { updateSettings, setMatriculationYearOptions, setTargetGradYearOptions, setDegreeOptions, setEditAll, removeSuccess, deleteUser }) (AcadSettings);\n"]},"metadata":{},"sourceType":"module"}