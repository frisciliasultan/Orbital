{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoCompleteText from \"../Module Planner Page/AutocompleteText\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, calculateCAP, setCAP } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules, callBackendAPI, setModuleLocation } from \"../../actions/modplanActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { generateOptions, generateObject, handleSaveClick } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\nimport { Select } from \"antd\";\nimport { generatePath } from \"react-router-dom\";\nimport { Table } from \"../Module Selection Page/Module Table\";\n\nconst CAPCalculatorPage = props => {\n  const {\n    Option\n  } = Select; //whether the semester selected has been completed by user\n\n  const [isPast, setIsPast] = useState(); //to count what semester the user is in currently\n\n  const [userSemester, setUserSemester] = useState(); //semester that user selects\n\n  const [semester, setSemester] = useState(\"Year 1 Semester 1\"); //AY that user selects\n\n  const [AY, setAY] = useState(); //whether autocomplete is open\n\n  const [isTextBoxOpen, setIsTextBoxOpen] = useState(false); //call NUS MODS if it is not called already \n  // to provide pool of modules for user to select\n\n  useEffect(() => {\n    if (isEmpty(props.modplan.modules)) {\n      props.callBackendAPI(\"NUSMods\");\n    }\n  }, []);\n  useEffect(() => {\n    //if user has previously saved modPlan, \n    // transfer the information to selectedModules in modPlan Redux state\n    if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n      props.setSelectedModules(null, props.settings.userInfo.modPlan);\n    } //if user has previously saved transcript, \n    // transfer the information to transcript in cap Redux state\n\n\n    if (!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n      props.setTranscript(null, props.settings.userInfo.transcript);\n    } //default CAP is 5 but\n    //if user has previously saved CAP, transfer info to CAP in cap Redux State\n\n\n    if (props.settings.userInfo.cap) {\n      //if there is no targetCAP in userInfo, set targetCAP as 5\n      if (!props.settings.userInfo.targetCap) {\n        props.setCAP(props.settings.userInfo.cap, 5);\n      } else {\n        props.setCAP(props.settings.userInfo.cap, props.settings.userInfo.targetCap);\n      }\n    }\n  }, [props.settings.userInfo]);\n  useEffect(() => {\n    if (!isEmpty(props.settings.userInfo)) {\n      //set semester options according to how many years the user will spend in NUS\n      const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n      props.setSemesterOptions(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear);\n      const year = props.settings.currentAY.substr(5, 4);\n      const statusYear = year - start;\n      const updatedUserSemester = props.settings.currentSemester === \"Semester 1\" ? statusYear * 2 - 1 : statusYear * 2;\n      const updatedUserAY = `Year ${Math.ceil(updatedUserSemester / 2)} ${props.settings.currentSemester}`;\n      setUserSemester(updatedUserSemester);\n      setSemester(updatedUserAY);\n    }\n  }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear]);\n  useEffect(() => {\n    const currSem = convertSemToNumber(semester); //check if the semester chosen is in the past or future\n\n    if (userSemester > currSem) {\n      setIsPast(true);\n    } else if (userSemester === currSem) {\n      if (props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12 || props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6) {\n        setIsPast(true);\n      }\n    } else {\n      setIsPast(false);\n    } //convert semester chosen to AY\n\n\n    const year = Number(semester.substr(5, 1));\n    const matYear = !isEmpty(props.settings.userInfo) ? Number(props.settings.userInfo.matriculationYear.substr(0, 4)) : 0;\n    const end = matYear + year;\n    setAY(`${end - 1}/${end}`);\n  }, [semester]);\n  useEffect(() => {\n    if (!isEmpty(props.modplan.selectedModules)) {\n      props.calculateCAP(props.modplan.selectedModules);\n    }\n  }, [props.modplan.selectedModules]); //Eg. Y2S1 => 3 (third sem)\n\n  const convertSemToNumber = sem => {\n    if (sem.substr(7) === \"Semester 1\") {\n      return sem.substr(5, 1) * 2 - 1;\n    } else {\n      return sem.substr(5, 1) * 2;\n    }\n  };\n\n  const handleGradeClick = (value, object) => {\n    let gradePoint;\n\n    for (let i = 0; i < gradeList.length; i++) {\n      if (gradeList[i].grade === value) {\n        gradePoint = gradeList[i].gradePoint;\n        break;\n      }\n    }\n\n    const module = { ...object.object\n    };\n\n    if (isPast) {\n      module.grade = value;\n      module.gradePoint = gradePoint;\n      module.targetGrade = undefined;\n    } else {\n      module.targetGrade = value;\n      module.gradePoint = gradePoint;\n    }\n\n    props.setSelectedModules(module, props.modplan.selectedModules);\n  };\n\n  const handleCheckboxChange = (e, object) => {\n    const module = { ...object\n    };\n    module.SU = object.SU ? false : true;\n    props.setSelectedModules(module, props.modplan.selectedModules);\n  };\n\n  return isEmpty(props.settings.userInfo) ? /*#__PURE__*/React.createElement(LoadingDots, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, \"CAP Calculator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"Current CAP: \", props.cap.cap), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Target Future CAP: \", props.cap.targetCap), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, \"Semester :\"), /*#__PURE__*/React.createElement(Select, {\n    id: \"time\",\n    defaultValue: \"Overview\",\n    value: semester,\n    onChange: e => setSemester(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, isEmpty(props.cap.semesterOptions) && /*#__PURE__*/React.createElement(Option, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 56\n    }\n  }, \"Overview\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"Overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, \"Overview\"), generateOptions(props.cap.semesterOptions)), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"fa-layers fa-fw \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrow-left fa-lg fa-border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-arrow-right fa-lg fa-border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }), semester === \"Overview\" ? generateObject(props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear, \"tables\", props.modplan.selectedModules) : /*#__PURE__*/React.createElement(Table, {\n    handleGradeClick: handleGradeClick,\n    handleCheckboxChange: handleCheckboxChange,\n    isPast: isPast,\n    setModuleLocation: props.setModuleLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }) // <table className=\"table table-hover\">\n  //     <th>Module Title</th>\n  //     <th>Module Code</th>\n  //     <th>Modular Credits</th>\n  //     <th>{isPast ? \"Grade\" : \"Target Grade\"}</th>\n  //     {isPast && <th>S/U</th>}\n  //     <th></th>\n  //     <tbody>\n  //         {!isEmpty(props.settings.userInfo) && generateTable()}\n  //     </tbody>\n  // </table>\n  , isTextBoxOpen && /*#__PURE__*/React.createElement(AutoCompleteText, {\n    AY: AY,\n    location: semester,\n    module: props.modplan.modules,\n    category: \"module\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => setIsTextBoxOpen(!isTextBoxOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, \"Add Module\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"button\",\n    onClick: () => handleSaveClick(props),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }, isPast ? \"Save Transcript\" : \"Save Target Grade\"), !isEmpty(props.success) && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, props.success), !isEmpty(props.success) && setTimeout(props.removeSuccess, 500) && clearTimeout(setTimeout(props.removeSuccess, 2000)));\n};\n\nCAPCalculatorPage.propType = {\n  setSemesterOptions: PropTypes.func.isRequired,\n  setSelectedModules: PropTypes.func.isRequired,\n  callBackendAPI: PropTypes.func.isRequired,\n  setModuleLocation: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  generateOptions: PropTypes.func.isRequired,\n  calculateCAP: PropTypes.func.isRequired,\n  setCAP: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired,\n  cap: PropTypes.object.isRequired,\n  selectedModules: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n  cap: state.cap,\n  modplan: state.modplan,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  setSemesterOptions,\n  setSelectedModules,\n  callBackendAPI,\n  setModuleLocation,\n  updateSettings,\n  calculateCAP,\n  setCAP,\n  removeSuccess\n})(CAPCalculatorPage);","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Pages/CAP Calculator Page/CAPCalculatorPage.jsx"],"names":["React","useState","useEffect","connect","AutoCompleteText","LoadingDots","Button","PropTypes","setSemesterOptions","calculateCAP","setCAP","updateSettings","setSelectedModules","callBackendAPI","setModuleLocation","removeSuccess","generateOptions","generateObject","handleSaveClick","isEmpty","Select","generatePath","Table","CAPCalculatorPage","props","Option","isPast","setIsPast","userSemester","setUserSemester","semester","setSemester","AY","setAY","isTextBoxOpen","setIsTextBoxOpen","modplan","modules","settings","userInfo","modPlan","selectedModules","transcript","cap","setTranscript","targetCap","start","matriculationYear","substr","targetGradYear","year","currentAY","statusYear","updatedUserSemester","currentSemester","updatedUserAY","Math","ceil","currSem","convertSemToNumber","month","Number","matYear","end","sem","handleGradeClick","value","object","gradePoint","i","gradeList","length","grade","module","targetGrade","undefined","handleCheckboxChange","e","SU","semesterOptions","success","color","setTimeout","clearTimeout","propType","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport AutoCompleteText from \"../Module Planner Page/AutocompleteText\";\nimport LoadingDots from \"../Loading Page/LoadingDots\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\nimport { setSemesterOptions, calculateCAP, setCAP } from '../../actions/capActions';\nimport { updateSettings } from \"../../actions/settingsActions\";\nimport { setSelectedModules, callBackendAPI, setModuleLocation } from \"../../actions/modplanActions\";\nimport { removeSuccess } from \"../../actions/successActions\";\nimport { generateOptions, generateObject, handleSaveClick } from \"../../utils/commonFunctions\";\nimport isEmpty from 'is-empty';\nimport { Select } from \"antd\";\nimport { generatePath } from \"react-router-dom\";\nimport { Table } from \"../Module Selection Page/Module Table\";\n\n\nconst CAPCalculatorPage = (props) => {\n    const { Option } = Select;\n\n    //whether the semester selected has been completed by user\n    const [isPast, setIsPast] = useState();\n    //to count what semester the user is in currently\n    const [userSemester, setUserSemester] = useState();\n    //semester that user selects\n    const [semester, setSemester] = useState(\"Year 1 Semester 1\");\n    //AY that user selects\n    const [AY, setAY] = useState();\n    //whether autocomplete is open\n    const [isTextBoxOpen, setIsTextBoxOpen] = useState(false);\n\n    //call NUS MODS if it is not called already \n    // to provide pool of modules for user to select\n    useEffect(() => {\n        if(isEmpty(props.modplan.modules)) {\n            props.callBackendAPI(\"NUSMods\");\n        }\n    }, [])\n\n    useEffect(() => {\n        //if user has previously saved modPlan, \n        // transfer the information to selectedModules in modPlan Redux state\n        if (!isEmpty(props.settings.userInfo.modPlan) && isEmpty(props.modplan.selectedModules)) {\n            props.setSelectedModules(null, props.settings.userInfo.modPlan)\n        } \n\n        //if user has previously saved transcript, \n        // transfer the information to transcript in cap Redux state\n        if(!isEmpty(props.settings.userInfo.transcript) && isEmpty(props.cap.transcript)) {\n            props.setTranscript(null, props.settings.userInfo.transcript)\n        }\n\n        //default CAP is 5 but\n        //if user has previously saved CAP, transfer info to CAP in cap Redux State\n        if(props.settings.userInfo.cap) {\n            //if there is no targetCAP in userInfo, set targetCAP as 5\n            if (!props.settings.userInfo.targetCap) {\n                props.setCAP(props.settings.userInfo.cap, 5);\n            } else {\n                props.setCAP(props.settings.userInfo.cap, props.settings.userInfo.targetCap);\n            }\n        }\n    }, [props.settings.userInfo])\n\n    useEffect(() => {\n        if(!isEmpty(props.settings.userInfo)) {\n            //set semester options according to how many years the user will spend in NUS\n            const start = props.settings.userInfo.matriculationYear.substr(0, 4);\n            props.setSemesterOptions(props.settings.userInfo.matriculationYear, \n                props.settings.userInfo.targetGradYear);\n\n            const year = props.settings.currentAY.substr(5,4);\n            const statusYear = year - start; \n            const updatedUserSemester = props.settings.currentSemester === \"Semester 1\" \n                ? statusYear * 2 - 1 \n                : statusYear * 2;\n            const updatedUserAY = `Year ${Math.ceil(updatedUserSemester / 2)} ${props.settings.currentSemester}`;\n            setUserSemester(updatedUserSemester);\n            setSemester(updatedUserAY);\n        }\n    }, [props.settings.userInfo.matriculationYear, props.settings.userInfo.targetGradYear])\n\n    useEffect(() => {\n        const currSem = convertSemToNumber(semester);\n\n        //check if the semester chosen is in the past or future\n        if (userSemester > currSem) {\n            setIsPast(true);\n        } else if (userSemester === currSem) {\n            if ((props.settings.currentSemester === \"Semester 1\" && props.settings.month === 12) \n                || (props.settings.currentSemester === \"Semester 2\" && props.settings.month >= 6)) {\n                    setIsPast(true);\n            }\n        } else {\n            setIsPast(false);\n        }\n\n        //convert semester chosen to AY\n        const year = Number(semester.substr(5, 1));\n        const matYear = !isEmpty(props.settings.userInfo) ? Number(props.settings.userInfo.matriculationYear.substr(0,4)) : 0;\n        const end =  matYear + year;\n        setAY(`${end - 1}/${end}`);\n    }, [semester])\n\n    useEffect(() => {\n        if(!isEmpty(props.modplan.selectedModules)) {\n            props.calculateCAP(props.modplan.selectedModules);\n        }\n    }, [props.modplan.selectedModules])\n\n    //Eg. Y2S1 => 3 (third sem)\n    const convertSemToNumber = (sem) => {\n        if(sem.substr(7) === \"Semester 1\") {\n            return sem.substr(5,1) * 2 - 1;\n        } else {\n            return sem.substr(5,1) * 2;\n        }\n    }\n\n    const handleGradeClick = (value, object) => {\n        let gradePoint;\n        for (let i = 0; i < gradeList.length; i++) {\n            if(gradeList[i].grade === value) {\n                gradePoint = gradeList[i].gradePoint;\n                break;\n            }\n        }\n        \n        const module = {...object.object}\n        if(isPast) {\n            module.grade = value;\n            module.gradePoint = gradePoint;\n            module.targetGrade = undefined;\n        } else {\n            module.targetGrade = value;\n            module.gradePoint = gradePoint;\n        }\n        \n        props.setSelectedModules(module, props.modplan.selectedModules);\n    }\n\n    const handleCheckboxChange = (e, object) => {\n        const module = {...object};\n        module.SU = object.SU ? false : true;\n        props.setSelectedModules(module, props.modplan.selectedModules);\n    }\n\n    \n    \n    return(\n        isEmpty(props.settings.userInfo)\n            ? <LoadingDots/>\n            : (<div className=\"ml-4\">\n            <h1 className=\"display-3\">CAP Calculator</h1>\n            <h3>Current CAP: {props.cap.cap}</h3>\n            <h3>Target Future CAP: {props.cap.targetCap}</h3>\n            {/* <h5 onClick={() => {this.setState({open: true})}}>Or click here to manually input CAP</h5> */}\n            {/* {this.state.open && (<input type=\"text\"/>)} */}\n            <label>Semester :</label>\n            <Select \n                id=\"time\"\n                defaultValue=\"Overview\"\n                value={semester}\n                onChange={(e) => setSemester(e)}>\n                {/* buffer to display to wait for userInfo */}\n                {isEmpty(props.cap.semesterOptions) && <Option>Overview</Option>}\n                <Option value=\"Overview\">Overview</Option>\n                {generateOptions(props.cap.semesterOptions)}\n            </Select>\n\n             <span className=\"fa-layers fa-fw \"/>\n                <i className=\"fas fa-arrow-left fa-lg fa-border\"/>\n                <i className=\"fas fa-arrow-right fa-lg fa-border\"/> \n            <br/>\n            \n            {/* Table to display modules taken according to modulePlanner */}\n            {semester === \"Overview\" \n                ? generateObject(props.settings.userInfo.matriculationYear, \n                    props.settings.userInfo.targetGradYear,\n                    \"tables\", props.modplan.selectedModules, )\n                : (\n                    <Table \n                        handleGradeClick={handleGradeClick}\n                        handleCheckboxChange={handleCheckboxChange}\n                        isPast={isPast}\n                        setModuleLocation={props.setModuleLocation}/>\n                    \n                    // <table className=\"table table-hover\">\n                    //     <th>Module Title</th>\n                    //     <th>Module Code</th>\n                    //     <th>Modular Credits</th>\n                    //     <th>{isPast ? \"Grade\" : \"Target Grade\"}</th>\n                    //     {isPast && <th>S/U</th>}\n                    //     <th></th>\n                    //     <tbody>\n                    //         {!isEmpty(props.settings.userInfo) && generateTable()}\n                    //     </tbody>\n                    // </table>\n                )}\n            \n\n            {/* For users to add modules directly from CAP Calculator */}\n            {isTextBoxOpen && <AutoCompleteText \n                                            AY={AY}\n                                            location={semester}\n                                            module={props.modplan.modules}\n                                            category=\"module\"/>}\n            <Button className=\"button\" onClick={() => setIsTextBoxOpen(!isTextBoxOpen)}>Add Module</Button>\n            \n            <br/>\n            <br/>\n\n            <Button className=\"button\" onClick={() => handleSaveClick(props)}>{isPast ? \"Save Transcript\" : \"Save Target Grade\" }</Button>\n            {!isEmpty(props.success) && \n                <p style={{color: \"green\"}}>\n                    {props.success}\n                </p>\n                \n                }\n                \n                {!isEmpty(props.success) && \n                    setTimeout(props.removeSuccess, 500) &&\n                    clearTimeout(setTimeout(props.removeSuccess, 2000))}\n        </div>)\n    );\n}\n\n\nCAPCalculatorPage.propType = {\n    setSemesterOptions: PropTypes.func.isRequired,\n    setSelectedModules: PropTypes.func.isRequired,\n    callBackendAPI: PropTypes.func.isRequired,\n    setModuleLocation: PropTypes.func.isRequired,\n    updateSettings: PropTypes.func.isRequired,\n    generateOptions: PropTypes.func.isRequired,\n    calculateCAP: PropTypes.func.isRequired,\n    setCAP: PropTypes.func.isRequired,\n    settings: PropTypes.object.isRequired,\n    cap: PropTypes.object.isRequired,\n    selectedModules: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    settings: state.settings,\n    cap: state.cap,\n    modplan: state.modplan,\n    success: state.success\n});\n\nexport default connect(mapStateToProps,\n                        { setSemesterOptions, setSelectedModules, callBackendAPI, setModuleLocation, updateSettings, calculateCAP, setCAP, removeSuccess })\n                        (CAPCalculatorPage);"]},"metadata":{},"sourceType":"module"}