{"ast":null,"code":"import axios from 'axios';\nimport { SET_BOARD_FILLED, SET_MODULES, SET_RULES, SET_CALL_BACKEND_NOW, SET_SELECTED_MODULES, SET_MODULE_LOCATION, SET_CURRRENT_SEMESTER, CLEAN_UP_MODPLAN } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\nconst compile = require('../backend_utils/compile');\n\nconst toView = require('../backend_utils/toView');\n\nexport const setIsBoardFilled = () => {\n  return {\n    type: SET_BOARD_FILLED\n  };\n};\nexport const callBackendAPI = (backend, modplanObj) => async dispatch => {\n  if (backend === 'NUSMods') {\n    setAuthToken(false);\n    axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json').then(res => dispatch(setModules(res.data))).then(setAuthToken(localStorage.jwtToken)).catch(err => {\n      console.log(err);\n    });\n  } else {\n    const modplan = modplanObj.map(obj => {\n      return obj.moduleCode;\n    });\n\n    try {\n      const ruleList = await axios.get('https://modtree-api.netlify.app/.netlify/functions/user/directory');\n      const ruleData = await Promise.all(ruleList.data.list.map(ruleTag => {\n        return axios.get('https://modtree-api.netlify.app/.netlify/functions/rules/assemble/' + ruleTag).then(res => {\n          if (res.status !== 200) {\n            throw Error(res.message);\n          } // return compile(res.data)\n          // console.log(res.data)\n\n\n          return res.data;\n        }).then(res => {\n          // const data = await compile(res);\n          return compile(res);\n        });\n      }));\n      dispatch(setRules(ruleData));\n    } catch (err) {\n      console.log(err);\n    }\n\n    ;\n  }\n};\nexport const evalRules = (ruleData, modplan) => {\n  return ruleData.map(asyncFunc => {\n    return func => func({\n      modules: modplan\n    }).then(res => toView(res));\n  });\n};\nexport const setModules = modules => {\n  return {\n    type: SET_MODULES,\n    payload: modules\n  };\n};\nexport const setRules = rules => {\n  return {\n    type: SET_RULES,\n    payload: rules\n  };\n};\nexport const setCallBackendNow = status => {\n  return {\n    type: SET_CALL_BACKEND_NOW,\n    payload: status\n  };\n};\nexport const setSelectedModules = (object, selectedModules) => {\n  return {\n    type: SET_SELECTED_MODULES,\n    moduleAdded: object,\n    currentSelectedModules: selectedModules\n  };\n};\nexport const setModuleLocation = (item, location, AY, selectedModules) => {\n  return {\n    type: SET_MODULE_LOCATION,\n    item,\n    location,\n    AY,\n    modules: selectedModules\n  };\n};\nexport const setCurrentSemester = (AY, semester) => {\n  return {\n    type: SET_CURRRENT_SEMESTER,\n    AY,\n    semester\n  };\n};\nexport const cleanUpModPlan = () => {\n  return {\n    type: CLEAN_UP_MODPLAN\n  };\n};","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/actions/modplanActions.js"],"names":["axios","SET_BOARD_FILLED","SET_MODULES","SET_RULES","SET_CALL_BACKEND_NOW","SET_SELECTED_MODULES","SET_MODULE_LOCATION","SET_CURRRENT_SEMESTER","CLEAN_UP_MODPLAN","setAuthToken","compile","require","toView","setIsBoardFilled","type","callBackendAPI","backend","modplanObj","dispatch","get","then","res","setModules","data","localStorage","jwtToken","catch","err","console","log","modplan","map","obj","moduleCode","ruleList","ruleData","Promise","all","list","ruleTag","status","Error","message","setRules","evalRules","asyncFunc","func","modules","payload","rules","setCallBackendNow","setSelectedModules","object","selectedModules","moduleAdded","currentSelectedModules","setModuleLocation","item","location","AY","setCurrentSemester","semester","cleanUpModPlan"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    SET_BOARD_FILLED,\n    SET_MODULES,\n    SET_RULES,\n    SET_CALL_BACKEND_NOW,\n    SET_SELECTED_MODULES,\n    SET_MODULE_LOCATION,\n    SET_CURRRENT_SEMESTER,\n    CLEAN_UP_MODPLAN\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\nconst compile = require('../backend_utils/compile');\nconst toView = require('../backend_utils/toView');\n\nexport const setIsBoardFilled = () => {\n    return {\n        type: SET_BOARD_FILLED,\n    }\n}\n\nexport const callBackendAPI = (backend, modplanObj) => async dispatch => {\n\n    if(backend === 'NUSMods') {\n        setAuthToken(false);\n        axios.get('https://api.nusmods.com/v2/2018-2019/moduleInfo.json' )\n        .then(res => dispatch(setModules(res.data)))\n        .then(setAuthToken(localStorage.jwtToken))\n        .catch(err => {\n            console.log(err)\n        });\n        \n    } else {\n        const modplan = modplanObj.map((obj) => {\n            return obj.moduleCode\n        });\n        try {\n            const ruleList = await axios.get('https://modtree-api.netlify.app/.netlify/functions/user/directory');\n            const ruleData = await Promise.all(ruleList.data.list.map((ruleTag) => {\n                return axios\n                    .get('https://modtree-api.netlify.app/.netlify/functions/rules/assemble/' + ruleTag)\n                    .then(res => {\n                        if(res.status !== 200) {\n                            throw Error (res.message);\n                        }\n                        // return compile(res.data)\n                        // console.log(res.data)\n                        return res.data\n                        \n                    })\n                    .then(res => {\n                        // const data = await compile(res);\n\n                        return compile(res);\n                    })\n                    \n            }));\n            dispatch(setRules(ruleData));\n        } catch(err) {\n            console.log(err)\n        };\n    }\n    \n}\n\nexport const evalRules = (ruleData, modplan) => {\n    return ruleData.map((asyncFunc) => {\n        return func => func({modules: modplan})\n            .then(res => toView(res))\n    })\n}\n\nexport const setModules = (modules) => {\n    return {\n        type: SET_MODULES,\n        payload: modules\n    }\n}\n\nexport const setRules = (rules) => {\n    return {\n        type: SET_RULES,\n        payload: rules\n    }\n}\n\nexport const setCallBackendNow = (status) => {\n    return {\n        type: SET_CALL_BACKEND_NOW,\n        payload: status\n    }\n}\n\nexport const setSelectedModules = (object, selectedModules) => {\n    return { \n        type: SET_SELECTED_MODULES,\n        moduleAdded: object,\n        currentSelectedModules: selectedModules\n    }\n}\n\nexport const setModuleLocation = (item, location, AY, selectedModules) => {\n    return { \n        type: SET_MODULE_LOCATION,\n        item,\n        location,\n        AY,\n        modules: selectedModules\n    }\n}\n\nexport const setCurrentSemester = (AY, semester) => {\n    return {\n        type: SET_CURRRENT_SEMESTER,\n        AY,\n        semester\n    }\n}\n\nexport const cleanUpModPlan = () => {\n    return { \n        type: CLEAN_UP_MODPLAN\n    }\n}"]},"metadata":{},"sourceType":"module"}