{"ast":null,"code":"var _jsxFileName = \"/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx\";\nimport { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\"; // import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\n\nimport React, { useState, useEffect } from \"react\";\nimport isEmpty from 'is-empty';\nconst {\n  Option\n} = Select; // const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 4 },\n//     },\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 20 },\n//     },\n//   };\n\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 20,\n      offset: 4\n    }\n  }\n};\n\nconst DynamicFieldSet = props => {\n  // cosnt [form] = Form.useForm();\n  const [options, setOptions] = useState(props.optionList);\n\n  const handleRemove = index => {\n    const updated = [...props.value];\n\n    if (updated[index]) {\n      //add removed option to options in state\n      const temp = [...options];\n\n      for (let i = 0; i < props.optionList.length; i++) {\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n\n      setOptions(temp); //remove option from userInput state in acad settings page\n\n      updated.splice(index, 1);\n      props.setUserInput({\n        [props.name]: updated\n      });\n    }\n  };\n\n  const onChange = (e, object, index) => {\n    const updated = [...props.value];\n    const temp = [...options];\n\n    for (let i = 0; i < props.optionList.length; i++) {\n      if (updated[index]) {\n        //add removed option back into options\n        if (props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n        }\n      }\n\n      if (props.optionList[i].fullName === object.value) {\n        temp.splice(i, 1, null);\n      }\n    }\n\n    setOptions(temp);\n    updated[index] = {\n      name: object.value,\n      tag: object.tag\n    };\n    props.setUserInput({\n      [object.name]: updated\n    });\n  };\n\n  const checkIsOptionsEmpty = () => {\n    for (let i = 0; i < options.length; i++) {\n      if (options[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const renderIntial = () => {\n    console.log('called');\n\n    if (props.value[0]) {\n      return props.value.map((obj, index) => {\n        console.log(obj.name);\n        return /*#__PURE__*/React.createElement(Form.Item, {\n          noStyle: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Select, {\n          showSearch: true,\n          onChange: (e, object) => onChange(e, object, index),\n          defaultValue: \"None \",\n          value: obj ? obj.name : \"None \",\n          style: {\n            width: 250\n          },\n          optionFilterProp: \"children\",\n          filterOption: (input, option) => {\n            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Option, {\n          key: \"choose\" + props.label,\n          value: \"None \",\n          disabled: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }\n        }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name)));\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({\n    name: \"dynamic_form_item\" // form={form}\n    // fields={fields}\n\n  }, formItemLayoutWithOutLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Form.List, {\n    name: props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, (fields, {\n    add,\n    remove\n  }) => {\n    console.log(fields);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }, renderIntial(), fields.map((field, index) => /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n      required: false,\n      key: field.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      // {...field}\n      // validateTrigger={['onChange', 'onBlur']}\n      // rules={[\n      //   {\n      //     required: true,\n      //     whitespace: true,\n      //     message: `Please input ${props.name} or delete this field.`,\n      //   },\n      // ]}\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      onChange: (e, object) => onChange(e, object, index + props.value.length),\n      defaultValue: \"None \",\n      value: props.value[index + props.value.length] ? props.value[index + props.value.length].name : \"None \",\n      style: {\n        width: 250\n      },\n      optionFilterProp: \"children\",\n      filterOption: (input, option) => {\n        return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      key: \"choose\" + props.label,\n      value: \"None \",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    }, \"Choose \" + props.label), generateOptions(options ? options : props.optionList, props.name))), fields.length > 1 ? /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n      className: \"dynamic-delete-button\",\n      onClick: () => {\n        remove(field.name);\n        handleRemove(index + props.value.length);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 23\n      }\n    }) : null)), !checkIsOptionsEmpty() && /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: () => // if(props.value[index] || (index + 1)=== 0) {\n      add() // }\n      ,\n      rules: [{\n        required: true,\n        whitespace: true,\n        message: `Please input ${props.name} or delete this field.`\n      }],\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(PlusOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 24\n      }\n    }), \" Add \", props.name === \"secondMajors\" ? \"Major\" : props.name)));\n  }));\n};\n\nexport default DynamicFieldSet;","map":{"version":3,"sources":["/Users/frisciliasultan/Documents/Orbitalhosting/src/Settings/DynamicFieldSet.jsx"],"names":["Form","Button","Select","MinusCircleOutlined","PlusOutlined","generateOptions","React","useState","useEffect","isEmpty","Option","formItemLayoutWithOutLabel","wrapperCol","xs","span","offset","sm","DynamicFieldSet","props","options","setOptions","optionList","handleRemove","index","updated","value","temp","i","length","fullName","name","splice","setUserInput","onChange","e","object","tag","checkIsOptionsEmpty","renderIntial","console","log","map","obj","width","input","option","children","toLowerCase","indexOf","label","fields","add","remove","field","key","required","whitespace","message"],"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,QAAqC,MAArC;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,mBAAlD;AACA,SAASC,eAAT,QAAgC,0BAAhC,C,CACA;;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaR,MAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAMS,0BAA0B,GAAG;AACjCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,EAAE,EAAE;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB,KADM;AAEVC,IAAAA,EAAE,EAAE;AAAEF,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,MAAM,EAAE;AAApB;AAFM;AADqB,CAAnC;;AASA,MAAME,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACW,KAAK,CAACG,UAAP,CAAtC;;AAEA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAMC,OAAO,GAAG,CAAC,GAAGN,KAAK,CAACO,KAAV,CAAhB;;AACA,QAAGD,OAAO,CAACD,KAAD,CAAV,EAAmB;AAChB;AACH,YAAMG,IAAI,GAAG,CAAC,GAAGP,OAAJ,CAAb;;AACA,WAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,KAAK,CAACG,UAAN,CAAiBO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,YAAGT,KAAK,CAACG,UAAN,CAAiBM,CAAjB,EAAoBE,QAApB,KAAiCL,OAAO,CAACD,KAAD,CAAP,CAAeO,IAAnD,EAAyD;AACvDJ,UAAAA,IAAI,CAACK,MAAL,CAAYJ,CAAZ,EAAe,CAAf,EAAkBT,KAAK,CAACG,UAAN,CAAiBM,CAAjB,CAAlB;AACA;AACD;AACF;;AACDP,MAAAA,UAAU,CAACM,IAAD,CAAV,CATmB,CAWnB;;AACAF,MAAAA,OAAO,CAACO,MAAR,CAAeR,KAAf,EAAsB,CAAtB;AACAL,MAAAA,KAAK,CAACc,YAAN,CAAmB;AAAC,SAACd,KAAK,CAACY,IAAP,GAAcN;AAAf,OAAnB;AACC;AACF,GAjBD;;AAmBA,QAAMS,QAAQ,GAAG,CAACC,CAAD,EAAIC,MAAJ,EAAYZ,KAAZ,KAAsB;AACrC,UAAMC,OAAO,GAAG,CAAC,GAAGN,KAAK,CAACO,KAAV,CAAhB;AAEA,UAAMC,IAAI,GAAG,CAAC,GAAGP,OAAJ,CAAb;;AACE,SAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,KAAK,CAACG,UAAN,CAAiBO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAGH,OAAO,CAACD,KAAD,CAAV,EAAmB;AAChB;AACD,YAAGL,KAAK,CAACG,UAAN,CAAiBM,CAAjB,EAAoBE,QAApB,KAAiCL,OAAO,CAACD,KAAD,CAAP,CAAeO,IAAnD,EAAyD;AACvDJ,UAAAA,IAAI,CAACK,MAAL,CAAYJ,CAAZ,EAAe,CAAf,EAAkBT,KAAK,CAACG,UAAN,CAAiBM,CAAjB,CAAlB;AACD;AACF;;AAED,UAAGT,KAAK,CAACG,UAAN,CAAiBM,CAAjB,EAAoBE,QAApB,KAAiCM,MAAM,CAACV,KAA3C,EAAkD;AAChDC,QAAAA,IAAI,CAACK,MAAL,CAAYJ,CAAZ,EAAe,CAAf,EAAkB,IAAlB;AACD;AACF;;AACFP,IAAAA,UAAU,CAACM,IAAD,CAAV;AAEDF,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiB;AACCO,MAAAA,IAAI,EAAEK,MAAM,CAACV,KADd;AAECW,MAAAA,GAAG,EAAED,MAAM,CAACC;AAFb,KAAjB;AAIAlB,IAAAA,KAAK,CAACc,YAAN,CAAmB;AAAC,OAACG,MAAM,CAACL,IAAR,GAAeN;AAAhB,KAAnB;AACH,GAvBC;;AAyBF,QAAMa,mBAAmB,GAAG,MAAM;AAChC,SAAI,IAAIV,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,OAAO,CAACS,MAA3B,EAAmCD,CAAC,EAApC,EAAyC;AACvC,UAAGR,OAAO,CAACQ,CAAD,CAAV,EAAe;AACb,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASA,QAAMW,YAAY,GAAG,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAGtB,KAAK,CAACO,KAAN,CAAY,CAAZ,CAAH,EAAmB;AACjB,aAAOP,KAAK,CAACO,KAAN,CAAYgB,GAAZ,CAAgB,CAACC,GAAD,EAAMnB,KAAN,KAAgB;AACrCgB,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACZ,IAAhB;AACA,4BAEE,oBAAC,IAAD,CAAM,IAAN;AAAW,UAAA,OAAO,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEE,oBAAC,MAAD;AACE,UAAA,UAAU,MADZ;AAEE,UAAA,QAAQ,EAAE,CAACI,CAAD,EAAIC,MAAJ,KAAeF,QAAQ,CAACC,CAAD,EAAIC,MAAJ,EAAYZ,KAAZ,CAFnC;AAGE,UAAA,YAAY,EAAC,OAHf;AAIE,UAAA,KAAK,EAAEmB,GAAG,GAAGA,GAAG,CAACZ,IAAP,GAAc,OAJ1B;AAKE,UAAA,KAAK,EAAE;AAAEa,YAAAA,KAAK,EAAE;AAAT,WALT;AAME,UAAA,gBAAgB,EAAC,UANnB;AAOE,UAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,mBAAOA,MAAM,CAACC,QAAP,CAAgBC,WAAhB,GAA8BC,OAA9B,CAAsCJ,KAAK,CAACG,WAAN,EAAtC,KAA8D,CAArE;AACH,WATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAUE,oBAAC,MAAD;AACI,UAAA,GAAG,EAAE,WAAW7B,KAAK,CAAC+B,KAD1B;AAEI,UAAA,KAAK,EAAC,OAFV;AAGM,UAAA,QAAQ,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIK,YAAY/B,KAAK,CAAC+B,KAJvB,CAVF,EAgBG5C,eAAe,CAAEc,OAAO,GAAGA,OAAH,GAAaD,KAAK,CAACG,UAA5B,EAAyCH,KAAK,CAACY,IAA/C,CAhBlB,CAFF,CAFF;AAwBD,OA1BM,CAAP;AA2BD;AAEF,GAhCD;;AAkCE,sBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAC,mBADP,CAEE;AACA;;AAHF,KAIMnB,0BAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAME,oBAAC,IAAD,CAAM,IAAN;AACE,IAAA,IAAI,EAAEO,KAAK,CAACY,IADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACoB,MAAD,EAAS;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAT,KAA6B;AAC5Bb,IAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,YAAY,EADf,EAEGY,MAAM,CAACT,GAAP,CAAW,CAACY,KAAD,EAAQ9B,KAAR,kBAEV,oBAAC,IAAD,CAAM,IAAN,oBACOZ,0BADP;AAEE,MAAA,QAAQ,EAAE,KAFZ;AAGE,MAAA,GAAG,EAAE0C,KAAK,CAACC,GAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKE,oBAAC,IAAD,CAAM,IAAN;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,OAAO,MAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYE,oBAAC,MAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,QAAQ,EAAE,CAACpB,CAAD,EAAIC,MAAJ,KAAeF,QAAQ,CAACC,CAAD,EAAIC,MAAJ,EAAaZ,KAAK,GAAGL,KAAK,CAACO,KAAN,CAAYG,MAAjC,CAFnC;AAGE,MAAA,YAAY,EAAC,OAHf;AAIE,MAAA,KAAK,EAAEV,KAAK,CAACO,KAAN,CAAYF,KAAK,GAAGL,KAAK,CAACO,KAAN,CAAYG,MAAhC,IAA0CV,KAAK,CAACO,KAAN,CAAYF,KAAK,GAAGL,KAAK,CAACO,KAAN,CAAYG,MAAhC,EAAwCE,IAAlF,GAAyF,OAJlG;AAKE,MAAA,KAAK,EAAE;AAAEa,QAAAA,KAAK,EAAE;AAAT,OALT;AAME,MAAA,gBAAgB,EAAC,UANnB;AAOE,MAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,eAAOA,MAAM,CAACC,QAAP,CAAgBC,WAAhB,GAA8BC,OAA9B,CAAsCJ,KAAK,CAACG,WAAN,EAAtC,KAA8D,CAArE;AACH,OATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE,oBAAC,MAAD;AACI,MAAA,GAAG,EAAE,WAAW7B,KAAK,CAAC+B,KAD1B;AAEI,MAAA,KAAK,EAAC,OAFV;AAGK,MAAA,QAAQ,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIK,YAAY/B,KAAK,CAAC+B,KAJvB,CAVF,EAgBG5C,eAAe,CAAEc,OAAO,GAAGA,OAAH,GAAaD,KAAK,CAACG,UAA5B,EAAyCH,KAAK,CAACY,IAA/C,CAhBlB,CAZF,CALF,EAqCGoB,MAAM,CAACtB,MAAP,GAAgB,CAAhB,gBACC,oBAAC,mBAAD;AACE,MAAA,SAAS,EAAC,uBADZ;AAGE,MAAA,OAAO,EAAE,MAAM;AACbwB,QAAAA,MAAM,CAACC,KAAK,CAACvB,IAAP,CAAN;AACAR,QAAAA,YAAY,CAACC,KAAK,GAAGL,KAAK,CAACO,KAAN,CAAYG,MAArB,CAAZ;AACD,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GASG,IA9CN,CAFD,CAFH,EAuDG,CAACS,mBAAmB,EAApB,iBAA0B,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACzB,oBAAC,MAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,OAAO,EAAE,MACL;AACEc,MAAAA,GAAG,EAFF,CAGH;AALR;AAOQ,MAAA,KAAK,EAAE,CACH;AACEI,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,OAAO,EAAG,gBAAevC,KAAK,CAACY,IAAK;AAHtC,OADG,CAPf;AAcI,MAAA,KAAK,EAAE;AAAEa,QAAAA,KAAK,EAAE;AAAT,OAdX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAeK,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfL,WAe2BzB,KAAK,CAACY,IAAN,KAAe,cAAf,GAAgC,OAAhC,GAA0CZ,KAAK,CAACY,IAf3E,CADyB,CAvD7B,CADF;AA6ED,GAjFH,CANF,CADF;AAkGD,CA7LD;;AAgMF,eAAeb,eAAf","sourcesContent":["import { Form, Button, Select } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { generateOptions } from \"../utils/commonFunctions\";\n// import AutocompleteText from \"../Pages/Module Planner Page/AutocompleteText\";\nimport React, { useState, useEffect} from \"react\";\nimport isEmpty from 'is-empty';\n\nconst { Option } = Select;\n\n// const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 4 },\n//     },\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 20 },\n//     },\n//   };\n  const formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: { span: 24, offset: 0 },\n      sm: { span: 20, offset: 4 },\n    },\n  };\n  \n  \n\n  const DynamicFieldSet = (props) => {\n    // cosnt [form] = Form.useForm();\n    const [options, setOptions] = useState(props.optionList);\n\n    const handleRemove = (index) => {\n      const updated = [...props.value];\n      if(updated[index]) {\n         //add removed option to options in state\n      const temp = [...options];\n      for(let i = 0; i < props.optionList.length; i++) {\n        if(props.optionList[i].fullName === updated[index].name) {\n          temp.splice(i, 1, props.optionList[i]);\n          break;\n        }\n      }\n      setOptions(temp);\n\n      //remove option from userInput state in acad settings page\n      updated.splice(index, 1);\n      props.setUserInput({[props.name]: updated});\n      }\n    }\n\n    const onChange = (e, object, index) => {\n      const updated = [...props.value];\n     \n      const temp = [...options];\n        for(let i = 0; i < props.optionList.length; i++) {\n          if(updated[index]) {\n             //add removed option back into options\n            if(props.optionList[i].fullName === updated[index].name) {\n              temp.splice(i, 1, props.optionList[i]);\n            }\n          }\n          \n          if(props.optionList[i].fullName === object.value) {\n            temp.splice(i, 1, null);\n          } \n        }\n       setOptions(temp);\n\n      updated[index] = {\n                        name: object.value,\n                        tag: object.tag\n                      };\n      props.setUserInput({[object.name]: updated});\n  }\n\n  const checkIsOptionsEmpty = () => {\n    for(let i = 0; i < options.length; i++ ) {\n      if(options[i]) {\n        return false;\n      } \n    }\n    return true;\n  }\n\n  const renderIntial = () => {\n    console.log('called')\n    if(props.value[0]) {\n      return props.value.map((obj, index) => {\n        console.log(obj.name)\n        return (\n          \n          <Form.Item noStyle>\n               \n            <Select\n              showSearch\n              onChange={(e, object) => onChange(e, object, index)}\n              defaultValue=\"None \"\n              value={obj ? obj.name : \"None \"}\n              style={{ width: 250 }}\n              optionFilterProp=\"children\"\n              filterOption={(input, option) => {\n                  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }}>\n              <Option \n                  key={\"choose\" + props.label}\n                  value=\"None \" \n                    disabled>\n                  {\"Choose \" + props.label}\n              </Option>\n              {generateOptions((options ? options : props.optionList), props.name)}\n            </Select>\n          </Form.Item>\n        )\n      })\n    }\n    \n  }\n\n    return (\n      <Form \n        name=\"dynamic_form_item\" \n        // form={form}\n        // fields={fields}\n        {...formItemLayoutWithOutLabel}>\n          \n        <Form.List \n          name={props.name}>\n          {(fields, { add, remove }) => {\n            console.log(fields)\n            return (\n              <div>\n                {renderIntial()}\n                {fields.map((field, index) => (\n                  \n                  <Form.Item\n                    {...(formItemLayoutWithOutLabel)}\n                    required={false}\n                    key={field.key}\n                  >\n                    <Form.Item\n                      // {...field}\n                      // validateTrigger={['onChange', 'onBlur']}\n                      // rules={[\n                      //   {\n                      //     required: true,\n                      //     whitespace: true,\n                      //     message: `Please input ${props.name} or delete this field.`,\n                      //   },\n                      // ]}\n                      noStyle\n                    >\n                      <Select\n                        showSearch\n                        onChange={(e, object) => onChange(e, object, (index + props.value.length))}\n                        defaultValue=\"None \"\n                        value={props.value[index + props.value.length] ? props.value[index + props.value.length].name : \"None \"}\n                        style={{ width: 250 }}\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => {\n                            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }}>\n                        <Option \n                            key={\"choose\" + props.label}\n                            value=\"None \" \n                             disabled>\n                            {\"Choose \" + props.label}\n                        </Option>\n                        {generateOptions((options ? options : props.optionList), props.name)}\n                      </Select>\n                    </Form.Item>\n\n                    {fields.length > 1 ? (\n                      <MinusCircleOutlined\n                        className=\"dynamic-delete-button\"\n\n                        onClick={() => {\n                          remove(field.name);\n                          handleRemove(index + props.value.length);\n                        }}\n                      />\n                    ) : null}\n                  </Form.Item>\n                ))}\n                \n                \n                {!checkIsOptionsEmpty() && <Form.Item>\n                  <Button\n                      type=\"dashed\"\n                      onClick={() =>\n                          // if(props.value[index] || (index + 1)=== 0) {\n                            add()\n                          // }\n                        }\n                          rules={[\n                              {\n                                required: true,\n                                whitespace: true,\n                                message: `Please input ${props.name} or delete this field.`,\n                              }]\n                      }\n                      style={{ width: '100%' }}>\n                       <PlusOutlined /> Add {props.name === \"secondMajors\" ? \"Major\" : props.name}\n                    </Button>\n                  </Form.Item>}\n              </div>\n            );\n          }}\n        </Form.List>\n  \n        {/* <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item> */}\n      </Form>\n    );\n  };\n  \n\nexport default DynamicFieldSet;"]},"metadata":{},"sourceType":"module"}